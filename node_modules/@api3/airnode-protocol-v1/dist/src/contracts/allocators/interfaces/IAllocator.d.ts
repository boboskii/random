import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";
export interface IAllocatorInterface extends utils.Interface {
    functions: {
        "SLOT_SETTER_ROLE_DESCRIPTION()": FunctionFragment;
        "airnodeToSlotIndexToSlot(address,uint256)": FunctionFragment;
        "resetSlot(address,uint256)": FunctionFragment;
        "setSlot(address,uint256,bytes32,uint32)": FunctionFragment;
        "slotCanBeResetByAccount(address,uint256,address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "SLOT_SETTER_ROLE_DESCRIPTION" | "airnodeToSlotIndexToSlot" | "resetSlot" | "setSlot" | "slotCanBeResetByAccount"): FunctionFragment;
    encodeFunctionData(functionFragment: "SLOT_SETTER_ROLE_DESCRIPTION", values?: undefined): string;
    encodeFunctionData(functionFragment: "airnodeToSlotIndexToSlot", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "resetSlot", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setSlot", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "slotCanBeResetByAccount", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    decodeFunctionResult(functionFragment: "SLOT_SETTER_ROLE_DESCRIPTION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "airnodeToSlotIndexToSlot", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resetSlot", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSlot", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "slotCanBeResetByAccount", data: BytesLike): Result;
    events: {
        "ResetSlot(address,uint256,address)": EventFragment;
        "SetSlot(address,uint256,bytes32,uint32,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ResetSlot"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetSlot"): EventFragment;
}
export interface ResetSlotEventObject {
    airnode: string;
    slotIndex: BigNumber;
    sender: string;
}
export type ResetSlotEvent = TypedEvent<[
    string,
    BigNumber,
    string
], ResetSlotEventObject>;
export type ResetSlotEventFilter = TypedEventFilter<ResetSlotEvent>;
export interface SetSlotEventObject {
    airnode: string;
    slotIndex: BigNumber;
    subscriptionId: string;
    expirationTimestamp: number;
    sender: string;
}
export type SetSlotEvent = TypedEvent<[
    string,
    BigNumber,
    string,
    number,
    string
], SetSlotEventObject>;
export type SetSlotEventFilter = TypedEventFilter<SetSlotEvent>;
export interface IAllocator extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IAllocatorInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        SLOT_SETTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<[string]>;
        airnodeToSlotIndexToSlot(airnode: PromiseOrValue<string>, slotIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            string,
            string,
            number
        ] & {
            subscriptionId: string;
            setter: string;
            expirationTimestamp: number;
        }>;
        resetSlot(airnode: PromiseOrValue<string>, slotIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSlot(airnode: PromiseOrValue<string>, slotIndex: PromiseOrValue<BigNumberish>, subscriptionId: PromiseOrValue<BytesLike>, expirationTimestamp: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        slotCanBeResetByAccount(airnode: PromiseOrValue<string>, slotIndex: PromiseOrValue<BigNumberish>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    SLOT_SETTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
    airnodeToSlotIndexToSlot(airnode: PromiseOrValue<string>, slotIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        string,
        string,
        number
    ] & {
        subscriptionId: string;
        setter: string;
        expirationTimestamp: number;
    }>;
    resetSlot(airnode: PromiseOrValue<string>, slotIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSlot(airnode: PromiseOrValue<string>, slotIndex: PromiseOrValue<BigNumberish>, subscriptionId: PromiseOrValue<BytesLike>, expirationTimestamp: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    slotCanBeResetByAccount(airnode: PromiseOrValue<string>, slotIndex: PromiseOrValue<BigNumberish>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        SLOT_SETTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
        airnodeToSlotIndexToSlot(airnode: PromiseOrValue<string>, slotIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            string,
            string,
            number
        ] & {
            subscriptionId: string;
            setter: string;
            expirationTimestamp: number;
        }>;
        resetSlot(airnode: PromiseOrValue<string>, slotIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setSlot(airnode: PromiseOrValue<string>, slotIndex: PromiseOrValue<BigNumberish>, subscriptionId: PromiseOrValue<BytesLike>, expirationTimestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        slotCanBeResetByAccount(airnode: PromiseOrValue<string>, slotIndex: PromiseOrValue<BigNumberish>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "ResetSlot(address,uint256,address)"(airnode?: PromiseOrValue<string> | null, slotIndex?: PromiseOrValue<BigNumberish> | null, sender?: null): ResetSlotEventFilter;
        ResetSlot(airnode?: PromiseOrValue<string> | null, slotIndex?: PromiseOrValue<BigNumberish> | null, sender?: null): ResetSlotEventFilter;
        "SetSlot(address,uint256,bytes32,uint32,address)"(airnode?: PromiseOrValue<string> | null, slotIndex?: PromiseOrValue<BigNumberish> | null, subscriptionId?: null, expirationTimestamp?: null, sender?: null): SetSlotEventFilter;
        SetSlot(airnode?: PromiseOrValue<string> | null, slotIndex?: PromiseOrValue<BigNumberish> | null, subscriptionId?: null, expirationTimestamp?: null, sender?: null): SetSlotEventFilter;
    };
    estimateGas: {
        SLOT_SETTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<BigNumber>;
        airnodeToSlotIndexToSlot(airnode: PromiseOrValue<string>, slotIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        resetSlot(airnode: PromiseOrValue<string>, slotIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSlot(airnode: PromiseOrValue<string>, slotIndex: PromiseOrValue<BigNumberish>, subscriptionId: PromiseOrValue<BytesLike>, expirationTimestamp: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        slotCanBeResetByAccount(airnode: PromiseOrValue<string>, slotIndex: PromiseOrValue<BigNumberish>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        SLOT_SETTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        airnodeToSlotIndexToSlot(airnode: PromiseOrValue<string>, slotIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        resetSlot(airnode: PromiseOrValue<string>, slotIndex: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSlot(airnode: PromiseOrValue<string>, slotIndex: PromiseOrValue<BigNumberish>, subscriptionId: PromiseOrValue<BytesLike>, expirationTimestamp: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        slotCanBeResetByAccount(airnode: PromiseOrValue<string>, slotIndex: PromiseOrValue<BigNumberish>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
