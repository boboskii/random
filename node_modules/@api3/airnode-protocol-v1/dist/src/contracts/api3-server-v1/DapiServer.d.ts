import type { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";
export interface DapiServerInterface extends utils.Interface {
    functions: {
        "DAPI_NAME_SETTER_ROLE_DESCRIPTION()": FunctionFragment;
        "accessControlRegistry()": FunctionFragment;
        "adminRole()": FunctionFragment;
        "adminRoleDescription()": FunctionFragment;
        "containsBytecode(address)": FunctionFragment;
        "dapiNameHashToDataFeedId(bytes32)": FunctionFragment;
        "dapiNameSetterRole()": FunctionFragment;
        "dapiNameToDataFeedId(bytes32)": FunctionFragment;
        "getBalance(address)": FunctionFragment;
        "getBlockBasefee()": FunctionFragment;
        "getBlockNumber()": FunctionFragment;
        "getBlockTimestamp()": FunctionFragment;
        "getChainId()": FunctionFragment;
        "manager()": FunctionFragment;
        "multicall(bytes[])": FunctionFragment;
        "setDapiName(bytes32,bytes32)": FunctionFragment;
        "tryMulticall(bytes[])": FunctionFragment;
        "updateBeaconSetWithBeacons(bytes32[])": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "DAPI_NAME_SETTER_ROLE_DESCRIPTION" | "accessControlRegistry" | "adminRole" | "adminRoleDescription" | "containsBytecode" | "dapiNameHashToDataFeedId" | "dapiNameSetterRole" | "dapiNameToDataFeedId" | "getBalance" | "getBlockBasefee" | "getBlockNumber" | "getBlockTimestamp" | "getChainId" | "manager" | "multicall" | "setDapiName" | "tryMulticall" | "updateBeaconSetWithBeacons"): FunctionFragment;
    encodeFunctionData(functionFragment: "DAPI_NAME_SETTER_ROLE_DESCRIPTION", values?: undefined): string;
    encodeFunctionData(functionFragment: "accessControlRegistry", values?: undefined): string;
    encodeFunctionData(functionFragment: "adminRole", values?: undefined): string;
    encodeFunctionData(functionFragment: "adminRoleDescription", values?: undefined): string;
    encodeFunctionData(functionFragment: "containsBytecode", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "dapiNameHashToDataFeedId", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "dapiNameSetterRole", values?: undefined): string;
    encodeFunctionData(functionFragment: "dapiNameToDataFeedId", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getBalance", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getBlockBasefee", values?: undefined): string;
    encodeFunctionData(functionFragment: "getBlockNumber", values?: undefined): string;
    encodeFunctionData(functionFragment: "getBlockTimestamp", values?: undefined): string;
    encodeFunctionData(functionFragment: "getChainId", values?: undefined): string;
    encodeFunctionData(functionFragment: "manager", values?: undefined): string;
    encodeFunctionData(functionFragment: "multicall", values: [PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "setDapiName", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "tryMulticall", values: [PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "updateBeaconSetWithBeacons", values: [PromiseOrValue<BytesLike>[]]): string;
    decodeFunctionResult(functionFragment: "DAPI_NAME_SETTER_ROLE_DESCRIPTION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "accessControlRegistry", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "adminRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "adminRoleDescription", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "containsBytecode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dapiNameHashToDataFeedId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dapiNameSetterRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dapiNameToDataFeedId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBlockBasefee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBlockNumber", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBlockTimestamp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDapiName", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tryMulticall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateBeaconSetWithBeacons", data: BytesLike): Result;
    events: {
        "SetDapiName(bytes32,bytes32,address)": EventFragment;
        "UpdatedBeaconSetWithBeacons(bytes32,int224,uint32)": EventFragment;
        "UpdatedBeaconWithSignedData(bytes32,int224,uint32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "SetDapiName"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatedBeaconSetWithBeacons"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatedBeaconWithSignedData"): EventFragment;
}
export interface SetDapiNameEventObject {
    dataFeedId: string;
    dapiName: string;
    sender: string;
}
export type SetDapiNameEvent = TypedEvent<[
    string,
    string,
    string
], SetDapiNameEventObject>;
export type SetDapiNameEventFilter = TypedEventFilter<SetDapiNameEvent>;
export interface UpdatedBeaconSetWithBeaconsEventObject {
    beaconSetId: string;
    value: BigNumber;
    timestamp: number;
}
export type UpdatedBeaconSetWithBeaconsEvent = TypedEvent<[
    string,
    BigNumber,
    number
], UpdatedBeaconSetWithBeaconsEventObject>;
export type UpdatedBeaconSetWithBeaconsEventFilter = TypedEventFilter<UpdatedBeaconSetWithBeaconsEvent>;
export interface UpdatedBeaconWithSignedDataEventObject {
    beaconId: string;
    value: BigNumber;
    timestamp: number;
}
export type UpdatedBeaconWithSignedDataEvent = TypedEvent<[
    string,
    BigNumber,
    number
], UpdatedBeaconWithSignedDataEventObject>;
export type UpdatedBeaconWithSignedDataEventFilter = TypedEventFilter<UpdatedBeaconWithSignedDataEvent>;
export interface DapiServer extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DapiServerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        DAPI_NAME_SETTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<[string]>;
        accessControlRegistry(overrides?: CallOverrides): Promise<[string]>;
        adminRole(overrides?: CallOverrides): Promise<[string]>;
        adminRoleDescription(overrides?: CallOverrides): Promise<[string]>;
        containsBytecode(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        dapiNameHashToDataFeedId(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        dapiNameSetterRole(overrides?: CallOverrides): Promise<[string]>;
        dapiNameToDataFeedId(dapiName: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        getBalance(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getBlockBasefee(overrides?: CallOverrides): Promise<[BigNumber]>;
        getBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;
        getBlockTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;
        getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;
        manager(overrides?: CallOverrides): Promise<[string]>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDapiName(dapiName: PromiseOrValue<BytesLike>, dataFeedId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateBeaconSetWithBeacons(beaconIds: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    DAPI_NAME_SETTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
    accessControlRegistry(overrides?: CallOverrides): Promise<string>;
    adminRole(overrides?: CallOverrides): Promise<string>;
    adminRoleDescription(overrides?: CallOverrides): Promise<string>;
    containsBytecode(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    dapiNameHashToDataFeedId(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    dapiNameSetterRole(overrides?: CallOverrides): Promise<string>;
    dapiNameToDataFeedId(dapiName: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    getBalance(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    getBlockBasefee(overrides?: CallOverrides): Promise<BigNumber>;
    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;
    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;
    getChainId(overrides?: CallOverrides): Promise<BigNumber>;
    manager(overrides?: CallOverrides): Promise<string>;
    multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDapiName(dapiName: PromiseOrValue<BytesLike>, dataFeedId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateBeaconSetWithBeacons(beaconIds: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        DAPI_NAME_SETTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
        accessControlRegistry(overrides?: CallOverrides): Promise<string>;
        adminRole(overrides?: CallOverrides): Promise<string>;
        adminRoleDescription(overrides?: CallOverrides): Promise<string>;
        containsBytecode(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        dapiNameHashToDataFeedId(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        dapiNameSetterRole(overrides?: CallOverrides): Promise<string>;
        dapiNameToDataFeedId(dapiName: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        getBalance(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getBlockBasefee(overrides?: CallOverrides): Promise<BigNumber>;
        getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;
        getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;
        getChainId(overrides?: CallOverrides): Promise<BigNumber>;
        manager(overrides?: CallOverrides): Promise<string>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string[]>;
        setDapiName(dapiName: PromiseOrValue<BytesLike>, dataFeedId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[
            boolean[],
            string[]
        ] & {
            successes: boolean[];
            returndata: string[];
        }>;
        updateBeaconSetWithBeacons(beaconIds: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "SetDapiName(bytes32,bytes32,address)"(dataFeedId?: PromiseOrValue<BytesLike> | null, dapiName?: PromiseOrValue<BytesLike> | null, sender?: null): SetDapiNameEventFilter;
        SetDapiName(dataFeedId?: PromiseOrValue<BytesLike> | null, dapiName?: PromiseOrValue<BytesLike> | null, sender?: null): SetDapiNameEventFilter;
        "UpdatedBeaconSetWithBeacons(bytes32,int224,uint32)"(beaconSetId?: PromiseOrValue<BytesLike> | null, value?: null, timestamp?: null): UpdatedBeaconSetWithBeaconsEventFilter;
        UpdatedBeaconSetWithBeacons(beaconSetId?: PromiseOrValue<BytesLike> | null, value?: null, timestamp?: null): UpdatedBeaconSetWithBeaconsEventFilter;
        "UpdatedBeaconWithSignedData(bytes32,int224,uint32)"(beaconId?: PromiseOrValue<BytesLike> | null, value?: null, timestamp?: null): UpdatedBeaconWithSignedDataEventFilter;
        UpdatedBeaconWithSignedData(beaconId?: PromiseOrValue<BytesLike> | null, value?: null, timestamp?: null): UpdatedBeaconWithSignedDataEventFilter;
    };
    estimateGas: {
        DAPI_NAME_SETTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<BigNumber>;
        accessControlRegistry(overrides?: CallOverrides): Promise<BigNumber>;
        adminRole(overrides?: CallOverrides): Promise<BigNumber>;
        adminRoleDescription(overrides?: CallOverrides): Promise<BigNumber>;
        containsBytecode(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        dapiNameHashToDataFeedId(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        dapiNameSetterRole(overrides?: CallOverrides): Promise<BigNumber>;
        dapiNameToDataFeedId(dapiName: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getBalance(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getBlockBasefee(overrides?: CallOverrides): Promise<BigNumber>;
        getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;
        getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;
        getChainId(overrides?: CallOverrides): Promise<BigNumber>;
        manager(overrides?: CallOverrides): Promise<BigNumber>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDapiName(dapiName: PromiseOrValue<BytesLike>, dataFeedId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateBeaconSetWithBeacons(beaconIds: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        DAPI_NAME_SETTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        accessControlRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        adminRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        adminRoleDescription(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        containsBytecode(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dapiNameHashToDataFeedId(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dapiNameSetterRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dapiNameToDataFeedId(dapiName: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getBalance(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getBlockBasefee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getBlockTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDapiName(dapiName: PromiseOrValue<BytesLike>, dataFeedId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateBeaconSetWithBeacons(beaconIds: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
