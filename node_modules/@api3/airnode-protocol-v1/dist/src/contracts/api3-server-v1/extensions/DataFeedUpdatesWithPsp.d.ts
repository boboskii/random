import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";
export interface DataFeedUpdatesWithPspInterface extends utils.Interface {
    functions: {
        "HUNDRED_PERCENT()": FunctionFragment;
        "conditionPspBeaconSetUpdate(bytes32,bytes,bytes)": FunctionFragment;
        "conditionPspBeaconUpdate(bytes32,bytes,bytes)": FunctionFragment;
        "containsBytecode(address)": FunctionFragment;
        "fulfillPspBeaconSetUpdate(bytes32,address,address,address,uint256,bytes,bytes)": FunctionFragment;
        "fulfillPspBeaconUpdate(bytes32,address,address,address,uint256,bytes,bytes)": FunctionFragment;
        "getBalance(address)": FunctionFragment;
        "getBlockBasefee()": FunctionFragment;
        "getBlockNumber()": FunctionFragment;
        "getBlockTimestamp()": FunctionFragment;
        "getChainId()": FunctionFragment;
        "multicall(bytes[])": FunctionFragment;
        "registerBeaconUpdateSubscription(address,bytes32,bytes,address,address)": FunctionFragment;
        "subscriptionIdToBeaconId(bytes32)": FunctionFragment;
        "tryMulticall(bytes[])": FunctionFragment;
        "updateBeaconSetWithBeacons(bytes32[])": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "HUNDRED_PERCENT" | "conditionPspBeaconSetUpdate" | "conditionPspBeaconUpdate" | "containsBytecode" | "fulfillPspBeaconSetUpdate" | "fulfillPspBeaconUpdate" | "getBalance" | "getBlockBasefee" | "getBlockNumber" | "getBlockTimestamp" | "getChainId" | "multicall" | "registerBeaconUpdateSubscription" | "subscriptionIdToBeaconId" | "tryMulticall" | "updateBeaconSetWithBeacons"): FunctionFragment;
    encodeFunctionData(functionFragment: "HUNDRED_PERCENT", values?: undefined): string;
    encodeFunctionData(functionFragment: "conditionPspBeaconSetUpdate", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "conditionPspBeaconUpdate", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "containsBytecode", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "fulfillPspBeaconSetUpdate", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "fulfillPspBeaconUpdate", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getBalance", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getBlockBasefee", values?: undefined): string;
    encodeFunctionData(functionFragment: "getBlockNumber", values?: undefined): string;
    encodeFunctionData(functionFragment: "getBlockTimestamp", values?: undefined): string;
    encodeFunctionData(functionFragment: "getChainId", values?: undefined): string;
    encodeFunctionData(functionFragment: "multicall", values: [PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "registerBeaconUpdateSubscription", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "subscriptionIdToBeaconId", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "tryMulticall", values: [PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "updateBeaconSetWithBeacons", values: [PromiseOrValue<BytesLike>[]]): string;
    decodeFunctionResult(functionFragment: "HUNDRED_PERCENT", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "conditionPspBeaconSetUpdate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "conditionPspBeaconUpdate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "containsBytecode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fulfillPspBeaconSetUpdate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fulfillPspBeaconUpdate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBlockBasefee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBlockNumber", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBlockTimestamp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerBeaconUpdateSubscription", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "subscriptionIdToBeaconId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tryMulticall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateBeaconSetWithBeacons", data: BytesLike): Result;
    events: {
        "RegisteredBeaconUpdateSubscription(bytes32,bytes32,address,bytes32,bytes,address,address)": EventFragment;
        "UpdatedBeaconSetWithBeacons(bytes32,int224,uint32)": EventFragment;
        "UpdatedBeaconWithPsp(bytes32,bytes32,int224,uint32)": EventFragment;
        "UpdatedBeaconWithSignedData(bytes32,int224,uint32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "RegisteredBeaconUpdateSubscription"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatedBeaconSetWithBeacons"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatedBeaconWithPsp"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatedBeaconWithSignedData"): EventFragment;
}
export interface RegisteredBeaconUpdateSubscriptionEventObject {
    beaconId: string;
    subscriptionId: string;
    airnode: string;
    templateId: string;
    conditions: string;
    relayer: string;
    sponsor: string;
}
export type RegisteredBeaconUpdateSubscriptionEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    string,
    string,
    string
], RegisteredBeaconUpdateSubscriptionEventObject>;
export type RegisteredBeaconUpdateSubscriptionEventFilter = TypedEventFilter<RegisteredBeaconUpdateSubscriptionEvent>;
export interface UpdatedBeaconSetWithBeaconsEventObject {
    beaconSetId: string;
    value: BigNumber;
    timestamp: number;
}
export type UpdatedBeaconSetWithBeaconsEvent = TypedEvent<[
    string,
    BigNumber,
    number
], UpdatedBeaconSetWithBeaconsEventObject>;
export type UpdatedBeaconSetWithBeaconsEventFilter = TypedEventFilter<UpdatedBeaconSetWithBeaconsEvent>;
export interface UpdatedBeaconWithPspEventObject {
    beaconId: string;
    subscriptionId: string;
    value: BigNumber;
    timestamp: number;
}
export type UpdatedBeaconWithPspEvent = TypedEvent<[
    string,
    string,
    BigNumber,
    number
], UpdatedBeaconWithPspEventObject>;
export type UpdatedBeaconWithPspEventFilter = TypedEventFilter<UpdatedBeaconWithPspEvent>;
export interface UpdatedBeaconWithSignedDataEventObject {
    beaconId: string;
    value: BigNumber;
    timestamp: number;
}
export type UpdatedBeaconWithSignedDataEvent = TypedEvent<[
    string,
    BigNumber,
    number
], UpdatedBeaconWithSignedDataEventObject>;
export type UpdatedBeaconWithSignedDataEventFilter = TypedEventFilter<UpdatedBeaconWithSignedDataEvent>;
export interface DataFeedUpdatesWithPsp extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DataFeedUpdatesWithPspInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        HUNDRED_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;
        conditionPspBeaconSetUpdate(arg0: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, conditionParameters: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        conditionPspBeaconUpdate(subscriptionId: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, conditionParameters: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        containsBytecode(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        fulfillPspBeaconSetUpdate(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, arg2: PromiseOrValue<string>, arg3: PromiseOrValue<string>, arg4: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, arg6: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        fulfillPspBeaconUpdate(subscriptionId: PromiseOrValue<BytesLike>, airnode: PromiseOrValue<string>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, timestamp: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getBalance(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getBlockBasefee(overrides?: CallOverrides): Promise<[BigNumber]>;
        getBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;
        getBlockTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;
        getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        registerBeaconUpdateSubscription(airnode: PromiseOrValue<string>, templateId: PromiseOrValue<BytesLike>, conditions: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        subscriptionIdToBeaconId(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateBeaconSetWithBeacons(beaconIds: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;
    conditionPspBeaconSetUpdate(arg0: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, conditionParameters: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    conditionPspBeaconUpdate(subscriptionId: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, conditionParameters: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    containsBytecode(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    fulfillPspBeaconSetUpdate(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, arg2: PromiseOrValue<string>, arg3: PromiseOrValue<string>, arg4: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, arg6: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    fulfillPspBeaconUpdate(subscriptionId: PromiseOrValue<BytesLike>, airnode: PromiseOrValue<string>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, timestamp: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getBalance(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    getBlockBasefee(overrides?: CallOverrides): Promise<BigNumber>;
    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;
    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;
    getChainId(overrides?: CallOverrides): Promise<BigNumber>;
    multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    registerBeaconUpdateSubscription(airnode: PromiseOrValue<string>, templateId: PromiseOrValue<BytesLike>, conditions: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    subscriptionIdToBeaconId(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateBeaconSetWithBeacons(beaconIds: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;
        conditionPspBeaconSetUpdate(arg0: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, conditionParameters: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        conditionPspBeaconUpdate(subscriptionId: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, conditionParameters: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        containsBytecode(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        fulfillPspBeaconSetUpdate(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, arg2: PromiseOrValue<string>, arg3: PromiseOrValue<string>, arg4: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, arg6: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        fulfillPspBeaconUpdate(subscriptionId: PromiseOrValue<BytesLike>, airnode: PromiseOrValue<string>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, timestamp: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, signature: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        getBalance(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getBlockBasefee(overrides?: CallOverrides): Promise<BigNumber>;
        getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;
        getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;
        getChainId(overrides?: CallOverrides): Promise<BigNumber>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string[]>;
        registerBeaconUpdateSubscription(airnode: PromiseOrValue<string>, templateId: PromiseOrValue<BytesLike>, conditions: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        subscriptionIdToBeaconId(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[
            boolean[],
            string[]
        ] & {
            successes: boolean[];
            returndata: string[];
        }>;
        updateBeaconSetWithBeacons(beaconIds: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "RegisteredBeaconUpdateSubscription(bytes32,bytes32,address,bytes32,bytes,address,address)"(beaconId?: PromiseOrValue<BytesLike> | null, subscriptionId?: null, airnode?: null, templateId?: null, conditions?: null, relayer?: null, sponsor?: null): RegisteredBeaconUpdateSubscriptionEventFilter;
        RegisteredBeaconUpdateSubscription(beaconId?: PromiseOrValue<BytesLike> | null, subscriptionId?: null, airnode?: null, templateId?: null, conditions?: null, relayer?: null, sponsor?: null): RegisteredBeaconUpdateSubscriptionEventFilter;
        "UpdatedBeaconSetWithBeacons(bytes32,int224,uint32)"(beaconSetId?: PromiseOrValue<BytesLike> | null, value?: null, timestamp?: null): UpdatedBeaconSetWithBeaconsEventFilter;
        UpdatedBeaconSetWithBeacons(beaconSetId?: PromiseOrValue<BytesLike> | null, value?: null, timestamp?: null): UpdatedBeaconSetWithBeaconsEventFilter;
        "UpdatedBeaconWithPsp(bytes32,bytes32,int224,uint32)"(beaconId?: PromiseOrValue<BytesLike> | null, subscriptionId?: null, value?: null, timestamp?: null): UpdatedBeaconWithPspEventFilter;
        UpdatedBeaconWithPsp(beaconId?: PromiseOrValue<BytesLike> | null, subscriptionId?: null, value?: null, timestamp?: null): UpdatedBeaconWithPspEventFilter;
        "UpdatedBeaconWithSignedData(bytes32,int224,uint32)"(beaconId?: PromiseOrValue<BytesLike> | null, value?: null, timestamp?: null): UpdatedBeaconWithSignedDataEventFilter;
        UpdatedBeaconWithSignedData(beaconId?: PromiseOrValue<BytesLike> | null, value?: null, timestamp?: null): UpdatedBeaconWithSignedDataEventFilter;
    };
    estimateGas: {
        HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;
        conditionPspBeaconSetUpdate(arg0: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, conditionParameters: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        conditionPspBeaconUpdate(subscriptionId: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, conditionParameters: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        containsBytecode(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        fulfillPspBeaconSetUpdate(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, arg2: PromiseOrValue<string>, arg3: PromiseOrValue<string>, arg4: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, arg6: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        fulfillPspBeaconUpdate(subscriptionId: PromiseOrValue<BytesLike>, airnode: PromiseOrValue<string>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, timestamp: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getBalance(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getBlockBasefee(overrides?: CallOverrides): Promise<BigNumber>;
        getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;
        getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;
        getChainId(overrides?: CallOverrides): Promise<BigNumber>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        registerBeaconUpdateSubscription(airnode: PromiseOrValue<string>, templateId: PromiseOrValue<BytesLike>, conditions: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        subscriptionIdToBeaconId(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateBeaconSetWithBeacons(beaconIds: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        HUNDRED_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        conditionPspBeaconSetUpdate(arg0: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, conditionParameters: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        conditionPspBeaconUpdate(subscriptionId: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, conditionParameters: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        containsBytecode(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        fulfillPspBeaconSetUpdate(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, arg2: PromiseOrValue<string>, arg3: PromiseOrValue<string>, arg4: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, arg6: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        fulfillPspBeaconUpdate(subscriptionId: PromiseOrValue<BytesLike>, airnode: PromiseOrValue<string>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, timestamp: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getBalance(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getBlockBasefee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getBlockTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        registerBeaconUpdateSubscription(airnode: PromiseOrValue<string>, templateId: PromiseOrValue<BytesLike>, conditions: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        subscriptionIdToBeaconId(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateBeaconSetWithBeacons(beaconIds: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
