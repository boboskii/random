import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";
export interface BeaconUpdatesWithRrpInterface extends utils.Interface {
    functions: {
        "airnodeProtocol()": FunctionFragment;
        "containsBytecode(address)": FunctionFragment;
        "fulfillRrpBeaconUpdate(bytes32,uint256,bytes)": FunctionFragment;
        "getBalance(address)": FunctionFragment;
        "getBlockBasefee()": FunctionFragment;
        "getBlockNumber()": FunctionFragment;
        "getBlockTimestamp()": FunctionFragment;
        "getChainId()": FunctionFragment;
        "multicall(bytes[])": FunctionFragment;
        "requestRelayedRrpBeaconUpdateWithEndpoint(address,bytes32,bytes,address,address)": FunctionFragment;
        "requestRelayedRrpBeaconUpdateWithTemplate(address,bytes32,address,address)": FunctionFragment;
        "requestRrpBeaconUpdateWithEndpoint(address,bytes32,bytes,address)": FunctionFragment;
        "requestRrpBeaconUpdateWithTemplate(address,bytes32,address)": FunctionFragment;
        "setRrpBeaconUpdatePermissionStatus(address,bool)": FunctionFragment;
        "sponsorToRrpBeaconUpdateRequesterToPermissionStatus(address,address)": FunctionFragment;
        "tryMulticall(bytes[])": FunctionFragment;
        "updateBeaconSetWithBeacons(bytes32[])": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "airnodeProtocol" | "containsBytecode" | "fulfillRrpBeaconUpdate" | "getBalance" | "getBlockBasefee" | "getBlockNumber" | "getBlockTimestamp" | "getChainId" | "multicall" | "requestRelayedRrpBeaconUpdateWithEndpoint" | "requestRelayedRrpBeaconUpdateWithTemplate" | "requestRrpBeaconUpdateWithEndpoint" | "requestRrpBeaconUpdateWithTemplate" | "setRrpBeaconUpdatePermissionStatus" | "sponsorToRrpBeaconUpdateRequesterToPermissionStatus" | "tryMulticall" | "updateBeaconSetWithBeacons"): FunctionFragment;
    encodeFunctionData(functionFragment: "airnodeProtocol", values?: undefined): string;
    encodeFunctionData(functionFragment: "containsBytecode", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "fulfillRrpBeaconUpdate", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getBalance", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getBlockBasefee", values?: undefined): string;
    encodeFunctionData(functionFragment: "getBlockNumber", values?: undefined): string;
    encodeFunctionData(functionFragment: "getBlockTimestamp", values?: undefined): string;
    encodeFunctionData(functionFragment: "getChainId", values?: undefined): string;
    encodeFunctionData(functionFragment: "multicall", values: [PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "requestRelayedRrpBeaconUpdateWithEndpoint", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "requestRelayedRrpBeaconUpdateWithTemplate", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "requestRrpBeaconUpdateWithEndpoint", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "requestRrpBeaconUpdateWithTemplate", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "setRrpBeaconUpdatePermissionStatus", values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "sponsorToRrpBeaconUpdateRequesterToPermissionStatus", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "tryMulticall", values: [PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "updateBeaconSetWithBeacons", values: [PromiseOrValue<BytesLike>[]]): string;
    decodeFunctionResult(functionFragment: "airnodeProtocol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "containsBytecode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fulfillRrpBeaconUpdate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBlockBasefee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBlockNumber", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBlockTimestamp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requestRelayedRrpBeaconUpdateWithEndpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requestRelayedRrpBeaconUpdateWithTemplate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requestRrpBeaconUpdateWithEndpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requestRrpBeaconUpdateWithTemplate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRrpBeaconUpdatePermissionStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sponsorToRrpBeaconUpdateRequesterToPermissionStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tryMulticall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateBeaconSetWithBeacons", data: BytesLike): Result;
    events: {
        "RequestedRelayedRrpBeaconUpdate(bytes32,address,bytes32,address,address,bytes32,address)": EventFragment;
        "RequestedRrpBeaconUpdate(bytes32,address,bytes32,address,bytes32,address)": EventFragment;
        "SetRrpBeaconUpdatePermissionStatus(address,address,bool)": EventFragment;
        "UpdatedBeaconSetWithBeacons(bytes32,int224,uint32)": EventFragment;
        "UpdatedBeaconWithRrp(bytes32,bytes32,int224,uint32)": EventFragment;
        "UpdatedBeaconWithSignedData(bytes32,int224,uint32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "RequestedRelayedRrpBeaconUpdate"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RequestedRrpBeaconUpdate"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetRrpBeaconUpdatePermissionStatus"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatedBeaconSetWithBeacons"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatedBeaconWithRrp"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatedBeaconWithSignedData"): EventFragment;
}
export interface RequestedRelayedRrpBeaconUpdateEventObject {
    beaconId: string;
    airnode: string;
    templateId: string;
    relayer: string;
    sponsor: string;
    requestId: string;
    requester: string;
}
export type RequestedRelayedRrpBeaconUpdateEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    string,
    string,
    string
], RequestedRelayedRrpBeaconUpdateEventObject>;
export type RequestedRelayedRrpBeaconUpdateEventFilter = TypedEventFilter<RequestedRelayedRrpBeaconUpdateEvent>;
export interface RequestedRrpBeaconUpdateEventObject {
    beaconId: string;
    airnode: string;
    templateId: string;
    sponsor: string;
    requestId: string;
    requester: string;
}
export type RequestedRrpBeaconUpdateEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    string,
    string
], RequestedRrpBeaconUpdateEventObject>;
export type RequestedRrpBeaconUpdateEventFilter = TypedEventFilter<RequestedRrpBeaconUpdateEvent>;
export interface SetRrpBeaconUpdatePermissionStatusEventObject {
    sponsor: string;
    requester: string;
    status: boolean;
}
export type SetRrpBeaconUpdatePermissionStatusEvent = TypedEvent<[
    string,
    string,
    boolean
], SetRrpBeaconUpdatePermissionStatusEventObject>;
export type SetRrpBeaconUpdatePermissionStatusEventFilter = TypedEventFilter<SetRrpBeaconUpdatePermissionStatusEvent>;
export interface UpdatedBeaconSetWithBeaconsEventObject {
    beaconSetId: string;
    value: BigNumber;
    timestamp: number;
}
export type UpdatedBeaconSetWithBeaconsEvent = TypedEvent<[
    string,
    BigNumber,
    number
], UpdatedBeaconSetWithBeaconsEventObject>;
export type UpdatedBeaconSetWithBeaconsEventFilter = TypedEventFilter<UpdatedBeaconSetWithBeaconsEvent>;
export interface UpdatedBeaconWithRrpEventObject {
    beaconId: string;
    requestId: string;
    value: BigNumber;
    timestamp: number;
}
export type UpdatedBeaconWithRrpEvent = TypedEvent<[
    string,
    string,
    BigNumber,
    number
], UpdatedBeaconWithRrpEventObject>;
export type UpdatedBeaconWithRrpEventFilter = TypedEventFilter<UpdatedBeaconWithRrpEvent>;
export interface UpdatedBeaconWithSignedDataEventObject {
    beaconId: string;
    value: BigNumber;
    timestamp: number;
}
export type UpdatedBeaconWithSignedDataEvent = TypedEvent<[
    string,
    BigNumber,
    number
], UpdatedBeaconWithSignedDataEventObject>;
export type UpdatedBeaconWithSignedDataEventFilter = TypedEventFilter<UpdatedBeaconWithSignedDataEvent>;
export interface BeaconUpdatesWithRrp extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: BeaconUpdatesWithRrpInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        airnodeProtocol(overrides?: CallOverrides): Promise<[string]>;
        containsBytecode(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        fulfillRrpBeaconUpdate(requestId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getBalance(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getBlockBasefee(overrides?: CallOverrides): Promise<[BigNumber]>;
        getBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;
        getBlockTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;
        getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        requestRelayedRrpBeaconUpdateWithEndpoint(airnode: PromiseOrValue<string>, endpointId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        requestRelayedRrpBeaconUpdateWithTemplate(airnode: PromiseOrValue<string>, templateId: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        requestRrpBeaconUpdateWithEndpoint(airnode: PromiseOrValue<string>, endpointId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, sponsor: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        requestRrpBeaconUpdateWithTemplate(airnode: PromiseOrValue<string>, templateId: PromiseOrValue<BytesLike>, sponsor: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setRrpBeaconUpdatePermissionStatus(rrpBeaconUpdateRequester: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sponsorToRrpBeaconUpdateRequesterToPermissionStatus(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateBeaconSetWithBeacons(beaconIds: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    airnodeProtocol(overrides?: CallOverrides): Promise<string>;
    containsBytecode(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    fulfillRrpBeaconUpdate(requestId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getBalance(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    getBlockBasefee(overrides?: CallOverrides): Promise<BigNumber>;
    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;
    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;
    getChainId(overrides?: CallOverrides): Promise<BigNumber>;
    multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    requestRelayedRrpBeaconUpdateWithEndpoint(airnode: PromiseOrValue<string>, endpointId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    requestRelayedRrpBeaconUpdateWithTemplate(airnode: PromiseOrValue<string>, templateId: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    requestRrpBeaconUpdateWithEndpoint(airnode: PromiseOrValue<string>, endpointId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, sponsor: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    requestRrpBeaconUpdateWithTemplate(airnode: PromiseOrValue<string>, templateId: PromiseOrValue<BytesLike>, sponsor: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setRrpBeaconUpdatePermissionStatus(rrpBeaconUpdateRequester: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sponsorToRrpBeaconUpdateRequesterToPermissionStatus(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateBeaconSetWithBeacons(beaconIds: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        airnodeProtocol(overrides?: CallOverrides): Promise<string>;
        containsBytecode(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        fulfillRrpBeaconUpdate(requestId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        getBalance(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getBlockBasefee(overrides?: CallOverrides): Promise<BigNumber>;
        getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;
        getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;
        getChainId(overrides?: CallOverrides): Promise<BigNumber>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string[]>;
        requestRelayedRrpBeaconUpdateWithEndpoint(airnode: PromiseOrValue<string>, endpointId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        requestRelayedRrpBeaconUpdateWithTemplate(airnode: PromiseOrValue<string>, templateId: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        requestRrpBeaconUpdateWithEndpoint(airnode: PromiseOrValue<string>, endpointId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, sponsor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        requestRrpBeaconUpdateWithTemplate(airnode: PromiseOrValue<string>, templateId: PromiseOrValue<BytesLike>, sponsor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        setRrpBeaconUpdatePermissionStatus(rrpBeaconUpdateRequester: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        sponsorToRrpBeaconUpdateRequesterToPermissionStatus(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[
            boolean[],
            string[]
        ] & {
            successes: boolean[];
            returndata: string[];
        }>;
        updateBeaconSetWithBeacons(beaconIds: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "RequestedRelayedRrpBeaconUpdate(bytes32,address,bytes32,address,address,bytes32,address)"(beaconId?: PromiseOrValue<BytesLike> | null, airnode?: null, templateId?: null, relayer?: null, sponsor?: null, requestId?: null, requester?: null): RequestedRelayedRrpBeaconUpdateEventFilter;
        RequestedRelayedRrpBeaconUpdate(beaconId?: PromiseOrValue<BytesLike> | null, airnode?: null, templateId?: null, relayer?: null, sponsor?: null, requestId?: null, requester?: null): RequestedRelayedRrpBeaconUpdateEventFilter;
        "RequestedRrpBeaconUpdate(bytes32,address,bytes32,address,bytes32,address)"(beaconId?: PromiseOrValue<BytesLike> | null, airnode?: null, templateId?: null, sponsor?: null, requestId?: null, requester?: null): RequestedRrpBeaconUpdateEventFilter;
        RequestedRrpBeaconUpdate(beaconId?: PromiseOrValue<BytesLike> | null, airnode?: null, templateId?: null, sponsor?: null, requestId?: null, requester?: null): RequestedRrpBeaconUpdateEventFilter;
        "SetRrpBeaconUpdatePermissionStatus(address,address,bool)"(sponsor?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, status?: null): SetRrpBeaconUpdatePermissionStatusEventFilter;
        SetRrpBeaconUpdatePermissionStatus(sponsor?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, status?: null): SetRrpBeaconUpdatePermissionStatusEventFilter;
        "UpdatedBeaconSetWithBeacons(bytes32,int224,uint32)"(beaconSetId?: PromiseOrValue<BytesLike> | null, value?: null, timestamp?: null): UpdatedBeaconSetWithBeaconsEventFilter;
        UpdatedBeaconSetWithBeacons(beaconSetId?: PromiseOrValue<BytesLike> | null, value?: null, timestamp?: null): UpdatedBeaconSetWithBeaconsEventFilter;
        "UpdatedBeaconWithRrp(bytes32,bytes32,int224,uint32)"(beaconId?: PromiseOrValue<BytesLike> | null, requestId?: null, value?: null, timestamp?: null): UpdatedBeaconWithRrpEventFilter;
        UpdatedBeaconWithRrp(beaconId?: PromiseOrValue<BytesLike> | null, requestId?: null, value?: null, timestamp?: null): UpdatedBeaconWithRrpEventFilter;
        "UpdatedBeaconWithSignedData(bytes32,int224,uint32)"(beaconId?: PromiseOrValue<BytesLike> | null, value?: null, timestamp?: null): UpdatedBeaconWithSignedDataEventFilter;
        UpdatedBeaconWithSignedData(beaconId?: PromiseOrValue<BytesLike> | null, value?: null, timestamp?: null): UpdatedBeaconWithSignedDataEventFilter;
    };
    estimateGas: {
        airnodeProtocol(overrides?: CallOverrides): Promise<BigNumber>;
        containsBytecode(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        fulfillRrpBeaconUpdate(requestId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getBalance(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getBlockBasefee(overrides?: CallOverrides): Promise<BigNumber>;
        getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;
        getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;
        getChainId(overrides?: CallOverrides): Promise<BigNumber>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        requestRelayedRrpBeaconUpdateWithEndpoint(airnode: PromiseOrValue<string>, endpointId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        requestRelayedRrpBeaconUpdateWithTemplate(airnode: PromiseOrValue<string>, templateId: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        requestRrpBeaconUpdateWithEndpoint(airnode: PromiseOrValue<string>, endpointId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, sponsor: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        requestRrpBeaconUpdateWithTemplate(airnode: PromiseOrValue<string>, templateId: PromiseOrValue<BytesLike>, sponsor: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setRrpBeaconUpdatePermissionStatus(rrpBeaconUpdateRequester: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sponsorToRrpBeaconUpdateRequesterToPermissionStatus(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateBeaconSetWithBeacons(beaconIds: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        airnodeProtocol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        containsBytecode(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        fulfillRrpBeaconUpdate(requestId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getBalance(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getBlockBasefee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getBlockTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        requestRelayedRrpBeaconUpdateWithEndpoint(airnode: PromiseOrValue<string>, endpointId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        requestRelayedRrpBeaconUpdateWithTemplate(airnode: PromiseOrValue<string>, templateId: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        requestRrpBeaconUpdateWithEndpoint(airnode: PromiseOrValue<string>, endpointId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, sponsor: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        requestRrpBeaconUpdateWithTemplate(airnode: PromiseOrValue<string>, templateId: PromiseOrValue<BytesLike>, sponsor: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setRrpBeaconUpdatePermissionStatus(rrpBeaconUpdateRequester: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sponsorToRrpBeaconUpdateRequesterToPermissionStatus(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateBeaconSetWithBeacons(beaconIds: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
