import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { ISponsorshipUtils, ISponsorshipUtilsInterface } from "../../../protocol/interfaces/ISponsorshipUtils";
export declare class ISponsorshipUtils__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sponsor";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "subscriptionId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "status";
            readonly type: "bool";
        }];
        readonly name: "SetPspSponsorshipStatus";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sponsor";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "requester";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "status";
            readonly type: "bool";
        }];
        readonly name: "SetRrpSponsorshipStatus";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "subscriptionId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bool";
            readonly name: "status";
            readonly type: "bool";
        }];
        readonly name: "setPspSponsorshipStatus";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "requester";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "status";
            readonly type: "bool";
        }];
        readonly name: "setRrpSponsorshipStatus";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sponsor";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "requester";
            readonly type: "address";
        }];
        readonly name: "sponsorToRequesterToRrpSponsorshipStatus";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "status";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sponsor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "subscriptionId";
            readonly type: "bytes32";
        }];
        readonly name: "sponsorToSubscriptionIdToPspSponsorshipStatus";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "status";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ISponsorshipUtilsInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ISponsorshipUtils;
}
