import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { MockSponsor, MockSponsorInterface } from "../../../protocol/mock/MockSponsor";
type MockSponsorConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MockSponsor__factory extends ContractFactory {
    constructor(...args: MockSponsorConstructorParams);
    deploy(_airnodeProtocol: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<MockSponsor>;
    getDeployTransaction(_airnodeProtocol: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): MockSponsor;
    connect(signer: Signer): MockSponsor__factory;
    static readonly bytecode = "0x60a060405234801561001057600080fd5b5060405161034f38038061034f83398101604081905261002f9161009c565b806001600160a01b03811661008a5760405162461bcd60e51b815260206004820152601c60248201527f4169726e6f646550726f746f636f6c2061646472657373207a65726f00000000604482015260640160405180910390fd5b6001600160a01b0316608052506100cc565b6000602082840312156100ae57600080fd5b81516001600160a01b03811681146100c557600080fd5b9392505050565b60805161025c6100f36000396000818160550152818160b50152610181015261025c6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806330509bca14610046578063b76f3c1514610050578063da95ebf7146100a0575b600080fd5b61004e6100b3565b005b6100777f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61004e6100ae3660046101e1565b610135565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166330509bca6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561011b57600080fd5b505af115801561012f573d6000803e3d6000fd5b50505050565b6040517fda95ebf700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063da95ebf790604401600060405180830381600087803b1580156101c557600080fd5b505af11580156101d9573d6000803e3d6000fd5b505050505050565b600080604083850312156101f457600080fd5b823573ffffffffffffffffffffffffffffffffffffffff8116811461021857600080fd5b94602093909301359350505056fea2646970667358221220570d590548a4624941e026c55c346e3142bfd51fd8153bd67208397bdf03085364736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_airnodeProtocol";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "airnodeProtocol";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "claimBalance";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "airnodeOrRelayer";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "protocolId";
            readonly type: "uint256";
        }];
        readonly name: "requestWithdrawal";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): MockSponsorInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MockSponsor;
}
export {};
