import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IStorageUtils, IStorageUtilsInterface } from "../../../protocol/interfaces/IStorageUtils";
export declare class IStorageUtils__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "subscriptionId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "chainId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "airnode";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "endpointOrTemplateId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "parameters";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "conditions";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "relayer";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sponsor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "requester";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes4";
            readonly name: "fulfillFunctionId";
            readonly type: "bytes4";
        }];
        readonly name: "StoredSubscription";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "templateId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "endpointId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "parameters";
            readonly type: "bytes";
        }];
        readonly name: "StoredTemplate";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "MAXIMUM_PARAMETER_LENGTH";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "chainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "airnode";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "endpointOrTemplateId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "parameters";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "conditions";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "relayer";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "sponsor";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "requester";
            readonly type: "address";
        }, {
            readonly internalType: "bytes4";
            readonly name: "fulfillFunctionId";
            readonly type: "bytes4";
        }];
        readonly name: "storeSubscription";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "subscriptionId";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "endpointId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "parameters";
            readonly type: "bytes";
        }];
        readonly name: "storeTemplate";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "templateId";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "subscriptionId";
            readonly type: "bytes32";
        }];
        readonly name: "subscriptions";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "chainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "airnode";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "endpointOrTemplateId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "parameters";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "conditions";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "relayer";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "sponsor";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "requester";
            readonly type: "address";
        }, {
            readonly internalType: "bytes4";
            readonly name: "fulfillFunctionId";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "templateId";
            readonly type: "bytes32";
        }];
        readonly name: "templates";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "endpointId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "parameters";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IStorageUtilsInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IStorageUtils;
}
