"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IAllocatorWithManager__factory = void 0;
var ethers_1 = require("ethers");
var _abi = [
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "airnode",
                type: "address",
            },
            {
                indexed: true,
                internalType: "uint256",
                name: "slotIndex",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "address",
                name: "sender",
                type: "address",
            },
        ],
        name: "ResetSlot",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "airnode",
                type: "address",
            },
            {
                indexed: true,
                internalType: "uint256",
                name: "slotIndex",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "bytes32",
                name: "subscriptionId",
                type: "bytes32",
            },
            {
                indexed: false,
                internalType: "uint32",
                name: "expirationTimestamp",
                type: "uint32",
            },
            {
                indexed: false,
                internalType: "address",
                name: "sender",
                type: "address",
            },
        ],
        name: "SetSlot",
        type: "event",
    },
    {
        inputs: [],
        name: "SLOT_SETTER_ROLE_DESCRIPTION",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "accessControlRegistry",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "adminRole",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "adminRoleDescription",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "airnode",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "slotIndex",
                type: "uint256",
            },
        ],
        name: "airnodeToSlotIndexToSlot",
        outputs: [
            {
                internalType: "bytes32",
                name: "subscriptionId",
                type: "bytes32",
            },
            {
                internalType: "address",
                name: "setter",
                type: "address",
            },
            {
                internalType: "uint32",
                name: "expirationTimestamp",
                type: "uint32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "account",
                type: "address",
            },
        ],
        name: "hasSlotSetterRoleOrIsManager",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "manager",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes[]",
                name: "data",
                type: "bytes[]",
            },
        ],
        name: "multicall",
        outputs: [
            {
                internalType: "bytes[]",
                name: "returndata",
                type: "bytes[]",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "airnode",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "slotIndex",
                type: "uint256",
            },
        ],
        name: "resetSlot",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "airnode",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "slotIndex",
                type: "uint256",
            },
            {
                internalType: "bytes32",
                name: "subscriptionId",
                type: "bytes32",
            },
            {
                internalType: "uint32",
                name: "expirationTimestamp",
                type: "uint32",
            },
        ],
        name: "setSlot",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "airnode",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "slotIndex",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "account",
                type: "address",
            },
        ],
        name: "slotCanBeResetByAccount",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "slotSetterRole",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes[]",
                name: "data",
                type: "bytes[]",
            },
        ],
        name: "tryMulticall",
        outputs: [
            {
                internalType: "bool[]",
                name: "successes",
                type: "bool[]",
            },
            {
                internalType: "bytes[]",
                name: "returndata",
                type: "bytes[]",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
];
var IAllocatorWithManager__factory = /** @class */ (function () {
    function IAllocatorWithManager__factory() {
    }
    IAllocatorWithManager__factory.createInterface = function () {
        return new ethers_1.utils.Interface(_abi);
    };
    IAllocatorWithManager__factory.connect = function (address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    };
    IAllocatorWithManager__factory.abi = _abi;
    return IAllocatorWithManager__factory;
}());
exports.IAllocatorWithManager__factory = IAllocatorWithManager__factory;
//# sourceMappingURL=IAllocatorWithManager__factory.js.map