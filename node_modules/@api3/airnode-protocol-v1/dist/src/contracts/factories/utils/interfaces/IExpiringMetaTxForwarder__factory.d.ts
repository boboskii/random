import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IExpiringMetaTxForwarder, IExpiringMetaTxForwarderInterface } from "../../../utils/interfaces/IExpiringMetaTxForwarder";
export declare class IExpiringMetaTxForwarder__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "metaTxHash";
            readonly type: "bytes32";
        }];
        readonly name: "CanceledMetaTx";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "metaTxHash";
            readonly type: "bytes32";
        }];
        readonly name: "ExecutedMetaTx";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "from";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "to";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "expirationTimestamp";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IExpiringMetaTxForwarder.ExpiringMetaTx";
            readonly name: "metaTx";
            readonly type: "tuple";
        }];
        readonly name: "cancel";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "from";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "to";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "expirationTimestamp";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IExpiringMetaTxForwarder.ExpiringMetaTx";
            readonly name: "metaTx";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "signature";
            readonly type: "bytes";
        }];
        readonly name: "execute";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "returndata";
            readonly type: "bytes";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "metaTxHash";
            readonly type: "bytes32";
        }];
        readonly name: "metaTxWithHashIsExecutedOrCanceled";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IExpiringMetaTxForwarderInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IExpiringMetaTxForwarder;
}
