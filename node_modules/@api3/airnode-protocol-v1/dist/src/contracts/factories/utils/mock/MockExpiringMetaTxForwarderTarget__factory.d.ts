import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { MockExpiringMetaTxForwarderTarget, MockExpiringMetaTxForwarderTargetInterface } from "../../../utils/mock/MockExpiringMetaTxForwarderTarget";
type MockExpiringMetaTxForwarderTargetConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MockExpiringMetaTxForwarderTarget__factory extends ContractFactory {
    constructor(...args: MockExpiringMetaTxForwarderTargetConstructorParams);
    deploy(_trustedForwarder: PromiseOrValue<string>, _owner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<MockExpiringMetaTxForwarderTarget>;
    getDeployTransaction(_trustedForwarder: PromiseOrValue<string>, _owner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): MockExpiringMetaTxForwarderTarget;
    connect(signer: Signer): MockExpiringMetaTxForwarderTarget__factory;
    static readonly bytecode = "0x60a0604052600060015534801561001557600080fd5b5060405161053f38038061053f8339810160408190526100349161011e565b6001600160a01b03821660805261005161004c610061565b61007a565b61005a8161007a565b5050610151565b60006100756100ca60201b6101ef1760201c565b905090565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6080516000906001600160a01b031633036100ec575060131936013560601c90565b6100756100fe60201b6102381760201c565b3390565b80516001600160a01b038116811461011957600080fd5b919050565b6000806040838503121561013157600080fd5b61013a83610102565b915061014860208401610102565b90509250929050565b6080516103cd61017260003960008181608701526101f301526103cd6000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063715018a611610050578063715018a6146100eb5780638da5cb5b146100f5578063f2fde38b1461011057600080fd5b8063572b6c05146100775780635b34b966146100cc57806361bc221a146100e2575b600080fd5b6100b7610085366004610327565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b60405190151581526020015b60405180910390f35b6100d4610123565b6040519081526020016100c3565b6100d460015481565b6100f3610146565b005b6000546040516001600160a01b0390911681526020016100c3565b6100f361011e366004610327565b61015a565b600061012d61023c565b60016000815461013c90610357565b9182905550905090565b61014e61023c565b61015860006102b5565b565b61016261023c565b6001600160a01b0381166101e35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6101ec816102b5565b50565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361022e575060131936013560601c90565b503390565b905090565b3390565b61024461031d565b6001600160a01b031661025f6000546001600160a01b031690565b6001600160a01b0316146101585760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101da565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006102336101ef565b60006020828403121561033957600080fd5b81356001600160a01b038116811461035057600080fd5b9392505050565b600060018201610390577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea26469706673582212200d4f47c85954bc2712cf9ee4235c183b028e4148cbd5ba25792e4cc78ed21f3c64736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_trustedForwarder";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_owner";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "counter";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "incrementCounter";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "forwarder";
            readonly type: "address";
        }];
        readonly name: "isTrustedForwarder";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): MockExpiringMetaTxForwarderTargetInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MockExpiringMetaTxForwarderTarget;
}
export {};
