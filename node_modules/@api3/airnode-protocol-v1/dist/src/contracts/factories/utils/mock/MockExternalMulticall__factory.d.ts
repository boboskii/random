import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { MockExternalMulticall, MockExternalMulticallInterface } from "../../../utils/mock/MockExternalMulticall";
type MockExternalMulticallConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MockExternalMulticall__factory extends ContractFactory {
    constructor(...args: MockExternalMulticallConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<MockExternalMulticall>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): MockExternalMulticall;
    connect(signer: Signer): MockExternalMulticall__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610a638061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80638615027911610050578063861502791461009f5780638da5cb5b146100c0578063f2fde38b146100db57600080fd5b806341b3b45a1461006c578063715018a614610095575b600080fd5b61007f61007a36600461081a565b6100ee565b60405161008c919061090e565b60405180910390f35b61009d610105565b005b6100b26100ad36600461081a565b610119565b60405161008c929190610928565b6000546040516001600160a01b03909116815260200161008c565b61009d6100e9366004610981565b610135565b60606100fc858585856101ca565b95945050505050565b61010d61044d565b61011760006104a7565b565b6060806101288686868661050f565b9150915094509492505050565b61013d61044d565b6001600160a01b0381166101be5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6101c7816104a7565b50565b60608382811461021c5760405162461bcd60e51b815260206004820152601960248201527f506172616d65746572206c656e677468206d69736d617463680000000000000060448201526064016101b5565b8067ffffffffffffffff811115610235576102356109aa565b60405190808252806020026020018201604052801561026857816020015b60608152602001906001900390816102535790505b50915060005b8181101561044357600087878381811061028a5761028a6109c0565b905060200201602081019061029f9190610981565b6001600160a01b03163b116102f65760405162461bcd60e51b815260206004820152601d60248201527f4d756c746963616c6c20746172676574206e6f7420636f6e747261637400000060448201526064016101b5565b600087878381811061030a5761030a6109c0565b905060200201602081019061031f9190610981565b6001600160a01b031686868481811061033a5761033a6109c0565b905060200281019061034c91906109d6565b60405161035a929190610a1d565b6000604051808303816000865af19150503d8060008114610397576040519150601f19603f3d011682016040523d82523d6000602084013e61039c565b606091505b508584815181106103af576103af6109c0565b602090810291909101015290508061043a5760008483815181106103d5576103d56109c0565b602002602001015190506000815111156103f25780518082602001fd5b60405162461bcd60e51b815260206004820152601b60248201527f4d756c746963616c6c3a204e6f2072657665727420737472696e67000000000060448201526064016101b5565b5060010161026e565b5050949350505050565b6000546001600160a01b031633146101175760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101b5565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606080848381146105625760405162461bcd60e51b815260206004820152601960248201527f506172616d65746572206c656e677468206d69736d617463680000000000000060448201526064016101b5565b8067ffffffffffffffff81111561057b5761057b6109aa565b6040519080825280602002602001820160405280156105a4578160200160208202803683370190505b5092508067ffffffffffffffff8111156105c0576105c06109aa565b6040519080825280602002602001820160405280156105f357816020015b60608152602001906001900390816105de5790505b50915060005b818110156107c3576000888883818110610615576106156109c0565b905060200201602081019061062a9190610981565b6001600160a01b03163b11156107235787878281811061064c5761064c6109c0565b90506020020160208101906106619190610981565b6001600160a01b031686868381811061067c5761067c6109c0565b905060200281019061068e91906109d6565b60405161069c929190610a1d565b6000604051808303816000865af19150503d80600081146106d9576040519150601f19603f3d011682016040523d82523d6000602084013e6106de565b606091505b508583815181106106f1576106f16109c0565b6020026020010185848151811061070a5761070a6109c0565b60200260200101829052821515151581525050506107bb565b60405160206024820152601d60448201527f4d756c746963616c6c20746172676574206e6f7420636f6e7472616374000000606482015260840160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1662461bcd60e51b17905283518490839081106107af576107af6109c0565b60200260200101819052505b6001016105f9565b505094509492505050565b60008083601f8401126107e057600080fd5b50813567ffffffffffffffff8111156107f857600080fd5b6020830191508360208260051b850101111561081357600080fd5b9250929050565b6000806000806040858703121561083057600080fd5b843567ffffffffffffffff8082111561084857600080fd5b610854888389016107ce565b9096509450602087013591508082111561086d57600080fd5b5061087a878288016107ce565b95989497509550505050565b600082825180855260208086019550808260051b8401018186016000805b8581101561090057601f1980888603018b5283518051808752845b818110156108da578281018901518882018a015288016108bf565b5086810188018590529b87019b601f0190911690940185019350918401916001016108a4565b509198975050505050505050565b6020815260006109216020830184610886565b9392505050565b604080825283519082018190526000906020906060840190828701845b82811015610963578151151584529284019290840190600101610945565b505050838103828501526109778186610886565b9695505050505050565b60006020828403121561099357600080fd5b81356001600160a01b038116811461092157600080fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126109ed57600080fd5b83018035915067ffffffffffffffff821115610a0857600080fd5b60200191503681900382131561081357600080fd5b818382376000910190815291905056fea2646970667358221220721e7327f1f5acc04d65087966d5d8dc3bc1f9938ea345b8aa6593fd414d4bd264736f6c63430008110033";
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "targets";
            readonly type: "address[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "data";
            readonly type: "bytes[]";
        }];
        readonly name: "externalMulticall";
        readonly outputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "returndata";
            readonly type: "bytes[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "targets";
            readonly type: "address[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "data";
            readonly type: "bytes[]";
        }];
        readonly name: "tryExternalMulticall";
        readonly outputs: readonly [{
            readonly internalType: "bool[]";
            readonly name: "successes";
            readonly type: "bool[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "returndata";
            readonly type: "bytes[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): MockExternalMulticallInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MockExternalMulticall;
}
export {};
