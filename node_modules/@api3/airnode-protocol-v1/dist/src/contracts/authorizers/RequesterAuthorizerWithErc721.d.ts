import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";
export interface RequesterAuthorizerWithErc721Interface extends utils.Interface {
    functions: {
        "DEPOSITOR_FREEZER_ROLE_DESCRIPTION()": FunctionFragment;
        "REQUESTER_BLOCKER_ROLE_DESCRIPTION()": FunctionFragment;
        "WITHDRAWAL_LEAD_TIME_SETTER_ROLE_DESCRIPTION()": FunctionFragment;
        "accessControlRegistry()": FunctionFragment;
        "adminRoleDescription()": FunctionFragment;
        "airnodeToChainIdToRequesterToBlockStatus(address,uint256,address)": FunctionFragment;
        "airnodeToChainIdToRequesterToTokenAddressToTokenDeposits(address,uint256,address,address)": FunctionFragment;
        "airnodeToChainIdToRequesterToTokenToDepositorToDeposit(address,uint256,address,address,address)": FunctionFragment;
        "airnodeToDepositorToFreezeStatus(address,address)": FunctionFragment;
        "airnodeToWithdrawalLeadTime(address)": FunctionFragment;
        "deriveDepositorFreezerRole(address)": FunctionFragment;
        "deriveRequesterBlockerRole(address)": FunctionFragment;
        "deriveWithdrawalLeadTimeSetterRole(address)": FunctionFragment;
        "initiateTokenWithdrawal(address,uint256,address,address)": FunctionFragment;
        "isAuthorized(address,uint256,address,address)": FunctionFragment;
        "isTrustedForwarder(address)": FunctionFragment;
        "multicall(bytes[])": FunctionFragment;
        "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
        "revokeToken(address,uint256,address,address,address)": FunctionFragment;
        "setDepositorFreezeStatus(address,address,bool)": FunctionFragment;
        "setRequesterBlockStatus(address,uint256,address,bool)": FunctionFragment;
        "setWithdrawalLeadTime(address,uint32)": FunctionFragment;
        "tryMulticall(bytes[])": FunctionFragment;
        "updateDepositRequester(address,uint256,address,uint256,address,address)": FunctionFragment;
        "withdrawToken(address,uint256,address,address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "DEPOSITOR_FREEZER_ROLE_DESCRIPTION" | "REQUESTER_BLOCKER_ROLE_DESCRIPTION" | "WITHDRAWAL_LEAD_TIME_SETTER_ROLE_DESCRIPTION" | "accessControlRegistry" | "adminRoleDescription" | "airnodeToChainIdToRequesterToBlockStatus" | "airnodeToChainIdToRequesterToTokenAddressToTokenDeposits" | "airnodeToChainIdToRequesterToTokenToDepositorToDeposit" | "airnodeToDepositorToFreezeStatus" | "airnodeToWithdrawalLeadTime" | "deriveDepositorFreezerRole" | "deriveRequesterBlockerRole" | "deriveWithdrawalLeadTimeSetterRole" | "initiateTokenWithdrawal" | "isAuthorized" | "isTrustedForwarder" | "multicall" | "onERC721Received" | "revokeToken" | "setDepositorFreezeStatus" | "setRequesterBlockStatus" | "setWithdrawalLeadTime" | "tryMulticall" | "updateDepositRequester" | "withdrawToken"): FunctionFragment;
    encodeFunctionData(functionFragment: "DEPOSITOR_FREEZER_ROLE_DESCRIPTION", values?: undefined): string;
    encodeFunctionData(functionFragment: "REQUESTER_BLOCKER_ROLE_DESCRIPTION", values?: undefined): string;
    encodeFunctionData(functionFragment: "WITHDRAWAL_LEAD_TIME_SETTER_ROLE_DESCRIPTION", values?: undefined): string;
    encodeFunctionData(functionFragment: "accessControlRegistry", values?: undefined): string;
    encodeFunctionData(functionFragment: "adminRoleDescription", values?: undefined): string;
    encodeFunctionData(functionFragment: "airnodeToChainIdToRequesterToBlockStatus", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "airnodeToChainIdToRequesterToTokenAddressToTokenDeposits", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "airnodeToChainIdToRequesterToTokenToDepositorToDeposit", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "airnodeToDepositorToFreezeStatus", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "airnodeToWithdrawalLeadTime", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "deriveDepositorFreezerRole", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "deriveRequesterBlockerRole", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "deriveWithdrawalLeadTimeSetterRole", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "initiateTokenWithdrawal", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "isAuthorized", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "isTrustedForwarder", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "multicall", values: [PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "onERC721Received", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "revokeToken", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "setDepositorFreezeStatus", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "setRequesterBlockStatus", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "setWithdrawalLeadTime", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "tryMulticall", values: [PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "updateDepositRequester", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "withdrawToken", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    decodeFunctionResult(functionFragment: "DEPOSITOR_FREEZER_ROLE_DESCRIPTION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "REQUESTER_BLOCKER_ROLE_DESCRIPTION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "WITHDRAWAL_LEAD_TIME_SETTER_ROLE_DESCRIPTION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "accessControlRegistry", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "adminRoleDescription", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "airnodeToChainIdToRequesterToBlockStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "airnodeToChainIdToRequesterToTokenAddressToTokenDeposits", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "airnodeToChainIdToRequesterToTokenToDepositorToDeposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "airnodeToDepositorToFreezeStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "airnodeToWithdrawalLeadTime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deriveDepositorFreezerRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deriveRequesterBlockerRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deriveWithdrawalLeadTimeSetterRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initiateTokenWithdrawal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAuthorized", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isTrustedForwarder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC721Received", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDepositorFreezeStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRequesterBlockStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWithdrawalLeadTime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tryMulticall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateDepositRequester", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawToken", data: BytesLike): Result;
    events: {
        "DepositedToken(address,address,address,uint256,address,uint256,uint256)": EventFragment;
        "InitiatedTokenWithdrawal(address,address,address,uint256,address,uint256,uint32,uint256)": EventFragment;
        "RevokedToken(address,address,address,uint256,address,uint256,uint256)": EventFragment;
        "SetDepositorFreezeStatus(address,address,bool,address)": EventFragment;
        "SetRequesterBlockStatus(address,address,uint256,bool,address)": EventFragment;
        "SetWithdrawalLeadTime(address,uint32,address)": EventFragment;
        "UpdatedDepositRequesterFrom(address,address,address,uint256,address,uint256,uint256)": EventFragment;
        "UpdatedDepositRequesterTo(address,address,address,uint256,address,uint256,uint256)": EventFragment;
        "WithdrewToken(address,address,address,uint256,address,uint256,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DepositedToken"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "InitiatedTokenWithdrawal"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RevokedToken"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetDepositorFreezeStatus"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetRequesterBlockStatus"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWithdrawalLeadTime"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatedDepositRequesterFrom"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatedDepositRequesterTo"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "WithdrewToken"): EventFragment;
}
export interface DepositedTokenEventObject {
    airnode: string;
    requester: string;
    depositor: string;
    chainId: BigNumber;
    token: string;
    tokenId: BigNumber;
    tokenDepositCount: BigNumber;
}
export type DepositedTokenEvent = TypedEvent<[
    string,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber
], DepositedTokenEventObject>;
export type DepositedTokenEventFilter = TypedEventFilter<DepositedTokenEvent>;
export interface InitiatedTokenWithdrawalEventObject {
    airnode: string;
    requester: string;
    depositor: string;
    chainId: BigNumber;
    token: string;
    tokenId: BigNumber;
    earliestWithdrawalTime: number;
    tokenDepositCount: BigNumber;
}
export type InitiatedTokenWithdrawalEvent = TypedEvent<[
    string,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    number,
    BigNumber
], InitiatedTokenWithdrawalEventObject>;
export type InitiatedTokenWithdrawalEventFilter = TypedEventFilter<InitiatedTokenWithdrawalEvent>;
export interface RevokedTokenEventObject {
    airnode: string;
    requester: string;
    depositor: string;
    chainId: BigNumber;
    token: string;
    tokenId: BigNumber;
    tokenDepositCount: BigNumber;
}
export type RevokedTokenEvent = TypedEvent<[
    string,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber
], RevokedTokenEventObject>;
export type RevokedTokenEventFilter = TypedEventFilter<RevokedTokenEvent>;
export interface SetDepositorFreezeStatusEventObject {
    airnode: string;
    depositor: string;
    status: boolean;
    sender: string;
}
export type SetDepositorFreezeStatusEvent = TypedEvent<[
    string,
    string,
    boolean,
    string
], SetDepositorFreezeStatusEventObject>;
export type SetDepositorFreezeStatusEventFilter = TypedEventFilter<SetDepositorFreezeStatusEvent>;
export interface SetRequesterBlockStatusEventObject {
    airnode: string;
    requester: string;
    chainId: BigNumber;
    status: boolean;
    sender: string;
}
export type SetRequesterBlockStatusEvent = TypedEvent<[
    string,
    string,
    BigNumber,
    boolean,
    string
], SetRequesterBlockStatusEventObject>;
export type SetRequesterBlockStatusEventFilter = TypedEventFilter<SetRequesterBlockStatusEvent>;
export interface SetWithdrawalLeadTimeEventObject {
    airnode: string;
    withdrawalLeadTime: number;
    sender: string;
}
export type SetWithdrawalLeadTimeEvent = TypedEvent<[
    string,
    number,
    string
], SetWithdrawalLeadTimeEventObject>;
export type SetWithdrawalLeadTimeEventFilter = TypedEventFilter<SetWithdrawalLeadTimeEvent>;
export interface UpdatedDepositRequesterFromEventObject {
    airnode: string;
    requester: string;
    depositor: string;
    chainId: BigNumber;
    token: string;
    tokenId: BigNumber;
    tokenDepositCount: BigNumber;
}
export type UpdatedDepositRequesterFromEvent = TypedEvent<[
    string,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber
], UpdatedDepositRequesterFromEventObject>;
export type UpdatedDepositRequesterFromEventFilter = TypedEventFilter<UpdatedDepositRequesterFromEvent>;
export interface UpdatedDepositRequesterToEventObject {
    airnode: string;
    requester: string;
    depositor: string;
    chainId: BigNumber;
    token: string;
    tokenId: BigNumber;
    tokenDepositCount: BigNumber;
}
export type UpdatedDepositRequesterToEvent = TypedEvent<[
    string,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber
], UpdatedDepositRequesterToEventObject>;
export type UpdatedDepositRequesterToEventFilter = TypedEventFilter<UpdatedDepositRequesterToEvent>;
export interface WithdrewTokenEventObject {
    airnode: string;
    requester: string;
    depositor: string;
    chainId: BigNumber;
    token: string;
    tokenId: BigNumber;
    tokenDepositCount: BigNumber;
}
export type WithdrewTokenEvent = TypedEvent<[
    string,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber
], WithdrewTokenEventObject>;
export type WithdrewTokenEventFilter = TypedEventFilter<WithdrewTokenEvent>;
export interface RequesterAuthorizerWithErc721 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: RequesterAuthorizerWithErc721Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        DEPOSITOR_FREEZER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<[string]>;
        REQUESTER_BLOCKER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<[string]>;
        WITHDRAWAL_LEAD_TIME_SETTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<[string]>;
        accessControlRegistry(overrides?: CallOverrides): Promise<[string]>;
        adminRoleDescription(overrides?: CallOverrides): Promise<[string]>;
        airnodeToChainIdToRequesterToBlockStatus(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        airnodeToChainIdToRequesterToTokenAddressToTokenDeposits(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<string>, arg3: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber] & {
            count: BigNumber;
        }>;
        airnodeToChainIdToRequesterToTokenToDepositorToDeposit(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, token: PromiseOrValue<string>, depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number,
            number
        ] & {
            tokenId: BigNumber;
            withdrawalLeadTime: number;
            earliestWithdrawalTime: number;
            state: number;
        }>;
        airnodeToDepositorToFreezeStatus(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        airnodeToWithdrawalLeadTime(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[number]>;
        deriveDepositorFreezerRole(airnode: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string] & {
            depositorFreezerRole: string;
        }>;
        deriveRequesterBlockerRole(airnode: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string] & {
            requesterBlockerRole: string;
        }>;
        deriveWithdrawalLeadTimeSetterRole(airnode: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string] & {
            withdrawalLeadTimeSetterRole: string;
        }>;
        initiateTokenWithdrawal(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, token: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        isAuthorized(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        onERC721Received(arg0: PromiseOrValue<string>, _from: PromiseOrValue<string>, _tokenId: PromiseOrValue<BigNumberish>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        revokeToken(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, token: PromiseOrValue<string>, depositor: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDepositorFreezeStatus(airnode: PromiseOrValue<string>, depositor: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setRequesterBlockStatus(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setWithdrawalLeadTime(airnode: PromiseOrValue<string>, withdrawalLeadTime: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateDepositRequester(airnode: PromiseOrValue<string>, chainIdPrevious: PromiseOrValue<BigNumberish>, requesterPrevious: PromiseOrValue<string>, chainIdNext: PromiseOrValue<BigNumberish>, requesterNext: PromiseOrValue<string>, token: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawToken(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, token: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    DEPOSITOR_FREEZER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
    REQUESTER_BLOCKER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
    WITHDRAWAL_LEAD_TIME_SETTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
    accessControlRegistry(overrides?: CallOverrides): Promise<string>;
    adminRoleDescription(overrides?: CallOverrides): Promise<string>;
    airnodeToChainIdToRequesterToBlockStatus(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    airnodeToChainIdToRequesterToTokenAddressToTokenDeposits(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<string>, arg3: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    airnodeToChainIdToRequesterToTokenToDepositorToDeposit(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, token: PromiseOrValue<string>, depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        number,
        number
    ] & {
        tokenId: BigNumber;
        withdrawalLeadTime: number;
        earliestWithdrawalTime: number;
        state: number;
    }>;
    airnodeToDepositorToFreezeStatus(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    airnodeToWithdrawalLeadTime(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>;
    deriveDepositorFreezerRole(airnode: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    deriveRequesterBlockerRole(airnode: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    deriveWithdrawalLeadTimeSetterRole(airnode: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    initiateTokenWithdrawal(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, token: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    isAuthorized(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    onERC721Received(arg0: PromiseOrValue<string>, _from: PromiseOrValue<string>, _tokenId: PromiseOrValue<BigNumberish>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    revokeToken(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, token: PromiseOrValue<string>, depositor: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDepositorFreezeStatus(airnode: PromiseOrValue<string>, depositor: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setRequesterBlockStatus(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setWithdrawalLeadTime(airnode: PromiseOrValue<string>, withdrawalLeadTime: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateDepositRequester(airnode: PromiseOrValue<string>, chainIdPrevious: PromiseOrValue<BigNumberish>, requesterPrevious: PromiseOrValue<string>, chainIdNext: PromiseOrValue<BigNumberish>, requesterNext: PromiseOrValue<string>, token: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawToken(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, token: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        DEPOSITOR_FREEZER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
        REQUESTER_BLOCKER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
        WITHDRAWAL_LEAD_TIME_SETTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
        accessControlRegistry(overrides?: CallOverrides): Promise<string>;
        adminRoleDescription(overrides?: CallOverrides): Promise<string>;
        airnodeToChainIdToRequesterToBlockStatus(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        airnodeToChainIdToRequesterToTokenAddressToTokenDeposits(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<string>, arg3: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        airnodeToChainIdToRequesterToTokenToDepositorToDeposit(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, token: PromiseOrValue<string>, depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number,
            number
        ] & {
            tokenId: BigNumber;
            withdrawalLeadTime: number;
            earliestWithdrawalTime: number;
            state: number;
        }>;
        airnodeToDepositorToFreezeStatus(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        airnodeToWithdrawalLeadTime(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>;
        deriveDepositorFreezerRole(airnode: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        deriveRequesterBlockerRole(airnode: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        deriveWithdrawalLeadTimeSetterRole(airnode: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        initiateTokenWithdrawal(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>;
        isAuthorized(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string[]>;
        onERC721Received(arg0: PromiseOrValue<string>, _from: PromiseOrValue<string>, _tokenId: PromiseOrValue<BigNumberish>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        revokeToken(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, token: PromiseOrValue<string>, depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setDepositorFreezeStatus(airnode: PromiseOrValue<string>, depositor: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setRequesterBlockStatus(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setWithdrawalLeadTime(airnode: PromiseOrValue<string>, withdrawalLeadTime: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[
            boolean[],
            string[]
        ] & {
            successes: boolean[];
            returndata: string[];
        }>;
        updateDepositRequester(airnode: PromiseOrValue<string>, chainIdPrevious: PromiseOrValue<BigNumberish>, requesterPrevious: PromiseOrValue<string>, chainIdNext: PromiseOrValue<BigNumberish>, requesterNext: PromiseOrValue<string>, token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        withdrawToken(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "DepositedToken(address,address,address,uint256,address,uint256,uint256)"(airnode?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, depositor?: PromiseOrValue<string> | null, chainId?: null, token?: null, tokenId?: null, tokenDepositCount?: null): DepositedTokenEventFilter;
        DepositedToken(airnode?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, depositor?: PromiseOrValue<string> | null, chainId?: null, token?: null, tokenId?: null, tokenDepositCount?: null): DepositedTokenEventFilter;
        "InitiatedTokenWithdrawal(address,address,address,uint256,address,uint256,uint32,uint256)"(airnode?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, depositor?: PromiseOrValue<string> | null, chainId?: null, token?: null, tokenId?: null, earliestWithdrawalTime?: null, tokenDepositCount?: null): InitiatedTokenWithdrawalEventFilter;
        InitiatedTokenWithdrawal(airnode?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, depositor?: PromiseOrValue<string> | null, chainId?: null, token?: null, tokenId?: null, earliestWithdrawalTime?: null, tokenDepositCount?: null): InitiatedTokenWithdrawalEventFilter;
        "RevokedToken(address,address,address,uint256,address,uint256,uint256)"(airnode?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, depositor?: PromiseOrValue<string> | null, chainId?: null, token?: null, tokenId?: null, tokenDepositCount?: null): RevokedTokenEventFilter;
        RevokedToken(airnode?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, depositor?: PromiseOrValue<string> | null, chainId?: null, token?: null, tokenId?: null, tokenDepositCount?: null): RevokedTokenEventFilter;
        "SetDepositorFreezeStatus(address,address,bool,address)"(airnode?: PromiseOrValue<string> | null, depositor?: PromiseOrValue<string> | null, status?: null, sender?: null): SetDepositorFreezeStatusEventFilter;
        SetDepositorFreezeStatus(airnode?: PromiseOrValue<string> | null, depositor?: PromiseOrValue<string> | null, status?: null, sender?: null): SetDepositorFreezeStatusEventFilter;
        "SetRequesterBlockStatus(address,address,uint256,bool,address)"(airnode?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, chainId?: null, status?: null, sender?: null): SetRequesterBlockStatusEventFilter;
        SetRequesterBlockStatus(airnode?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, chainId?: null, status?: null, sender?: null): SetRequesterBlockStatusEventFilter;
        "SetWithdrawalLeadTime(address,uint32,address)"(airnode?: PromiseOrValue<string> | null, withdrawalLeadTime?: null, sender?: null): SetWithdrawalLeadTimeEventFilter;
        SetWithdrawalLeadTime(airnode?: PromiseOrValue<string> | null, withdrawalLeadTime?: null, sender?: null): SetWithdrawalLeadTimeEventFilter;
        "UpdatedDepositRequesterFrom(address,address,address,uint256,address,uint256,uint256)"(airnode?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, depositor?: PromiseOrValue<string> | null, chainId?: null, token?: null, tokenId?: null, tokenDepositCount?: null): UpdatedDepositRequesterFromEventFilter;
        UpdatedDepositRequesterFrom(airnode?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, depositor?: PromiseOrValue<string> | null, chainId?: null, token?: null, tokenId?: null, tokenDepositCount?: null): UpdatedDepositRequesterFromEventFilter;
        "UpdatedDepositRequesterTo(address,address,address,uint256,address,uint256,uint256)"(airnode?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, depositor?: PromiseOrValue<string> | null, chainId?: null, token?: null, tokenId?: null, tokenDepositCount?: null): UpdatedDepositRequesterToEventFilter;
        UpdatedDepositRequesterTo(airnode?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, depositor?: PromiseOrValue<string> | null, chainId?: null, token?: null, tokenId?: null, tokenDepositCount?: null): UpdatedDepositRequesterToEventFilter;
        "WithdrewToken(address,address,address,uint256,address,uint256,uint256)"(airnode?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, depositor?: PromiseOrValue<string> | null, chainId?: null, token?: null, tokenId?: null, tokenDepositCount?: null): WithdrewTokenEventFilter;
        WithdrewToken(airnode?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, depositor?: PromiseOrValue<string> | null, chainId?: null, token?: null, tokenId?: null, tokenDepositCount?: null): WithdrewTokenEventFilter;
    };
    estimateGas: {
        DEPOSITOR_FREEZER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<BigNumber>;
        REQUESTER_BLOCKER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<BigNumber>;
        WITHDRAWAL_LEAD_TIME_SETTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<BigNumber>;
        accessControlRegistry(overrides?: CallOverrides): Promise<BigNumber>;
        adminRoleDescription(overrides?: CallOverrides): Promise<BigNumber>;
        airnodeToChainIdToRequesterToBlockStatus(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        airnodeToChainIdToRequesterToTokenAddressToTokenDeposits(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<string>, arg3: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        airnodeToChainIdToRequesterToTokenToDepositorToDeposit(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, token: PromiseOrValue<string>, depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        airnodeToDepositorToFreezeStatus(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        airnodeToWithdrawalLeadTime(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        deriveDepositorFreezerRole(airnode: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        deriveRequesterBlockerRole(airnode: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        deriveWithdrawalLeadTimeSetterRole(airnode: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        initiateTokenWithdrawal(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, token: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        isAuthorized(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        onERC721Received(arg0: PromiseOrValue<string>, _from: PromiseOrValue<string>, _tokenId: PromiseOrValue<BigNumberish>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        revokeToken(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, token: PromiseOrValue<string>, depositor: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDepositorFreezeStatus(airnode: PromiseOrValue<string>, depositor: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setRequesterBlockStatus(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setWithdrawalLeadTime(airnode: PromiseOrValue<string>, withdrawalLeadTime: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateDepositRequester(airnode: PromiseOrValue<string>, chainIdPrevious: PromiseOrValue<BigNumberish>, requesterPrevious: PromiseOrValue<string>, chainIdNext: PromiseOrValue<BigNumberish>, requesterNext: PromiseOrValue<string>, token: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawToken(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, token: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        DEPOSITOR_FREEZER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        REQUESTER_BLOCKER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        WITHDRAWAL_LEAD_TIME_SETTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        accessControlRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        adminRoleDescription(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        airnodeToChainIdToRequesterToBlockStatus(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        airnodeToChainIdToRequesterToTokenAddressToTokenDeposits(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<string>, arg3: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        airnodeToChainIdToRequesterToTokenToDepositorToDeposit(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, token: PromiseOrValue<string>, depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        airnodeToDepositorToFreezeStatus(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        airnodeToWithdrawalLeadTime(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deriveDepositorFreezerRole(airnode: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deriveRequesterBlockerRole(airnode: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deriveWithdrawalLeadTimeSetterRole(airnode: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initiateTokenWithdrawal(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, token: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        isAuthorized(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        onERC721Received(arg0: PromiseOrValue<string>, _from: PromiseOrValue<string>, _tokenId: PromiseOrValue<BigNumberish>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        revokeToken(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, token: PromiseOrValue<string>, depositor: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDepositorFreezeStatus(airnode: PromiseOrValue<string>, depositor: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setRequesterBlockStatus(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setWithdrawalLeadTime(airnode: PromiseOrValue<string>, withdrawalLeadTime: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateDepositRequester(airnode: PromiseOrValue<string>, chainIdPrevious: PromiseOrValue<BigNumberish>, requesterPrevious: PromiseOrValue<string>, chainIdNext: PromiseOrValue<BigNumberish>, requesterNext: PromiseOrValue<string>, token: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawToken(airnode: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, requester: PromiseOrValue<string>, token: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
