import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";
export interface IRequesterAuthorizerWithManagerInterface extends utils.Interface {
    functions: {
        "AUTHORIZATION_EXPIRATION_EXTENDER_ROLE_DESCRIPTION()": FunctionFragment;
        "AUTHORIZATION_EXPIRATION_SETTER_ROLE_DESCRIPTION()": FunctionFragment;
        "INDEFINITE_AUTHORIZER_ROLE_DESCRIPTION()": FunctionFragment;
        "accessControlRegistry()": FunctionFragment;
        "adminRole()": FunctionFragment;
        "adminRoleDescription()": FunctionFragment;
        "airnodeToRequesterToAuthorizationStatus(address,address)": FunctionFragment;
        "airnodeToRequesterToSetterToIndefiniteAuthorizationStatus(address,address,address)": FunctionFragment;
        "authorizationExpirationExtenderRole()": FunctionFragment;
        "authorizationExpirationSetterRole()": FunctionFragment;
        "extendAuthorizerExpiration(address,address,uint32)": FunctionFragment;
        "indefiniteAuthorizerRole()": FunctionFragment;
        "isAuthorized(address,address)": FunctionFragment;
        "manager()": FunctionFragment;
        "multicall(bytes[])": FunctionFragment;
        "revokeIndefiniteAuthorizationStatus(address,address,address)": FunctionFragment;
        "setAuthorizationExpiration(address,address,uint32)": FunctionFragment;
        "setIndefiniteAuthorizationStatus(address,address,bool)": FunctionFragment;
        "tryMulticall(bytes[])": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "AUTHORIZATION_EXPIRATION_EXTENDER_ROLE_DESCRIPTION" | "AUTHORIZATION_EXPIRATION_SETTER_ROLE_DESCRIPTION" | "INDEFINITE_AUTHORIZER_ROLE_DESCRIPTION" | "accessControlRegistry" | "adminRole" | "adminRoleDescription" | "airnodeToRequesterToAuthorizationStatus" | "airnodeToRequesterToSetterToIndefiniteAuthorizationStatus" | "authorizationExpirationExtenderRole" | "authorizationExpirationSetterRole" | "extendAuthorizerExpiration" | "indefiniteAuthorizerRole" | "isAuthorized" | "manager" | "multicall" | "revokeIndefiniteAuthorizationStatus" | "setAuthorizationExpiration" | "setIndefiniteAuthorizationStatus" | "tryMulticall"): FunctionFragment;
    encodeFunctionData(functionFragment: "AUTHORIZATION_EXPIRATION_EXTENDER_ROLE_DESCRIPTION", values?: undefined): string;
    encodeFunctionData(functionFragment: "AUTHORIZATION_EXPIRATION_SETTER_ROLE_DESCRIPTION", values?: undefined): string;
    encodeFunctionData(functionFragment: "INDEFINITE_AUTHORIZER_ROLE_DESCRIPTION", values?: undefined): string;
    encodeFunctionData(functionFragment: "accessControlRegistry", values?: undefined): string;
    encodeFunctionData(functionFragment: "adminRole", values?: undefined): string;
    encodeFunctionData(functionFragment: "adminRoleDescription", values?: undefined): string;
    encodeFunctionData(functionFragment: "airnodeToRequesterToAuthorizationStatus", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "airnodeToRequesterToSetterToIndefiniteAuthorizationStatus", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "authorizationExpirationExtenderRole", values?: undefined): string;
    encodeFunctionData(functionFragment: "authorizationExpirationSetterRole", values?: undefined): string;
    encodeFunctionData(functionFragment: "extendAuthorizerExpiration", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "indefiniteAuthorizerRole", values?: undefined): string;
    encodeFunctionData(functionFragment: "isAuthorized", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "manager", values?: undefined): string;
    encodeFunctionData(functionFragment: "multicall", values: [PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "revokeIndefiniteAuthorizationStatus", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "setAuthorizationExpiration", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setIndefiniteAuthorizationStatus", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "tryMulticall", values: [PromiseOrValue<BytesLike>[]]): string;
    decodeFunctionResult(functionFragment: "AUTHORIZATION_EXPIRATION_EXTENDER_ROLE_DESCRIPTION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "AUTHORIZATION_EXPIRATION_SETTER_ROLE_DESCRIPTION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "INDEFINITE_AUTHORIZER_ROLE_DESCRIPTION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "accessControlRegistry", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "adminRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "adminRoleDescription", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "airnodeToRequesterToAuthorizationStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "airnodeToRequesterToSetterToIndefiniteAuthorizationStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "authorizationExpirationExtenderRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "authorizationExpirationSetterRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "extendAuthorizerExpiration", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "indefiniteAuthorizerRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAuthorized", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeIndefiniteAuthorizationStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAuthorizationExpiration", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setIndefiniteAuthorizationStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tryMulticall", data: BytesLike): Result;
    events: {
        "ExtendedAuthorizationExpiration(address,address,uint32,address)": EventFragment;
        "RevokedIndefiniteAuthorizationStatus(address,address,address,uint224,address)": EventFragment;
        "SetAuthorizationExpiration(address,address,uint32,address)": EventFragment;
        "SetIndefiniteAuthorizationStatus(address,address,bool,uint224,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ExtendedAuthorizationExpiration"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RevokedIndefiniteAuthorizationStatus"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetAuthorizationExpiration"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetIndefiniteAuthorizationStatus"): EventFragment;
}
export interface ExtendedAuthorizationExpirationEventObject {
    airnode: string;
    requester: string;
    expirationTimestamp: number;
    sender: string;
}
export type ExtendedAuthorizationExpirationEvent = TypedEvent<[
    string,
    string,
    number,
    string
], ExtendedAuthorizationExpirationEventObject>;
export type ExtendedAuthorizationExpirationEventFilter = TypedEventFilter<ExtendedAuthorizationExpirationEvent>;
export interface RevokedIndefiniteAuthorizationStatusEventObject {
    airnode: string;
    requester: string;
    setter: string;
    indefiniteAuthorizationCount: BigNumber;
    sender: string;
}
export type RevokedIndefiniteAuthorizationStatusEvent = TypedEvent<[
    string,
    string,
    string,
    BigNumber,
    string
], RevokedIndefiniteAuthorizationStatusEventObject>;
export type RevokedIndefiniteAuthorizationStatusEventFilter = TypedEventFilter<RevokedIndefiniteAuthorizationStatusEvent>;
export interface SetAuthorizationExpirationEventObject {
    airnode: string;
    requester: string;
    expirationTimestamp: number;
    sender: string;
}
export type SetAuthorizationExpirationEvent = TypedEvent<[
    string,
    string,
    number,
    string
], SetAuthorizationExpirationEventObject>;
export type SetAuthorizationExpirationEventFilter = TypedEventFilter<SetAuthorizationExpirationEvent>;
export interface SetIndefiniteAuthorizationStatusEventObject {
    airnode: string;
    requester: string;
    status: boolean;
    indefiniteAuthorizationCount: BigNumber;
    sender: string;
}
export type SetIndefiniteAuthorizationStatusEvent = TypedEvent<[
    string,
    string,
    boolean,
    BigNumber,
    string
], SetIndefiniteAuthorizationStatusEventObject>;
export type SetIndefiniteAuthorizationStatusEventFilter = TypedEventFilter<SetIndefiniteAuthorizationStatusEvent>;
export interface IRequesterAuthorizerWithManager extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IRequesterAuthorizerWithManagerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        AUTHORIZATION_EXPIRATION_EXTENDER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<[string]>;
        AUTHORIZATION_EXPIRATION_SETTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<[string]>;
        INDEFINITE_AUTHORIZER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<[string]>;
        accessControlRegistry(overrides?: CallOverrides): Promise<[string]>;
        adminRole(overrides?: CallOverrides): Promise<[string]>;
        adminRoleDescription(overrides?: CallOverrides): Promise<[string]>;
        airnodeToRequesterToAuthorizationStatus(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            number,
            BigNumber
        ] & {
            expirationTimestamp: number;
            indefiniteAuthorizationCount: BigNumber;
        }>;
        airnodeToRequesterToSetterToIndefiniteAuthorizationStatus(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, setter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean] & {
            indefiniteAuthorizationStatus: boolean;
        }>;
        authorizationExpirationExtenderRole(overrides?: CallOverrides): Promise<[string]>;
        authorizationExpirationSetterRole(overrides?: CallOverrides): Promise<[string]>;
        extendAuthorizerExpiration(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, expirationTimestamp: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        indefiniteAuthorizerRole(overrides?: CallOverrides): Promise<[string]>;
        isAuthorized(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        manager(overrides?: CallOverrides): Promise<[string]>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        revokeIndefiniteAuthorizationStatus(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, setter: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setAuthorizationExpiration(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, expirationTimestamp: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setIndefiniteAuthorizationStatus(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    AUTHORIZATION_EXPIRATION_EXTENDER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
    AUTHORIZATION_EXPIRATION_SETTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
    INDEFINITE_AUTHORIZER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
    accessControlRegistry(overrides?: CallOverrides): Promise<string>;
    adminRole(overrides?: CallOverrides): Promise<string>;
    adminRoleDescription(overrides?: CallOverrides): Promise<string>;
    airnodeToRequesterToAuthorizationStatus(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
        number,
        BigNumber
    ] & {
        expirationTimestamp: number;
        indefiniteAuthorizationCount: BigNumber;
    }>;
    airnodeToRequesterToSetterToIndefiniteAuthorizationStatus(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, setter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    authorizationExpirationExtenderRole(overrides?: CallOverrides): Promise<string>;
    authorizationExpirationSetterRole(overrides?: CallOverrides): Promise<string>;
    extendAuthorizerExpiration(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, expirationTimestamp: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    indefiniteAuthorizerRole(overrides?: CallOverrides): Promise<string>;
    isAuthorized(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    manager(overrides?: CallOverrides): Promise<string>;
    multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    revokeIndefiniteAuthorizationStatus(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, setter: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setAuthorizationExpiration(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, expirationTimestamp: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setIndefiniteAuthorizationStatus(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        AUTHORIZATION_EXPIRATION_EXTENDER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
        AUTHORIZATION_EXPIRATION_SETTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
        INDEFINITE_AUTHORIZER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
        accessControlRegistry(overrides?: CallOverrides): Promise<string>;
        adminRole(overrides?: CallOverrides): Promise<string>;
        adminRoleDescription(overrides?: CallOverrides): Promise<string>;
        airnodeToRequesterToAuthorizationStatus(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            number,
            BigNumber
        ] & {
            expirationTimestamp: number;
            indefiniteAuthorizationCount: BigNumber;
        }>;
        airnodeToRequesterToSetterToIndefiniteAuthorizationStatus(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, setter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        authorizationExpirationExtenderRole(overrides?: CallOverrides): Promise<string>;
        authorizationExpirationSetterRole(overrides?: CallOverrides): Promise<string>;
        extendAuthorizerExpiration(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, expirationTimestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        indefiniteAuthorizerRole(overrides?: CallOverrides): Promise<string>;
        isAuthorized(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        manager(overrides?: CallOverrides): Promise<string>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string[]>;
        revokeIndefiniteAuthorizationStatus(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, setter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setAuthorizationExpiration(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, expirationTimestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setIndefiniteAuthorizationStatus(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[
            boolean[],
            string[]
        ] & {
            successes: boolean[];
            returndata: string[];
        }>;
    };
    filters: {
        "ExtendedAuthorizationExpiration(address,address,uint32,address)"(airnode?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, expirationTimestamp?: null, sender?: null): ExtendedAuthorizationExpirationEventFilter;
        ExtendedAuthorizationExpiration(airnode?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, expirationTimestamp?: null, sender?: null): ExtendedAuthorizationExpirationEventFilter;
        "RevokedIndefiniteAuthorizationStatus(address,address,address,uint224,address)"(airnode?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, setter?: null, indefiniteAuthorizationCount?: null, sender?: null): RevokedIndefiniteAuthorizationStatusEventFilter;
        RevokedIndefiniteAuthorizationStatus(airnode?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, setter?: null, indefiniteAuthorizationCount?: null, sender?: null): RevokedIndefiniteAuthorizationStatusEventFilter;
        "SetAuthorizationExpiration(address,address,uint32,address)"(airnode?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, expirationTimestamp?: null, sender?: null): SetAuthorizationExpirationEventFilter;
        SetAuthorizationExpiration(airnode?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, expirationTimestamp?: null, sender?: null): SetAuthorizationExpirationEventFilter;
        "SetIndefiniteAuthorizationStatus(address,address,bool,uint224,address)"(airnode?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, status?: null, indefiniteAuthorizationCount?: null, sender?: null): SetIndefiniteAuthorizationStatusEventFilter;
        SetIndefiniteAuthorizationStatus(airnode?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, status?: null, indefiniteAuthorizationCount?: null, sender?: null): SetIndefiniteAuthorizationStatusEventFilter;
    };
    estimateGas: {
        AUTHORIZATION_EXPIRATION_EXTENDER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<BigNumber>;
        AUTHORIZATION_EXPIRATION_SETTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<BigNumber>;
        INDEFINITE_AUTHORIZER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<BigNumber>;
        accessControlRegistry(overrides?: CallOverrides): Promise<BigNumber>;
        adminRole(overrides?: CallOverrides): Promise<BigNumber>;
        adminRoleDescription(overrides?: CallOverrides): Promise<BigNumber>;
        airnodeToRequesterToAuthorizationStatus(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        airnodeToRequesterToSetterToIndefiniteAuthorizationStatus(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, setter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        authorizationExpirationExtenderRole(overrides?: CallOverrides): Promise<BigNumber>;
        authorizationExpirationSetterRole(overrides?: CallOverrides): Promise<BigNumber>;
        extendAuthorizerExpiration(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, expirationTimestamp: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        indefiniteAuthorizerRole(overrides?: CallOverrides): Promise<BigNumber>;
        isAuthorized(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        manager(overrides?: CallOverrides): Promise<BigNumber>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        revokeIndefiniteAuthorizationStatus(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, setter: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setAuthorizationExpiration(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, expirationTimestamp: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setIndefiniteAuthorizationStatus(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        AUTHORIZATION_EXPIRATION_EXTENDER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        AUTHORIZATION_EXPIRATION_SETTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        INDEFINITE_AUTHORIZER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        accessControlRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        adminRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        adminRoleDescription(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        airnodeToRequesterToAuthorizationStatus(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        airnodeToRequesterToSetterToIndefiniteAuthorizationStatus(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, setter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        authorizationExpirationExtenderRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        authorizationExpirationSetterRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        extendAuthorizerExpiration(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, expirationTimestamp: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        indefiniteAuthorizerRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isAuthorized(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        revokeIndefiniteAuthorizationStatus(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, setter: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setAuthorizationExpiration(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, expirationTimestamp: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setIndefiniteAuthorizationStatus(airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
