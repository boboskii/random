import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";
export interface IPrepaymentDepositoryInterface extends utils.Interface {
    functions: {
        "CLAIMER_ROLE_DESCRIPTION()": FunctionFragment;
        "USER_WITHDRAWAL_LIMIT_DECREASER_ROLE_DESCRIPTION()": FunctionFragment;
        "USER_WITHDRAWAL_LIMIT_INCREASER_ROLE_DESCRIPTION()": FunctionFragment;
        "WITHDRAWAL_SIGNER_ROLE_DESCRIPTION()": FunctionFragment;
        "accessControlRegistry()": FunctionFragment;
        "adminRole()": FunctionFragment;
        "adminRoleDescription()": FunctionFragment;
        "applyPermitAndDeposit(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
        "claim(address,uint256)": FunctionFragment;
        "claimerRole()": FunctionFragment;
        "decreaseUserWithdrawalLimit(address,uint256)": FunctionFragment;
        "deposit(address,uint256)": FunctionFragment;
        "increaseUserWithdrawalLimit(address,uint256)": FunctionFragment;
        "manager()": FunctionFragment;
        "multicall(bytes[])": FunctionFragment;
        "setWithdrawalDestination(address,address)": FunctionFragment;
        "token()": FunctionFragment;
        "tryMulticall(bytes[])": FunctionFragment;
        "userWithdrawalLimitDecreaserRole()": FunctionFragment;
        "userWithdrawalLimitIncreaserRole()": FunctionFragment;
        "withdraw(uint256,uint256,address,bytes)": FunctionFragment;
        "withdrawalSignerRole()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "CLAIMER_ROLE_DESCRIPTION" | "USER_WITHDRAWAL_LIMIT_DECREASER_ROLE_DESCRIPTION" | "USER_WITHDRAWAL_LIMIT_INCREASER_ROLE_DESCRIPTION" | "WITHDRAWAL_SIGNER_ROLE_DESCRIPTION" | "accessControlRegistry" | "adminRole" | "adminRoleDescription" | "applyPermitAndDeposit" | "claim" | "claimerRole" | "decreaseUserWithdrawalLimit" | "deposit" | "increaseUserWithdrawalLimit" | "manager" | "multicall" | "setWithdrawalDestination" | "token" | "tryMulticall" | "userWithdrawalLimitDecreaserRole" | "userWithdrawalLimitIncreaserRole" | "withdraw" | "withdrawalSignerRole"): FunctionFragment;
    encodeFunctionData(functionFragment: "CLAIMER_ROLE_DESCRIPTION", values?: undefined): string;
    encodeFunctionData(functionFragment: "USER_WITHDRAWAL_LIMIT_DECREASER_ROLE_DESCRIPTION", values?: undefined): string;
    encodeFunctionData(functionFragment: "USER_WITHDRAWAL_LIMIT_INCREASER_ROLE_DESCRIPTION", values?: undefined): string;
    encodeFunctionData(functionFragment: "WITHDRAWAL_SIGNER_ROLE_DESCRIPTION", values?: undefined): string;
    encodeFunctionData(functionFragment: "accessControlRegistry", values?: undefined): string;
    encodeFunctionData(functionFragment: "adminRole", values?: undefined): string;
    encodeFunctionData(functionFragment: "adminRoleDescription", values?: undefined): string;
    encodeFunctionData(functionFragment: "applyPermitAndDeposit", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "claim", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "claimerRole", values?: undefined): string;
    encodeFunctionData(functionFragment: "decreaseUserWithdrawalLimit", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "deposit", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "increaseUserWithdrawalLimit", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "manager", values?: undefined): string;
    encodeFunctionData(functionFragment: "multicall", values: [PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "setWithdrawalDestination", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "token", values?: undefined): string;
    encodeFunctionData(functionFragment: "tryMulticall", values: [PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "userWithdrawalLimitDecreaserRole", values?: undefined): string;
    encodeFunctionData(functionFragment: "userWithdrawalLimitIncreaserRole", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdraw", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "withdrawalSignerRole", values?: undefined): string;
    decodeFunctionResult(functionFragment: "CLAIMER_ROLE_DESCRIPTION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "USER_WITHDRAWAL_LIMIT_DECREASER_ROLE_DESCRIPTION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "USER_WITHDRAWAL_LIMIT_INCREASER_ROLE_DESCRIPTION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "WITHDRAWAL_SIGNER_ROLE_DESCRIPTION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "accessControlRegistry", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "adminRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "adminRoleDescription", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "applyPermitAndDeposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimerRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decreaseUserWithdrawalLimit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "increaseUserWithdrawalLimit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWithdrawalDestination", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tryMulticall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "userWithdrawalLimitDecreaserRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "userWithdrawalLimitIncreaserRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawalSignerRole", data: BytesLike): Result;
    events: {
        "Claimed(address,uint256,address)": EventFragment;
        "DecreasedUserWithdrawalLimit(address,uint256,uint256,address)": EventFragment;
        "Deposited(address,uint256,uint256,address)": EventFragment;
        "IncreasedUserWithdrawalLimit(address,uint256,uint256,address)": EventFragment;
        "SetWithdrawalDestination(address,address)": EventFragment;
        "Withdrew(address,bytes32,uint256,uint256,address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DecreasedUserWithdrawalLimit"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "IncreasedUserWithdrawalLimit"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWithdrawalDestination"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdrew"): EventFragment;
}
export interface ClaimedEventObject {
    recipient: string;
    amount: BigNumber;
    sender: string;
}
export type ClaimedEvent = TypedEvent<[
    string,
    BigNumber,
    string
], ClaimedEventObject>;
export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;
export interface DecreasedUserWithdrawalLimitEventObject {
    user: string;
    amount: BigNumber;
    withdrawalLimit: BigNumber;
    sender: string;
}
export type DecreasedUserWithdrawalLimitEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber,
    string
], DecreasedUserWithdrawalLimitEventObject>;
export type DecreasedUserWithdrawalLimitEventFilter = TypedEventFilter<DecreasedUserWithdrawalLimitEvent>;
export interface DepositedEventObject {
    user: string;
    amount: BigNumber;
    withdrawalLimit: BigNumber;
    sender: string;
}
export type DepositedEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber,
    string
], DepositedEventObject>;
export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;
export interface IncreasedUserWithdrawalLimitEventObject {
    user: string;
    amount: BigNumber;
    withdrawalLimit: BigNumber;
    sender: string;
}
export type IncreasedUserWithdrawalLimitEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber,
    string
], IncreasedUserWithdrawalLimitEventObject>;
export type IncreasedUserWithdrawalLimitEventFilter = TypedEventFilter<IncreasedUserWithdrawalLimitEvent>;
export interface SetWithdrawalDestinationEventObject {
    user: string;
    withdrawalDestination: string;
}
export type SetWithdrawalDestinationEvent = TypedEvent<[
    string,
    string
], SetWithdrawalDestinationEventObject>;
export type SetWithdrawalDestinationEventFilter = TypedEventFilter<SetWithdrawalDestinationEvent>;
export interface WithdrewEventObject {
    user: string;
    withdrawalHash: string;
    amount: BigNumber;
    expirationTimestamp: BigNumber;
    withdrawalSigner: string;
    withdrawalDestination: string;
    withdrawalLimit: BigNumber;
}
export type WithdrewEvent = TypedEvent<[
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber
], WithdrewEventObject>;
export type WithdrewEventFilter = TypedEventFilter<WithdrewEvent>;
export interface IPrepaymentDepository extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IPrepaymentDepositoryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        CLAIMER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<[string]>;
        USER_WITHDRAWAL_LIMIT_DECREASER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<[string]>;
        USER_WITHDRAWAL_LIMIT_INCREASER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<[string]>;
        WITHDRAWAL_SIGNER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<[string]>;
        accessControlRegistry(overrides?: CallOverrides): Promise<[string]>;
        adminRole(overrides?: CallOverrides): Promise<[string]>;
        adminRoleDescription(overrides?: CallOverrides): Promise<[string]>;
        applyPermitAndDeposit(user: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, deadline: PromiseOrValue<BigNumberish>, v: PromiseOrValue<BigNumberish>, r: PromiseOrValue<BytesLike>, s: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        claim(recipient: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        claimerRole(overrides?: CallOverrides): Promise<[string]>;
        decreaseUserWithdrawalLimit(user: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        deposit(user: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        increaseUserWithdrawalLimit(user: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        manager(overrides?: CallOverrides): Promise<[string]>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setWithdrawalDestination(user: PromiseOrValue<string>, withdrawalDestination: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        token(overrides?: CallOverrides): Promise<[string]>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        userWithdrawalLimitDecreaserRole(overrides?: CallOverrides): Promise<[string]>;
        userWithdrawalLimitIncreaserRole(overrides?: CallOverrides): Promise<[string]>;
        withdraw(amount: PromiseOrValue<BigNumberish>, expirationTimestamp: PromiseOrValue<BigNumberish>, withdrawalSigner: PromiseOrValue<string>, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawalSignerRole(overrides?: CallOverrides): Promise<[string]>;
    };
    CLAIMER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
    USER_WITHDRAWAL_LIMIT_DECREASER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
    USER_WITHDRAWAL_LIMIT_INCREASER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
    WITHDRAWAL_SIGNER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
    accessControlRegistry(overrides?: CallOverrides): Promise<string>;
    adminRole(overrides?: CallOverrides): Promise<string>;
    adminRoleDescription(overrides?: CallOverrides): Promise<string>;
    applyPermitAndDeposit(user: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, deadline: PromiseOrValue<BigNumberish>, v: PromiseOrValue<BigNumberish>, r: PromiseOrValue<BytesLike>, s: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    claim(recipient: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    claimerRole(overrides?: CallOverrides): Promise<string>;
    decreaseUserWithdrawalLimit(user: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    deposit(user: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    increaseUserWithdrawalLimit(user: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    manager(overrides?: CallOverrides): Promise<string>;
    multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setWithdrawalDestination(user: PromiseOrValue<string>, withdrawalDestination: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    token(overrides?: CallOverrides): Promise<string>;
    tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    userWithdrawalLimitDecreaserRole(overrides?: CallOverrides): Promise<string>;
    userWithdrawalLimitIncreaserRole(overrides?: CallOverrides): Promise<string>;
    withdraw(amount: PromiseOrValue<BigNumberish>, expirationTimestamp: PromiseOrValue<BigNumberish>, withdrawalSigner: PromiseOrValue<string>, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawalSignerRole(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        CLAIMER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
        USER_WITHDRAWAL_LIMIT_DECREASER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
        USER_WITHDRAWAL_LIMIT_INCREASER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
        WITHDRAWAL_SIGNER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
        accessControlRegistry(overrides?: CallOverrides): Promise<string>;
        adminRole(overrides?: CallOverrides): Promise<string>;
        adminRoleDescription(overrides?: CallOverrides): Promise<string>;
        applyPermitAndDeposit(user: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, deadline: PromiseOrValue<BigNumberish>, v: PromiseOrValue<BigNumberish>, r: PromiseOrValue<BytesLike>, s: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        claim(recipient: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        claimerRole(overrides?: CallOverrides): Promise<string>;
        decreaseUserWithdrawalLimit(user: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        deposit(user: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        increaseUserWithdrawalLimit(user: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        manager(overrides?: CallOverrides): Promise<string>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string[]>;
        setWithdrawalDestination(user: PromiseOrValue<string>, withdrawalDestination: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        token(overrides?: CallOverrides): Promise<string>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[
            boolean[],
            string[]
        ] & {
            successes: boolean[];
            returndata: string[];
        }>;
        userWithdrawalLimitDecreaserRole(overrides?: CallOverrides): Promise<string>;
        userWithdrawalLimitIncreaserRole(overrides?: CallOverrides): Promise<string>;
        withdraw(amount: PromiseOrValue<BigNumberish>, expirationTimestamp: PromiseOrValue<BigNumberish>, withdrawalSigner: PromiseOrValue<string>, signature: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            string,
            BigNumber
        ] & {
            withdrawalDestination: string;
            withdrawalLimit: BigNumber;
        }>;
        withdrawalSignerRole(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "Claimed(address,uint256,address)"(recipient?: null, amount?: null, sender?: null): ClaimedEventFilter;
        Claimed(recipient?: null, amount?: null, sender?: null): ClaimedEventFilter;
        "DecreasedUserWithdrawalLimit(address,uint256,uint256,address)"(user?: PromiseOrValue<string> | null, amount?: null, withdrawalLimit?: null, sender?: null): DecreasedUserWithdrawalLimitEventFilter;
        DecreasedUserWithdrawalLimit(user?: PromiseOrValue<string> | null, amount?: null, withdrawalLimit?: null, sender?: null): DecreasedUserWithdrawalLimitEventFilter;
        "Deposited(address,uint256,uint256,address)"(user?: PromiseOrValue<string> | null, amount?: null, withdrawalLimit?: null, sender?: null): DepositedEventFilter;
        Deposited(user?: PromiseOrValue<string> | null, amount?: null, withdrawalLimit?: null, sender?: null): DepositedEventFilter;
        "IncreasedUserWithdrawalLimit(address,uint256,uint256,address)"(user?: PromiseOrValue<string> | null, amount?: null, withdrawalLimit?: null, sender?: null): IncreasedUserWithdrawalLimitEventFilter;
        IncreasedUserWithdrawalLimit(user?: PromiseOrValue<string> | null, amount?: null, withdrawalLimit?: null, sender?: null): IncreasedUserWithdrawalLimitEventFilter;
        "SetWithdrawalDestination(address,address)"(user?: PromiseOrValue<string> | null, withdrawalDestination?: null): SetWithdrawalDestinationEventFilter;
        SetWithdrawalDestination(user?: PromiseOrValue<string> | null, withdrawalDestination?: null): SetWithdrawalDestinationEventFilter;
        "Withdrew(address,bytes32,uint256,uint256,address,address,uint256)"(user?: PromiseOrValue<string> | null, withdrawalHash?: PromiseOrValue<BytesLike> | null, amount?: null, expirationTimestamp?: null, withdrawalSigner?: null, withdrawalDestination?: null, withdrawalLimit?: null): WithdrewEventFilter;
        Withdrew(user?: PromiseOrValue<string> | null, withdrawalHash?: PromiseOrValue<BytesLike> | null, amount?: null, expirationTimestamp?: null, withdrawalSigner?: null, withdrawalDestination?: null, withdrawalLimit?: null): WithdrewEventFilter;
    };
    estimateGas: {
        CLAIMER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<BigNumber>;
        USER_WITHDRAWAL_LIMIT_DECREASER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<BigNumber>;
        USER_WITHDRAWAL_LIMIT_INCREASER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<BigNumber>;
        WITHDRAWAL_SIGNER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<BigNumber>;
        accessControlRegistry(overrides?: CallOverrides): Promise<BigNumber>;
        adminRole(overrides?: CallOverrides): Promise<BigNumber>;
        adminRoleDescription(overrides?: CallOverrides): Promise<BigNumber>;
        applyPermitAndDeposit(user: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, deadline: PromiseOrValue<BigNumberish>, v: PromiseOrValue<BigNumberish>, r: PromiseOrValue<BytesLike>, s: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        claim(recipient: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        claimerRole(overrides?: CallOverrides): Promise<BigNumber>;
        decreaseUserWithdrawalLimit(user: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        deposit(user: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        increaseUserWithdrawalLimit(user: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        manager(overrides?: CallOverrides): Promise<BigNumber>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setWithdrawalDestination(user: PromiseOrValue<string>, withdrawalDestination: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        token(overrides?: CallOverrides): Promise<BigNumber>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        userWithdrawalLimitDecreaserRole(overrides?: CallOverrides): Promise<BigNumber>;
        userWithdrawalLimitIncreaserRole(overrides?: CallOverrides): Promise<BigNumber>;
        withdraw(amount: PromiseOrValue<BigNumberish>, expirationTimestamp: PromiseOrValue<BigNumberish>, withdrawalSigner: PromiseOrValue<string>, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawalSignerRole(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        CLAIMER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        USER_WITHDRAWAL_LIMIT_DECREASER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        USER_WITHDRAWAL_LIMIT_INCREASER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        WITHDRAWAL_SIGNER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        accessControlRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        adminRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        adminRoleDescription(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        applyPermitAndDeposit(user: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, deadline: PromiseOrValue<BigNumberish>, v: PromiseOrValue<BigNumberish>, r: PromiseOrValue<BytesLike>, s: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        claim(recipient: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        claimerRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        decreaseUserWithdrawalLimit(user: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        deposit(user: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        increaseUserWithdrawalLimit(user: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setWithdrawalDestination(user: PromiseOrValue<string>, withdrawalDestination: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        userWithdrawalLimitDecreaserRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        userWithdrawalLimitIncreaserRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdraw(amount: PromiseOrValue<BigNumberish>, expirationTimestamp: PromiseOrValue<BigNumberish>, withdrawalSigner: PromiseOrValue<string>, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawalSignerRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
