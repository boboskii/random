import type { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";
export interface IOrderPayableInterface extends utils.Interface {
    functions: {
        "ORDER_SIGNER_ROLE_DESCRIPTION()": FunctionFragment;
        "WITHDRAWER_ROLE_DESCRIPTION()": FunctionFragment;
        "orderIdToPaymentStatus(bytes32)": FunctionFragment;
        "orderSignerRole()": FunctionFragment;
        "payForOrder(bytes)": FunctionFragment;
        "withdraw(address)": FunctionFragment;
        "withdrawerRole()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "ORDER_SIGNER_ROLE_DESCRIPTION" | "WITHDRAWER_ROLE_DESCRIPTION" | "orderIdToPaymentStatus" | "orderSignerRole" | "payForOrder" | "withdraw" | "withdrawerRole"): FunctionFragment;
    encodeFunctionData(functionFragment: "ORDER_SIGNER_ROLE_DESCRIPTION", values?: undefined): string;
    encodeFunctionData(functionFragment: "WITHDRAWER_ROLE_DESCRIPTION", values?: undefined): string;
    encodeFunctionData(functionFragment: "orderIdToPaymentStatus", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "orderSignerRole", values?: undefined): string;
    encodeFunctionData(functionFragment: "payForOrder", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "withdraw", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "withdrawerRole", values?: undefined): string;
    decodeFunctionResult(functionFragment: "ORDER_SIGNER_ROLE_DESCRIPTION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "WITHDRAWER_ROLE_DESCRIPTION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "orderIdToPaymentStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "orderSignerRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "payForOrder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawerRole", data: BytesLike): Result;
    events: {
        "PaidForOrder(bytes32,uint256,address,uint256,address)": EventFragment;
        "Withdrew(address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "PaidForOrder"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdrew"): EventFragment;
}
export interface PaidForOrderEventObject {
    orderId: string;
    expirationTimestamp: BigNumber;
    orderSigner: string;
    amount: BigNumber;
    sender: string;
}
export type PaidForOrderEvent = TypedEvent<[
    string,
    BigNumber,
    string,
    BigNumber,
    string
], PaidForOrderEventObject>;
export type PaidForOrderEventFilter = TypedEventFilter<PaidForOrderEvent>;
export interface WithdrewEventObject {
    recipient: string;
    amount: BigNumber;
}
export type WithdrewEvent = TypedEvent<[
    string,
    BigNumber
], WithdrewEventObject>;
export type WithdrewEventFilter = TypedEventFilter<WithdrewEvent>;
export interface IOrderPayable extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IOrderPayableInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        ORDER_SIGNER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<[string]>;
        WITHDRAWER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<[string]>;
        orderIdToPaymentStatus(orderId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean] & {
            paymentStatus: boolean;
        }>;
        orderSignerRole(overrides?: CallOverrides): Promise<[string]>;
        payForOrder(encodedData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdraw(recipient: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawerRole(overrides?: CallOverrides): Promise<[string]>;
    };
    ORDER_SIGNER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
    WITHDRAWER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
    orderIdToPaymentStatus(orderId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    orderSignerRole(overrides?: CallOverrides): Promise<string>;
    payForOrder(encodedData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdraw(recipient: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawerRole(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        ORDER_SIGNER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
        WITHDRAWER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
        orderIdToPaymentStatus(orderId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        orderSignerRole(overrides?: CallOverrides): Promise<string>;
        payForOrder(encodedData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        withdraw(recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        withdrawerRole(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "PaidForOrder(bytes32,uint256,address,uint256,address)"(orderId?: PromiseOrValue<BytesLike> | null, expirationTimestamp?: null, orderSigner?: null, amount?: null, sender?: null): PaidForOrderEventFilter;
        PaidForOrder(orderId?: PromiseOrValue<BytesLike> | null, expirationTimestamp?: null, orderSigner?: null, amount?: null, sender?: null): PaidForOrderEventFilter;
        "Withdrew(address,uint256)"(recipient?: null, amount?: null): WithdrewEventFilter;
        Withdrew(recipient?: null, amount?: null): WithdrewEventFilter;
    };
    estimateGas: {
        ORDER_SIGNER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<BigNumber>;
        WITHDRAWER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<BigNumber>;
        orderIdToPaymentStatus(orderId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        orderSignerRole(overrides?: CallOverrides): Promise<BigNumber>;
        payForOrder(encodedData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdraw(recipient: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawerRole(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        ORDER_SIGNER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        WITHDRAWER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        orderIdToPaymentStatus(orderId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        orderSignerRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        payForOrder(encodedData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdraw(recipient: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawerRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
