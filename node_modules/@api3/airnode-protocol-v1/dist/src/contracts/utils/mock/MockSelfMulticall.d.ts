import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";
export interface MockSelfMulticallInterface extends utils.Interface {
    functions: {
        "alwaysRevertsWithCustomError(int256,int256)": FunctionFragment;
        "alwaysRevertsWithNoData(int256,int256)": FunctionFragment;
        "alwaysRevertsWithString(int256,int256)": FunctionFragment;
        "argumentHistory()": FunctionFragment;
        "convertsPositiveArgumentToNegative(int256)": FunctionFragment;
        "multicall(bytes[])": FunctionFragment;
        "tryMulticall(bytes[])": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "alwaysRevertsWithCustomError" | "alwaysRevertsWithNoData" | "alwaysRevertsWithString" | "argumentHistory" | "convertsPositiveArgumentToNegative" | "multicall" | "tryMulticall"): FunctionFragment;
    encodeFunctionData(functionFragment: "alwaysRevertsWithCustomError", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "alwaysRevertsWithNoData", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "alwaysRevertsWithString", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "argumentHistory", values?: undefined): string;
    encodeFunctionData(functionFragment: "convertsPositiveArgumentToNegative", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "multicall", values: [PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "tryMulticall", values: [PromiseOrValue<BytesLike>[]]): string;
    decodeFunctionResult(functionFragment: "alwaysRevertsWithCustomError", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "alwaysRevertsWithNoData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "alwaysRevertsWithString", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "argumentHistory", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "convertsPositiveArgumentToNegative", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tryMulticall", data: BytesLike): Result;
    events: {};
}
export interface MockSelfMulticall extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MockSelfMulticallInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        alwaysRevertsWithCustomError(argPositive: PromiseOrValue<BigNumberish>, argNegative: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[void]>;
        alwaysRevertsWithNoData(argPositive: PromiseOrValue<BigNumberish>, argNegative: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[void]>;
        alwaysRevertsWithString(argPositive: PromiseOrValue<BigNumberish>, argNegative: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[void]>;
        argumentHistory(overrides?: CallOverrides): Promise<[BigNumber[]]>;
        convertsPositiveArgumentToNegative(argPositive: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    alwaysRevertsWithCustomError(argPositive: PromiseOrValue<BigNumberish>, argNegative: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    alwaysRevertsWithNoData(argPositive: PromiseOrValue<BigNumberish>, argNegative: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    alwaysRevertsWithString(argPositive: PromiseOrValue<BigNumberish>, argNegative: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    argumentHistory(overrides?: CallOverrides): Promise<BigNumber[]>;
    convertsPositiveArgumentToNegative(argPositive: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        alwaysRevertsWithCustomError(argPositive: PromiseOrValue<BigNumberish>, argNegative: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        alwaysRevertsWithNoData(argPositive: PromiseOrValue<BigNumberish>, argNegative: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        alwaysRevertsWithString(argPositive: PromiseOrValue<BigNumberish>, argNegative: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        argumentHistory(overrides?: CallOverrides): Promise<BigNumber[]>;
        convertsPositiveArgumentToNegative(argPositive: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string[]>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[
            boolean[],
            string[]
        ] & {
            successes: boolean[];
            returndata: string[];
        }>;
    };
    filters: {};
    estimateGas: {
        alwaysRevertsWithCustomError(argPositive: PromiseOrValue<BigNumberish>, argNegative: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        alwaysRevertsWithNoData(argPositive: PromiseOrValue<BigNumberish>, argNegative: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        alwaysRevertsWithString(argPositive: PromiseOrValue<BigNumberish>, argNegative: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        argumentHistory(overrides?: CallOverrides): Promise<BigNumber>;
        convertsPositiveArgumentToNegative(argPositive: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        alwaysRevertsWithCustomError(argPositive: PromiseOrValue<BigNumberish>, argNegative: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        alwaysRevertsWithNoData(argPositive: PromiseOrValue<BigNumberish>, argNegative: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        alwaysRevertsWithString(argPositive: PromiseOrValue<BigNumberish>, argNegative: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        argumentHistory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        convertsPositiveArgumentToNegative(argPositive: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
