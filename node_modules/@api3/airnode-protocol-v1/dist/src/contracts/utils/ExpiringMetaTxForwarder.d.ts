import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";
export declare namespace IExpiringMetaTxForwarder {
    type ExpiringMetaTxStruct = {
        from: PromiseOrValue<string>;
        to: PromiseOrValue<string>;
        data: PromiseOrValue<BytesLike>;
        expirationTimestamp: PromiseOrValue<BigNumberish>;
    };
    type ExpiringMetaTxStructOutput = [
        string,
        string,
        string,
        BigNumber
    ] & {
        from: string;
        to: string;
        data: string;
        expirationTimestamp: BigNumber;
    };
}
export interface ExpiringMetaTxForwarderInterface extends utils.Interface {
    functions: {
        "cancel((address,address,bytes,uint256))": FunctionFragment;
        "execute((address,address,bytes,uint256),bytes)": FunctionFragment;
        "metaTxWithHashIsExecutedOrCanceled(bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "cancel" | "execute" | "metaTxWithHashIsExecutedOrCanceled"): FunctionFragment;
    encodeFunctionData(functionFragment: "cancel", values: [IExpiringMetaTxForwarder.ExpiringMetaTxStruct]): string;
    encodeFunctionData(functionFragment: "execute", values: [
        IExpiringMetaTxForwarder.ExpiringMetaTxStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "metaTxWithHashIsExecutedOrCanceled", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "metaTxWithHashIsExecutedOrCanceled", data: BytesLike): Result;
    events: {
        "CanceledMetaTx(bytes32)": EventFragment;
        "ExecutedMetaTx(bytes32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "CanceledMetaTx"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExecutedMetaTx"): EventFragment;
}
export interface CanceledMetaTxEventObject {
    metaTxHash: string;
}
export type CanceledMetaTxEvent = TypedEvent<[
    string
], CanceledMetaTxEventObject>;
export type CanceledMetaTxEventFilter = TypedEventFilter<CanceledMetaTxEvent>;
export interface ExecutedMetaTxEventObject {
    metaTxHash: string;
}
export type ExecutedMetaTxEvent = TypedEvent<[
    string
], ExecutedMetaTxEventObject>;
export type ExecutedMetaTxEventFilter = TypedEventFilter<ExecutedMetaTxEvent>;
export interface ExpiringMetaTxForwarder extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ExpiringMetaTxForwarderInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        cancel(metaTx: IExpiringMetaTxForwarder.ExpiringMetaTxStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        execute(metaTx: IExpiringMetaTxForwarder.ExpiringMetaTxStruct, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        metaTxWithHashIsExecutedOrCanceled(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    cancel(metaTx: IExpiringMetaTxForwarder.ExpiringMetaTxStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    execute(metaTx: IExpiringMetaTxForwarder.ExpiringMetaTxStruct, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    metaTxWithHashIsExecutedOrCanceled(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        cancel(metaTx: IExpiringMetaTxForwarder.ExpiringMetaTxStruct, overrides?: CallOverrides): Promise<void>;
        execute(metaTx: IExpiringMetaTxForwarder.ExpiringMetaTxStruct, signature: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        metaTxWithHashIsExecutedOrCanceled(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "CanceledMetaTx(bytes32)"(metaTxHash?: PromiseOrValue<BytesLike> | null): CanceledMetaTxEventFilter;
        CanceledMetaTx(metaTxHash?: PromiseOrValue<BytesLike> | null): CanceledMetaTxEventFilter;
        "ExecutedMetaTx(bytes32)"(metaTxHash?: PromiseOrValue<BytesLike> | null): ExecutedMetaTxEventFilter;
        ExecutedMetaTx(metaTxHash?: PromiseOrValue<BytesLike> | null): ExecutedMetaTxEventFilter;
    };
    estimateGas: {
        cancel(metaTx: IExpiringMetaTxForwarder.ExpiringMetaTxStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        execute(metaTx: IExpiringMetaTxForwarder.ExpiringMetaTxStruct, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        metaTxWithHashIsExecutedOrCanceled(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        cancel(metaTx: IExpiringMetaTxForwarder.ExpiringMetaTxStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        execute(metaTx: IExpiringMetaTxForwarder.ExpiringMetaTxStruct, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        metaTxWithHashIsExecutedOrCanceled(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
