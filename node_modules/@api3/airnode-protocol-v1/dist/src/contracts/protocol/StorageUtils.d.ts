import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";
export interface StorageUtilsInterface extends utils.Interface {
    functions: {
        "MAXIMUM_PARAMETER_LENGTH()": FunctionFragment;
        "storeSubscription(uint256,address,bytes32,bytes,bytes,address,address,address,bytes4)": FunctionFragment;
        "storeTemplate(bytes32,bytes)": FunctionFragment;
        "subscriptions(bytes32)": FunctionFragment;
        "templates(bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "MAXIMUM_PARAMETER_LENGTH" | "storeSubscription" | "storeTemplate" | "subscriptions" | "templates"): FunctionFragment;
    encodeFunctionData(functionFragment: "MAXIMUM_PARAMETER_LENGTH", values?: undefined): string;
    encodeFunctionData(functionFragment: "storeSubscription", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "storeTemplate", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "subscriptions", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "templates", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "MAXIMUM_PARAMETER_LENGTH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "storeSubscription", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "storeTemplate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "subscriptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "templates", data: BytesLike): Result;
    events: {
        "StoredSubscription(bytes32,uint256,address,bytes32,bytes,bytes,address,address,address,bytes4)": EventFragment;
        "StoredTemplate(bytes32,bytes32,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "StoredSubscription"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "StoredTemplate"): EventFragment;
}
export interface StoredSubscriptionEventObject {
    subscriptionId: string;
    chainId: BigNumber;
    airnode: string;
    endpointOrTemplateId: string;
    parameters: string;
    conditions: string;
    relayer: string;
    sponsor: string;
    requester: string;
    fulfillFunctionId: string;
}
export type StoredSubscriptionEvent = TypedEvent<[
    string,
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string
], StoredSubscriptionEventObject>;
export type StoredSubscriptionEventFilter = TypedEventFilter<StoredSubscriptionEvent>;
export interface StoredTemplateEventObject {
    templateId: string;
    endpointId: string;
    parameters: string;
}
export type StoredTemplateEvent = TypedEvent<[
    string,
    string,
    string
], StoredTemplateEventObject>;
export type StoredTemplateEventFilter = TypedEventFilter<StoredTemplateEvent>;
export interface StorageUtils extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: StorageUtilsInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        MAXIMUM_PARAMETER_LENGTH(overrides?: CallOverrides): Promise<[BigNumber]>;
        storeSubscription(chainId: PromiseOrValue<BigNumberish>, airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, conditions: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, requester: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        storeTemplate(endpointId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        subscriptions(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string
        ] & {
            chainId: BigNumber;
            airnode: string;
            endpointOrTemplateId: string;
            parameters: string;
            conditions: string;
            relayer: string;
            sponsor: string;
            requester: string;
            fulfillFunctionId: string;
        }>;
        templates(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string, string] & {
            endpointId: string;
            parameters: string;
        }>;
    };
    MAXIMUM_PARAMETER_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;
    storeSubscription(chainId: PromiseOrValue<BigNumberish>, airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, conditions: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, requester: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    storeTemplate(endpointId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    subscriptions(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
        BigNumber,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
    ] & {
        chainId: BigNumber;
        airnode: string;
        endpointOrTemplateId: string;
        parameters: string;
        conditions: string;
        relayer: string;
        sponsor: string;
        requester: string;
        fulfillFunctionId: string;
    }>;
    templates(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string, string] & {
        endpointId: string;
        parameters: string;
    }>;
    callStatic: {
        MAXIMUM_PARAMETER_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;
        storeSubscription(chainId: PromiseOrValue<BigNumberish>, airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, conditions: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, requester: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        storeTemplate(endpointId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        subscriptions(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string
        ] & {
            chainId: BigNumber;
            airnode: string;
            endpointOrTemplateId: string;
            parameters: string;
            conditions: string;
            relayer: string;
            sponsor: string;
            requester: string;
            fulfillFunctionId: string;
        }>;
        templates(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string, string] & {
            endpointId: string;
            parameters: string;
        }>;
    };
    filters: {
        "StoredSubscription(bytes32,uint256,address,bytes32,bytes,bytes,address,address,address,bytes4)"(subscriptionId?: PromiseOrValue<BytesLike> | null, chainId?: null, airnode?: null, endpointOrTemplateId?: null, parameters?: null, conditions?: null, relayer?: null, sponsor?: null, requester?: null, fulfillFunctionId?: null): StoredSubscriptionEventFilter;
        StoredSubscription(subscriptionId?: PromiseOrValue<BytesLike> | null, chainId?: null, airnode?: null, endpointOrTemplateId?: null, parameters?: null, conditions?: null, relayer?: null, sponsor?: null, requester?: null, fulfillFunctionId?: null): StoredSubscriptionEventFilter;
        "StoredTemplate(bytes32,bytes32,bytes)"(templateId?: PromiseOrValue<BytesLike> | null, endpointId?: null, parameters?: null): StoredTemplateEventFilter;
        StoredTemplate(templateId?: PromiseOrValue<BytesLike> | null, endpointId?: null, parameters?: null): StoredTemplateEventFilter;
    };
    estimateGas: {
        MAXIMUM_PARAMETER_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;
        storeSubscription(chainId: PromiseOrValue<BigNumberish>, airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, conditions: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, requester: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        storeTemplate(endpointId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        subscriptions(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        templates(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        MAXIMUM_PARAMETER_LENGTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        storeSubscription(chainId: PromiseOrValue<BigNumberish>, airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, conditions: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, requester: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        storeTemplate(endpointId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        subscriptions(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        templates(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
