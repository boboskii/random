import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";
export interface MockAirnodeRequesterInterface extends utils.Interface {
    functions: {
        "airnodeProtocol()": FunctionFragment;
        "fulfillRequest(bytes32,uint256,bytes)": FunctionFragment;
        "fulfillRequestAlwaysReverts(bytes32,uint256,bytes)": FunctionFragment;
        "fulfillRequestAlwaysRevertsWithNoString(bytes32,uint256,bytes)": FunctionFragment;
        "fulfillRequestAlwaysRunsOutOfGas(bytes32,uint256,bytes)": FunctionFragment;
        "makeRequest(address,bytes32,bytes,address,bytes4)": FunctionFragment;
        "makeRequestRelayed(address,bytes32,bytes,address,address,bytes4)": FunctionFragment;
        "requestIdToData(bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "airnodeProtocol" | "fulfillRequest" | "fulfillRequestAlwaysReverts" | "fulfillRequestAlwaysRevertsWithNoString" | "fulfillRequestAlwaysRunsOutOfGas" | "makeRequest" | "makeRequestRelayed" | "requestIdToData"): FunctionFragment;
    encodeFunctionData(functionFragment: "airnodeProtocol", values?: undefined): string;
    encodeFunctionData(functionFragment: "fulfillRequest", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "fulfillRequestAlwaysReverts", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "fulfillRequestAlwaysRevertsWithNoString", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "fulfillRequestAlwaysRunsOutOfGas", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "makeRequest", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "makeRequestRelayed", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "requestIdToData", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "airnodeProtocol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fulfillRequest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fulfillRequestAlwaysReverts", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fulfillRequestAlwaysRevertsWithNoString", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fulfillRequestAlwaysRunsOutOfGas", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "makeRequest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "makeRequestRelayed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requestIdToData", data: BytesLike): Result;
    events: {};
}
export interface MockAirnodeRequester extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MockAirnodeRequesterInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        airnodeProtocol(overrides?: CallOverrides): Promise<[string]>;
        fulfillRequest(requestId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        fulfillRequestAlwaysReverts(arg0: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[void]>;
        fulfillRequestAlwaysRevertsWithNoString(arg0: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[void]>;
        fulfillRequestAlwaysRunsOutOfGas(arg0: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[void]>;
        makeRequest(airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, sponsor: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        makeRequestRelayed(airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        requestIdToData(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
    };
    airnodeProtocol(overrides?: CallOverrides): Promise<string>;
    fulfillRequest(requestId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    fulfillRequestAlwaysReverts(arg0: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    fulfillRequestAlwaysRevertsWithNoString(arg0: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    fulfillRequestAlwaysRunsOutOfGas(arg0: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    makeRequest(airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, sponsor: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    makeRequestRelayed(airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    requestIdToData(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        airnodeProtocol(overrides?: CallOverrides): Promise<string>;
        fulfillRequest(requestId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        fulfillRequestAlwaysReverts(arg0: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        fulfillRequestAlwaysRevertsWithNoString(arg0: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        fulfillRequestAlwaysRunsOutOfGas(arg0: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        makeRequest(airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, sponsor: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        makeRequestRelayed(airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        requestIdToData(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        airnodeProtocol(overrides?: CallOverrides): Promise<BigNumber>;
        fulfillRequest(requestId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        fulfillRequestAlwaysReverts(arg0: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        fulfillRequestAlwaysRevertsWithNoString(arg0: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        fulfillRequestAlwaysRunsOutOfGas(arg0: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        makeRequest(airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, sponsor: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        makeRequestRelayed(airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        requestIdToData(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        airnodeProtocol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        fulfillRequest(requestId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        fulfillRequestAlwaysReverts(arg0: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        fulfillRequestAlwaysRevertsWithNoString(arg0: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        fulfillRequestAlwaysRunsOutOfGas(arg0: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        makeRequest(airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, sponsor: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        makeRequestRelayed(airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        requestIdToData(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
