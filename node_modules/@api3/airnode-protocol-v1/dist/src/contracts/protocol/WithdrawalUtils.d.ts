import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";
export interface WithdrawalUtilsInterface extends utils.Interface {
    functions: {
        "claimBalance()": FunctionFragment;
        "fulfillWithdrawal(bytes32,address,uint256,address,uint256,bytes)": FunctionFragment;
        "requestWithdrawal(address,uint256)": FunctionFragment;
        "sponsorToBalance(address)": FunctionFragment;
        "sponsorToWithdrawalRequestCount(address)": FunctionFragment;
        "withdrawalRequestIsAwaitingFulfillment(bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "claimBalance" | "fulfillWithdrawal" | "requestWithdrawal" | "sponsorToBalance" | "sponsorToWithdrawalRequestCount" | "withdrawalRequestIsAwaitingFulfillment"): FunctionFragment;
    encodeFunctionData(functionFragment: "claimBalance", values?: undefined): string;
    encodeFunctionData(functionFragment: "fulfillWithdrawal", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "requestWithdrawal", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "sponsorToBalance", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "sponsorToWithdrawalRequestCount", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "withdrawalRequestIsAwaitingFulfillment", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "claimBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fulfillWithdrawal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requestWithdrawal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sponsorToBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sponsorToWithdrawalRequestCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawalRequestIsAwaitingFulfillment", data: BytesLike): Result;
    events: {
        "ClaimedBalance(address,uint256)": EventFragment;
        "FulfilledWithdrawal(address,address,bytes32,uint256,address,uint256)": EventFragment;
        "RequestedWithdrawal(address,address,bytes32,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ClaimedBalance"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FulfilledWithdrawal"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RequestedWithdrawal"): EventFragment;
}
export interface ClaimedBalanceEventObject {
    sponsor: string;
    amount: BigNumber;
}
export type ClaimedBalanceEvent = TypedEvent<[
    string,
    BigNumber
], ClaimedBalanceEventObject>;
export type ClaimedBalanceEventFilter = TypedEventFilter<ClaimedBalanceEvent>;
export interface FulfilledWithdrawalEventObject {
    airnodeOrRelayer: string;
    sponsor: string;
    withdrawalRequestId: string;
    protocolId: BigNumber;
    sponsorWallet: string;
    amount: BigNumber;
}
export type FulfilledWithdrawalEvent = TypedEvent<[
    string,
    string,
    string,
    BigNumber,
    string,
    BigNumber
], FulfilledWithdrawalEventObject>;
export type FulfilledWithdrawalEventFilter = TypedEventFilter<FulfilledWithdrawalEvent>;
export interface RequestedWithdrawalEventObject {
    airnodeOrRelayer: string;
    sponsor: string;
    withdrawalRequestId: string;
    protocolId: BigNumber;
}
export type RequestedWithdrawalEvent = TypedEvent<[
    string,
    string,
    string,
    BigNumber
], RequestedWithdrawalEventObject>;
export type RequestedWithdrawalEventFilter = TypedEventFilter<RequestedWithdrawalEvent>;
export interface WithdrawalUtils extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: WithdrawalUtilsInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        claimBalance(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        fulfillWithdrawal(withdrawalRequestId: PromiseOrValue<BytesLike>, airnodeOrRelayer: PromiseOrValue<string>, protocolId: PromiseOrValue<BigNumberish>, sponsor: PromiseOrValue<string>, timestamp: PromiseOrValue<BigNumberish>, signature: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        requestWithdrawal(airnodeOrRelayer: PromiseOrValue<string>, protocolId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sponsorToBalance(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        sponsorToWithdrawalRequestCount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        withdrawalRequestIsAwaitingFulfillment(withdrawalRequestId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    claimBalance(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    fulfillWithdrawal(withdrawalRequestId: PromiseOrValue<BytesLike>, airnodeOrRelayer: PromiseOrValue<string>, protocolId: PromiseOrValue<BigNumberish>, sponsor: PromiseOrValue<string>, timestamp: PromiseOrValue<BigNumberish>, signature: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    requestWithdrawal(airnodeOrRelayer: PromiseOrValue<string>, protocolId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sponsorToBalance(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    sponsorToWithdrawalRequestCount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    withdrawalRequestIsAwaitingFulfillment(withdrawalRequestId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        claimBalance(overrides?: CallOverrides): Promise<void>;
        fulfillWithdrawal(withdrawalRequestId: PromiseOrValue<BytesLike>, airnodeOrRelayer: PromiseOrValue<string>, protocolId: PromiseOrValue<BigNumberish>, sponsor: PromiseOrValue<string>, timestamp: PromiseOrValue<BigNumberish>, signature: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        requestWithdrawal(airnodeOrRelayer: PromiseOrValue<string>, protocolId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        sponsorToBalance(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        sponsorToWithdrawalRequestCount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        withdrawalRequestIsAwaitingFulfillment(withdrawalRequestId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "ClaimedBalance(address,uint256)"(sponsor?: PromiseOrValue<string> | null, amount?: null): ClaimedBalanceEventFilter;
        ClaimedBalance(sponsor?: PromiseOrValue<string> | null, amount?: null): ClaimedBalanceEventFilter;
        "FulfilledWithdrawal(address,address,bytes32,uint256,address,uint256)"(airnodeOrRelayer?: PromiseOrValue<string> | null, sponsor?: PromiseOrValue<string> | null, withdrawalRequestId?: PromiseOrValue<BytesLike> | null, protocolId?: null, sponsorWallet?: null, amount?: null): FulfilledWithdrawalEventFilter;
        FulfilledWithdrawal(airnodeOrRelayer?: PromiseOrValue<string> | null, sponsor?: PromiseOrValue<string> | null, withdrawalRequestId?: PromiseOrValue<BytesLike> | null, protocolId?: null, sponsorWallet?: null, amount?: null): FulfilledWithdrawalEventFilter;
        "RequestedWithdrawal(address,address,bytes32,uint256)"(airnodeOrRelayer?: PromiseOrValue<string> | null, sponsor?: PromiseOrValue<string> | null, withdrawalRequestId?: PromiseOrValue<BytesLike> | null, protocolId?: null): RequestedWithdrawalEventFilter;
        RequestedWithdrawal(airnodeOrRelayer?: PromiseOrValue<string> | null, sponsor?: PromiseOrValue<string> | null, withdrawalRequestId?: PromiseOrValue<BytesLike> | null, protocolId?: null): RequestedWithdrawalEventFilter;
    };
    estimateGas: {
        claimBalance(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        fulfillWithdrawal(withdrawalRequestId: PromiseOrValue<BytesLike>, airnodeOrRelayer: PromiseOrValue<string>, protocolId: PromiseOrValue<BigNumberish>, sponsor: PromiseOrValue<string>, timestamp: PromiseOrValue<BigNumberish>, signature: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        requestWithdrawal(airnodeOrRelayer: PromiseOrValue<string>, protocolId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sponsorToBalance(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        sponsorToWithdrawalRequestCount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        withdrawalRequestIsAwaitingFulfillment(withdrawalRequestId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        claimBalance(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        fulfillWithdrawal(withdrawalRequestId: PromiseOrValue<BytesLike>, airnodeOrRelayer: PromiseOrValue<string>, protocolId: PromiseOrValue<BigNumberish>, sponsor: PromiseOrValue<string>, timestamp: PromiseOrValue<BigNumberish>, signature: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        requestWithdrawal(airnodeOrRelayer: PromiseOrValue<string>, protocolId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sponsorToBalance(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        sponsorToWithdrawalRequestCount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawalRequestIsAwaitingFulfillment(withdrawalRequestId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
