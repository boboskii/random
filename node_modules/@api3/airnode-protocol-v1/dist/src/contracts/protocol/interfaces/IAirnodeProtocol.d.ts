import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";
export interface IAirnodeProtocolInterface extends utils.Interface {
    functions: {
        "MAXIMUM_PARAMETER_LENGTH()": FunctionFragment;
        "claimBalance()": FunctionFragment;
        "containsBytecode(address)": FunctionFragment;
        "failRequest(bytes32,address,address,bytes4,uint256,string,bytes)": FunctionFragment;
        "failRequestRelayed(bytes32,address,address,address,bytes4,uint256,string,bytes)": FunctionFragment;
        "fulfillRequest(bytes32,address,address,bytes4,uint256,bytes,bytes)": FunctionFragment;
        "fulfillRequestRelayed(bytes32,address,address,address,bytes4,uint256,bytes,bytes)": FunctionFragment;
        "fulfillWithdrawal(bytes32,address,uint256,address,uint256,bytes)": FunctionFragment;
        "getBalance(address)": FunctionFragment;
        "getBlockBasefee()": FunctionFragment;
        "getBlockNumber()": FunctionFragment;
        "getBlockTimestamp()": FunctionFragment;
        "getChainId()": FunctionFragment;
        "makeRequest(address,bytes32,bytes,address,bytes4)": FunctionFragment;
        "makeRequestRelayed(address,bytes32,bytes,address,address,bytes4)": FunctionFragment;
        "multicall(bytes[])": FunctionFragment;
        "requestIsAwaitingFulfillment(bytes32)": FunctionFragment;
        "requestWithdrawal(address,uint256)": FunctionFragment;
        "requesterToRequestCount(address)": FunctionFragment;
        "setPspSponsorshipStatus(bytes32,bool)": FunctionFragment;
        "setRrpSponsorshipStatus(address,bool)": FunctionFragment;
        "sponsorToBalance(address)": FunctionFragment;
        "sponsorToRequesterToRrpSponsorshipStatus(address,address)": FunctionFragment;
        "sponsorToSubscriptionIdToPspSponsorshipStatus(address,bytes32)": FunctionFragment;
        "sponsorToWithdrawalRequestCount(address)": FunctionFragment;
        "storeSubscription(uint256,address,bytes32,bytes,bytes,address,address,address,bytes4)": FunctionFragment;
        "storeTemplate(bytes32,bytes)": FunctionFragment;
        "subscriptions(bytes32)": FunctionFragment;
        "templates(bytes32)": FunctionFragment;
        "tryMulticall(bytes[])": FunctionFragment;
        "withdrawalRequestIsAwaitingFulfillment(bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "MAXIMUM_PARAMETER_LENGTH" | "claimBalance" | "containsBytecode" | "failRequest" | "failRequestRelayed" | "fulfillRequest" | "fulfillRequestRelayed" | "fulfillWithdrawal" | "getBalance" | "getBlockBasefee" | "getBlockNumber" | "getBlockTimestamp" | "getChainId" | "makeRequest" | "makeRequestRelayed" | "multicall" | "requestIsAwaitingFulfillment" | "requestWithdrawal" | "requesterToRequestCount" | "setPspSponsorshipStatus" | "setRrpSponsorshipStatus" | "sponsorToBalance" | "sponsorToRequesterToRrpSponsorshipStatus" | "sponsorToSubscriptionIdToPspSponsorshipStatus" | "sponsorToWithdrawalRequestCount" | "storeSubscription" | "storeTemplate" | "subscriptions" | "templates" | "tryMulticall" | "withdrawalRequestIsAwaitingFulfillment"): FunctionFragment;
    encodeFunctionData(functionFragment: "MAXIMUM_PARAMETER_LENGTH", values?: undefined): string;
    encodeFunctionData(functionFragment: "claimBalance", values?: undefined): string;
    encodeFunctionData(functionFragment: "containsBytecode", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "failRequest", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "failRequestRelayed", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "fulfillRequest", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "fulfillRequestRelayed", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "fulfillWithdrawal", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getBalance", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getBlockBasefee", values?: undefined): string;
    encodeFunctionData(functionFragment: "getBlockNumber", values?: undefined): string;
    encodeFunctionData(functionFragment: "getBlockTimestamp", values?: undefined): string;
    encodeFunctionData(functionFragment: "getChainId", values?: undefined): string;
    encodeFunctionData(functionFragment: "makeRequest", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "makeRequestRelayed", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "multicall", values: [PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "requestIsAwaitingFulfillment", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "requestWithdrawal", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "requesterToRequestCount", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPspSponsorshipStatus", values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setRrpSponsorshipStatus", values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "sponsorToBalance", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "sponsorToRequesterToRrpSponsorshipStatus", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "sponsorToSubscriptionIdToPspSponsorshipStatus", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "sponsorToWithdrawalRequestCount", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "storeSubscription", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "storeTemplate", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "subscriptions", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "templates", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "tryMulticall", values: [PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "withdrawalRequestIsAwaitingFulfillment", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "MAXIMUM_PARAMETER_LENGTH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "containsBytecode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "failRequest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "failRequestRelayed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fulfillRequest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fulfillRequestRelayed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fulfillWithdrawal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBlockBasefee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBlockNumber", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBlockTimestamp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "makeRequest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "makeRequestRelayed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requestIsAwaitingFulfillment", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requestWithdrawal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requesterToRequestCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPspSponsorshipStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRrpSponsorshipStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sponsorToBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sponsorToRequesterToRrpSponsorshipStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sponsorToSubscriptionIdToPspSponsorshipStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sponsorToWithdrawalRequestCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "storeSubscription", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "storeTemplate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "subscriptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "templates", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tryMulticall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawalRequestIsAwaitingFulfillment", data: BytesLike): Result;
    events: {
        "ClaimedBalance(address,uint256)": EventFragment;
        "FailedRequest(address,bytes32,uint256,string)": EventFragment;
        "FailedRequestRelayed(address,bytes32,address,uint256,string)": EventFragment;
        "FulfilledRequest(address,bytes32,uint256,bytes)": EventFragment;
        "FulfilledRequestRelayed(address,bytes32,address,uint256,bytes)": EventFragment;
        "FulfilledWithdrawal(address,address,bytes32,uint256,address,uint256)": EventFragment;
        "MadeRequest(address,bytes32,address,uint256,bytes32,bytes,address,bytes4)": EventFragment;
        "MadeRequestRelayed(address,bytes32,address,address,uint256,bytes32,bytes,address,bytes4)": EventFragment;
        "RequestedWithdrawal(address,address,bytes32,uint256)": EventFragment;
        "SetPspSponsorshipStatus(address,bytes32,bool)": EventFragment;
        "SetRrpSponsorshipStatus(address,address,bool)": EventFragment;
        "StoredSubscription(bytes32,uint256,address,bytes32,bytes,bytes,address,address,address,bytes4)": EventFragment;
        "StoredTemplate(bytes32,bytes32,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ClaimedBalance"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FailedRequest"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FailedRequestRelayed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FulfilledRequest"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FulfilledRequestRelayed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FulfilledWithdrawal"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MadeRequest"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MadeRequestRelayed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RequestedWithdrawal"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPspSponsorshipStatus"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetRrpSponsorshipStatus"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "StoredSubscription"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "StoredTemplate"): EventFragment;
}
export interface ClaimedBalanceEventObject {
    sponsor: string;
    amount: BigNumber;
}
export type ClaimedBalanceEvent = TypedEvent<[
    string,
    BigNumber
], ClaimedBalanceEventObject>;
export type ClaimedBalanceEventFilter = TypedEventFilter<ClaimedBalanceEvent>;
export interface FailedRequestEventObject {
    airnode: string;
    requestId: string;
    timestamp: BigNumber;
    errorMessage: string;
}
export type FailedRequestEvent = TypedEvent<[
    string,
    string,
    BigNumber,
    string
], FailedRequestEventObject>;
export type FailedRequestEventFilter = TypedEventFilter<FailedRequestEvent>;
export interface FailedRequestRelayedEventObject {
    relayer: string;
    requestId: string;
    airnode: string;
    timestamp: BigNumber;
    errorMessage: string;
}
export type FailedRequestRelayedEvent = TypedEvent<[
    string,
    string,
    string,
    BigNumber,
    string
], FailedRequestRelayedEventObject>;
export type FailedRequestRelayedEventFilter = TypedEventFilter<FailedRequestRelayedEvent>;
export interface FulfilledRequestEventObject {
    airnode: string;
    requestId: string;
    timestamp: BigNumber;
    data: string;
}
export type FulfilledRequestEvent = TypedEvent<[
    string,
    string,
    BigNumber,
    string
], FulfilledRequestEventObject>;
export type FulfilledRequestEventFilter = TypedEventFilter<FulfilledRequestEvent>;
export interface FulfilledRequestRelayedEventObject {
    relayer: string;
    requestId: string;
    airnode: string;
    timestamp: BigNumber;
    data: string;
}
export type FulfilledRequestRelayedEvent = TypedEvent<[
    string,
    string,
    string,
    BigNumber,
    string
], FulfilledRequestRelayedEventObject>;
export type FulfilledRequestRelayedEventFilter = TypedEventFilter<FulfilledRequestRelayedEvent>;
export interface FulfilledWithdrawalEventObject {
    airnodeOrRelayer: string;
    sponsor: string;
    withdrawalRequestId: string;
    protocolId: BigNumber;
    sponsorWallet: string;
    amount: BigNumber;
}
export type FulfilledWithdrawalEvent = TypedEvent<[
    string,
    string,
    string,
    BigNumber,
    string,
    BigNumber
], FulfilledWithdrawalEventObject>;
export type FulfilledWithdrawalEventFilter = TypedEventFilter<FulfilledWithdrawalEvent>;
export interface MadeRequestEventObject {
    airnode: string;
    requestId: string;
    requester: string;
    requesterRequestCount: BigNumber;
    endpointOrTemplateId: string;
    parameters: string;
    sponsor: string;
    fulfillFunctionId: string;
}
export type MadeRequestEvent = TypedEvent<[
    string,
    string,
    string,
    BigNumber,
    string,
    string,
    string,
    string
], MadeRequestEventObject>;
export type MadeRequestEventFilter = TypedEventFilter<MadeRequestEvent>;
export interface MadeRequestRelayedEventObject {
    relayer: string;
    requestId: string;
    airnode: string;
    requester: string;
    requesterRequestCount: BigNumber;
    endpointOrTemplateId: string;
    parameters: string;
    sponsor: string;
    fulfillFunctionId: string;
}
export type MadeRequestRelayedEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    BigNumber,
    string,
    string,
    string,
    string
], MadeRequestRelayedEventObject>;
export type MadeRequestRelayedEventFilter = TypedEventFilter<MadeRequestRelayedEvent>;
export interface RequestedWithdrawalEventObject {
    airnodeOrRelayer: string;
    sponsor: string;
    withdrawalRequestId: string;
    protocolId: BigNumber;
}
export type RequestedWithdrawalEvent = TypedEvent<[
    string,
    string,
    string,
    BigNumber
], RequestedWithdrawalEventObject>;
export type RequestedWithdrawalEventFilter = TypedEventFilter<RequestedWithdrawalEvent>;
export interface SetPspSponsorshipStatusEventObject {
    sponsor: string;
    subscriptionId: string;
    status: boolean;
}
export type SetPspSponsorshipStatusEvent = TypedEvent<[
    string,
    string,
    boolean
], SetPspSponsorshipStatusEventObject>;
export type SetPspSponsorshipStatusEventFilter = TypedEventFilter<SetPspSponsorshipStatusEvent>;
export interface SetRrpSponsorshipStatusEventObject {
    sponsor: string;
    requester: string;
    status: boolean;
}
export type SetRrpSponsorshipStatusEvent = TypedEvent<[
    string,
    string,
    boolean
], SetRrpSponsorshipStatusEventObject>;
export type SetRrpSponsorshipStatusEventFilter = TypedEventFilter<SetRrpSponsorshipStatusEvent>;
export interface StoredSubscriptionEventObject {
    subscriptionId: string;
    chainId: BigNumber;
    airnode: string;
    endpointOrTemplateId: string;
    parameters: string;
    conditions: string;
    relayer: string;
    sponsor: string;
    requester: string;
    fulfillFunctionId: string;
}
export type StoredSubscriptionEvent = TypedEvent<[
    string,
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string
], StoredSubscriptionEventObject>;
export type StoredSubscriptionEventFilter = TypedEventFilter<StoredSubscriptionEvent>;
export interface StoredTemplateEventObject {
    templateId: string;
    endpointId: string;
    parameters: string;
}
export type StoredTemplateEvent = TypedEvent<[
    string,
    string,
    string
], StoredTemplateEventObject>;
export type StoredTemplateEventFilter = TypedEventFilter<StoredTemplateEvent>;
export interface IAirnodeProtocol extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IAirnodeProtocolInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        MAXIMUM_PARAMETER_LENGTH(overrides?: CallOverrides): Promise<[BigNumber]>;
        claimBalance(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        containsBytecode(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        failRequest(requestId: PromiseOrValue<BytesLike>, airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, errorMessage: PromiseOrValue<string>, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        failRequestRelayed(requestId: PromiseOrValue<BytesLike>, airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, relayer: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, errorMessage: PromiseOrValue<string>, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        fulfillRequest(requestId: PromiseOrValue<BytesLike>, airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        fulfillRequestRelayed(requestId: PromiseOrValue<BytesLike>, airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, relayer: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        fulfillWithdrawal(withdrawalRequestId: PromiseOrValue<BytesLike>, airnodeOrRelayer: PromiseOrValue<string>, protocolId: PromiseOrValue<BigNumberish>, sponsor: PromiseOrValue<string>, timestamp: PromiseOrValue<BigNumberish>, signature: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getBalance(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getBlockBasefee(overrides?: CallOverrides): Promise<[BigNumber]>;
        getBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;
        getBlockTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;
        getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;
        makeRequest(airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, sponsor: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        makeRequestRelayed(airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        requestIsAwaitingFulfillment(requestId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        requestWithdrawal(airnodeOrRelayer: PromiseOrValue<string>, protocolId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        requesterToRequestCount(requester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        setPspSponsorshipStatus(subscriptionId: PromiseOrValue<BytesLike>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setRrpSponsorshipStatus(requester: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sponsorToBalance(sponsor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        sponsorToRequesterToRrpSponsorshipStatus(sponsor: PromiseOrValue<string>, requester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean] & {
            status: boolean;
        }>;
        sponsorToSubscriptionIdToPspSponsorshipStatus(sponsor: PromiseOrValue<string>, subscriptionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean] & {
            status: boolean;
        }>;
        sponsorToWithdrawalRequestCount(sponsor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        storeSubscription(chainId: PromiseOrValue<BigNumberish>, airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, conditions: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, requester: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        storeTemplate(endpointId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        subscriptions(subscriptionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string
        ] & {
            chainId: BigNumber;
            airnode: string;
            endpointOrTemplateId: string;
            parameters: string;
            conditions: string;
            relayer: string;
            sponsor: string;
            requester: string;
            fulfillFunctionId: string;
        }>;
        templates(templateId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string, string] & {
            endpointId: string;
            parameters: string;
        }>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawalRequestIsAwaitingFulfillment(withdrawalRequestId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    MAXIMUM_PARAMETER_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;
    claimBalance(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    containsBytecode(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    failRequest(requestId: PromiseOrValue<BytesLike>, airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, errorMessage: PromiseOrValue<string>, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    failRequestRelayed(requestId: PromiseOrValue<BytesLike>, airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, relayer: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, errorMessage: PromiseOrValue<string>, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    fulfillRequest(requestId: PromiseOrValue<BytesLike>, airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    fulfillRequestRelayed(requestId: PromiseOrValue<BytesLike>, airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, relayer: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    fulfillWithdrawal(withdrawalRequestId: PromiseOrValue<BytesLike>, airnodeOrRelayer: PromiseOrValue<string>, protocolId: PromiseOrValue<BigNumberish>, sponsor: PromiseOrValue<string>, timestamp: PromiseOrValue<BigNumberish>, signature: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getBalance(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    getBlockBasefee(overrides?: CallOverrides): Promise<BigNumber>;
    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;
    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;
    getChainId(overrides?: CallOverrides): Promise<BigNumber>;
    makeRequest(airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, sponsor: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    makeRequestRelayed(airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    requestIsAwaitingFulfillment(requestId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    requestWithdrawal(airnodeOrRelayer: PromiseOrValue<string>, protocolId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    requesterToRequestCount(requester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    setPspSponsorshipStatus(subscriptionId: PromiseOrValue<BytesLike>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setRrpSponsorshipStatus(requester: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sponsorToBalance(sponsor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    sponsorToRequesterToRrpSponsorshipStatus(sponsor: PromiseOrValue<string>, requester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    sponsorToSubscriptionIdToPspSponsorshipStatus(sponsor: PromiseOrValue<string>, subscriptionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    sponsorToWithdrawalRequestCount(sponsor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    storeSubscription(chainId: PromiseOrValue<BigNumberish>, airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, conditions: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, requester: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    storeTemplate(endpointId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    subscriptions(subscriptionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
        BigNumber,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
    ] & {
        chainId: BigNumber;
        airnode: string;
        endpointOrTemplateId: string;
        parameters: string;
        conditions: string;
        relayer: string;
        sponsor: string;
        requester: string;
        fulfillFunctionId: string;
    }>;
    templates(templateId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string, string] & {
        endpointId: string;
        parameters: string;
    }>;
    tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawalRequestIsAwaitingFulfillment(withdrawalRequestId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        MAXIMUM_PARAMETER_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;
        claimBalance(overrides?: CallOverrides): Promise<void>;
        containsBytecode(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        failRequest(requestId: PromiseOrValue<BytesLike>, airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, errorMessage: PromiseOrValue<string>, signature: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        failRequestRelayed(requestId: PromiseOrValue<BytesLike>, airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, relayer: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, errorMessage: PromiseOrValue<string>, signature: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        fulfillRequest(requestId: PromiseOrValue<BytesLike>, airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, signature: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean, string] & {
            callSuccess: boolean;
            callData: string;
        }>;
        fulfillRequestRelayed(requestId: PromiseOrValue<BytesLike>, airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, relayer: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, signature: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean, string] & {
            callSuccess: boolean;
            callData: string;
        }>;
        fulfillWithdrawal(withdrawalRequestId: PromiseOrValue<BytesLike>, airnodeOrRelayer: PromiseOrValue<string>, protocolId: PromiseOrValue<BigNumberish>, sponsor: PromiseOrValue<string>, timestamp: PromiseOrValue<BigNumberish>, signature: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        getBalance(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getBlockBasefee(overrides?: CallOverrides): Promise<BigNumber>;
        getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;
        getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;
        getChainId(overrides?: CallOverrides): Promise<BigNumber>;
        makeRequest(airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, sponsor: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        makeRequestRelayed(airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string[]>;
        requestIsAwaitingFulfillment(requestId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        requestWithdrawal(airnodeOrRelayer: PromiseOrValue<string>, protocolId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        requesterToRequestCount(requester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        setPspSponsorshipStatus(subscriptionId: PromiseOrValue<BytesLike>, status: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setRrpSponsorshipStatus(requester: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        sponsorToBalance(sponsor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        sponsorToRequesterToRrpSponsorshipStatus(sponsor: PromiseOrValue<string>, requester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        sponsorToSubscriptionIdToPspSponsorshipStatus(sponsor: PromiseOrValue<string>, subscriptionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        sponsorToWithdrawalRequestCount(sponsor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        storeSubscription(chainId: PromiseOrValue<BigNumberish>, airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, conditions: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, requester: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        storeTemplate(endpointId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        subscriptions(subscriptionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string
        ] & {
            chainId: BigNumber;
            airnode: string;
            endpointOrTemplateId: string;
            parameters: string;
            conditions: string;
            relayer: string;
            sponsor: string;
            requester: string;
            fulfillFunctionId: string;
        }>;
        templates(templateId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string, string] & {
            endpointId: string;
            parameters: string;
        }>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[
            boolean[],
            string[]
        ] & {
            successes: boolean[];
            returndata: string[];
        }>;
        withdrawalRequestIsAwaitingFulfillment(withdrawalRequestId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "ClaimedBalance(address,uint256)"(sponsor?: PromiseOrValue<string> | null, amount?: null): ClaimedBalanceEventFilter;
        ClaimedBalance(sponsor?: PromiseOrValue<string> | null, amount?: null): ClaimedBalanceEventFilter;
        "FailedRequest(address,bytes32,uint256,string)"(airnode?: PromiseOrValue<string> | null, requestId?: PromiseOrValue<BytesLike> | null, timestamp?: null, errorMessage?: null): FailedRequestEventFilter;
        FailedRequest(airnode?: PromiseOrValue<string> | null, requestId?: PromiseOrValue<BytesLike> | null, timestamp?: null, errorMessage?: null): FailedRequestEventFilter;
        "FailedRequestRelayed(address,bytes32,address,uint256,string)"(relayer?: PromiseOrValue<string> | null, requestId?: PromiseOrValue<BytesLike> | null, airnode?: PromiseOrValue<string> | null, timestamp?: null, errorMessage?: null): FailedRequestRelayedEventFilter;
        FailedRequestRelayed(relayer?: PromiseOrValue<string> | null, requestId?: PromiseOrValue<BytesLike> | null, airnode?: PromiseOrValue<string> | null, timestamp?: null, errorMessage?: null): FailedRequestRelayedEventFilter;
        "FulfilledRequest(address,bytes32,uint256,bytes)"(airnode?: PromiseOrValue<string> | null, requestId?: PromiseOrValue<BytesLike> | null, timestamp?: null, data?: null): FulfilledRequestEventFilter;
        FulfilledRequest(airnode?: PromiseOrValue<string> | null, requestId?: PromiseOrValue<BytesLike> | null, timestamp?: null, data?: null): FulfilledRequestEventFilter;
        "FulfilledRequestRelayed(address,bytes32,address,uint256,bytes)"(relayer?: PromiseOrValue<string> | null, requestId?: PromiseOrValue<BytesLike> | null, airnode?: PromiseOrValue<string> | null, timestamp?: null, data?: null): FulfilledRequestRelayedEventFilter;
        FulfilledRequestRelayed(relayer?: PromiseOrValue<string> | null, requestId?: PromiseOrValue<BytesLike> | null, airnode?: PromiseOrValue<string> | null, timestamp?: null, data?: null): FulfilledRequestRelayedEventFilter;
        "FulfilledWithdrawal(address,address,bytes32,uint256,address,uint256)"(airnodeOrRelayer?: PromiseOrValue<string> | null, sponsor?: PromiseOrValue<string> | null, withdrawalRequestId?: PromiseOrValue<BytesLike> | null, protocolId?: null, sponsorWallet?: null, amount?: null): FulfilledWithdrawalEventFilter;
        FulfilledWithdrawal(airnodeOrRelayer?: PromiseOrValue<string> | null, sponsor?: PromiseOrValue<string> | null, withdrawalRequestId?: PromiseOrValue<BytesLike> | null, protocolId?: null, sponsorWallet?: null, amount?: null): FulfilledWithdrawalEventFilter;
        "MadeRequest(address,bytes32,address,uint256,bytes32,bytes,address,bytes4)"(airnode?: PromiseOrValue<string> | null, requestId?: PromiseOrValue<BytesLike> | null, requester?: null, requesterRequestCount?: null, endpointOrTemplateId?: null, parameters?: null, sponsor?: null, fulfillFunctionId?: null): MadeRequestEventFilter;
        MadeRequest(airnode?: PromiseOrValue<string> | null, requestId?: PromiseOrValue<BytesLike> | null, requester?: null, requesterRequestCount?: null, endpointOrTemplateId?: null, parameters?: null, sponsor?: null, fulfillFunctionId?: null): MadeRequestEventFilter;
        "MadeRequestRelayed(address,bytes32,address,address,uint256,bytes32,bytes,address,bytes4)"(relayer?: PromiseOrValue<string> | null, requestId?: PromiseOrValue<BytesLike> | null, airnode?: PromiseOrValue<string> | null, requester?: null, requesterRequestCount?: null, endpointOrTemplateId?: null, parameters?: null, sponsor?: null, fulfillFunctionId?: null): MadeRequestRelayedEventFilter;
        MadeRequestRelayed(relayer?: PromiseOrValue<string> | null, requestId?: PromiseOrValue<BytesLike> | null, airnode?: PromiseOrValue<string> | null, requester?: null, requesterRequestCount?: null, endpointOrTemplateId?: null, parameters?: null, sponsor?: null, fulfillFunctionId?: null): MadeRequestRelayedEventFilter;
        "RequestedWithdrawal(address,address,bytes32,uint256)"(airnodeOrRelayer?: PromiseOrValue<string> | null, sponsor?: PromiseOrValue<string> | null, withdrawalRequestId?: PromiseOrValue<BytesLike> | null, protocolId?: null): RequestedWithdrawalEventFilter;
        RequestedWithdrawal(airnodeOrRelayer?: PromiseOrValue<string> | null, sponsor?: PromiseOrValue<string> | null, withdrawalRequestId?: PromiseOrValue<BytesLike> | null, protocolId?: null): RequestedWithdrawalEventFilter;
        "SetPspSponsorshipStatus(address,bytes32,bool)"(sponsor?: PromiseOrValue<string> | null, subscriptionId?: PromiseOrValue<BytesLike> | null, status?: null): SetPspSponsorshipStatusEventFilter;
        SetPspSponsorshipStatus(sponsor?: PromiseOrValue<string> | null, subscriptionId?: PromiseOrValue<BytesLike> | null, status?: null): SetPspSponsorshipStatusEventFilter;
        "SetRrpSponsorshipStatus(address,address,bool)"(sponsor?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, status?: null): SetRrpSponsorshipStatusEventFilter;
        SetRrpSponsorshipStatus(sponsor?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, status?: null): SetRrpSponsorshipStatusEventFilter;
        "StoredSubscription(bytes32,uint256,address,bytes32,bytes,bytes,address,address,address,bytes4)"(subscriptionId?: PromiseOrValue<BytesLike> | null, chainId?: null, airnode?: null, endpointOrTemplateId?: null, parameters?: null, conditions?: null, relayer?: null, sponsor?: null, requester?: null, fulfillFunctionId?: null): StoredSubscriptionEventFilter;
        StoredSubscription(subscriptionId?: PromiseOrValue<BytesLike> | null, chainId?: null, airnode?: null, endpointOrTemplateId?: null, parameters?: null, conditions?: null, relayer?: null, sponsor?: null, requester?: null, fulfillFunctionId?: null): StoredSubscriptionEventFilter;
        "StoredTemplate(bytes32,bytes32,bytes)"(templateId?: PromiseOrValue<BytesLike> | null, endpointId?: null, parameters?: null): StoredTemplateEventFilter;
        StoredTemplate(templateId?: PromiseOrValue<BytesLike> | null, endpointId?: null, parameters?: null): StoredTemplateEventFilter;
    };
    estimateGas: {
        MAXIMUM_PARAMETER_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;
        claimBalance(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        containsBytecode(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        failRequest(requestId: PromiseOrValue<BytesLike>, airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, errorMessage: PromiseOrValue<string>, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        failRequestRelayed(requestId: PromiseOrValue<BytesLike>, airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, relayer: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, errorMessage: PromiseOrValue<string>, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        fulfillRequest(requestId: PromiseOrValue<BytesLike>, airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        fulfillRequestRelayed(requestId: PromiseOrValue<BytesLike>, airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, relayer: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        fulfillWithdrawal(withdrawalRequestId: PromiseOrValue<BytesLike>, airnodeOrRelayer: PromiseOrValue<string>, protocolId: PromiseOrValue<BigNumberish>, sponsor: PromiseOrValue<string>, timestamp: PromiseOrValue<BigNumberish>, signature: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getBalance(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getBlockBasefee(overrides?: CallOverrides): Promise<BigNumber>;
        getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;
        getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;
        getChainId(overrides?: CallOverrides): Promise<BigNumber>;
        makeRequest(airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, sponsor: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        makeRequestRelayed(airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        requestIsAwaitingFulfillment(requestId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        requestWithdrawal(airnodeOrRelayer: PromiseOrValue<string>, protocolId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        requesterToRequestCount(requester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        setPspSponsorshipStatus(subscriptionId: PromiseOrValue<BytesLike>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setRrpSponsorshipStatus(requester: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sponsorToBalance(sponsor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        sponsorToRequesterToRrpSponsorshipStatus(sponsor: PromiseOrValue<string>, requester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        sponsorToSubscriptionIdToPspSponsorshipStatus(sponsor: PromiseOrValue<string>, subscriptionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        sponsorToWithdrawalRequestCount(sponsor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        storeSubscription(chainId: PromiseOrValue<BigNumberish>, airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, conditions: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, requester: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        storeTemplate(endpointId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        subscriptions(subscriptionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        templates(templateId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawalRequestIsAwaitingFulfillment(withdrawalRequestId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        MAXIMUM_PARAMETER_LENGTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        claimBalance(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        containsBytecode(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        failRequest(requestId: PromiseOrValue<BytesLike>, airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, errorMessage: PromiseOrValue<string>, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        failRequestRelayed(requestId: PromiseOrValue<BytesLike>, airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, relayer: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, errorMessage: PromiseOrValue<string>, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        fulfillRequest(requestId: PromiseOrValue<BytesLike>, airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        fulfillRequestRelayed(requestId: PromiseOrValue<BytesLike>, airnode: PromiseOrValue<string>, requester: PromiseOrValue<string>, relayer: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, timestamp: PromiseOrValue<BigNumberish>, data: PromiseOrValue<BytesLike>, signature: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        fulfillWithdrawal(withdrawalRequestId: PromiseOrValue<BytesLike>, airnodeOrRelayer: PromiseOrValue<string>, protocolId: PromiseOrValue<BigNumberish>, sponsor: PromiseOrValue<string>, timestamp: PromiseOrValue<BigNumberish>, signature: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getBalance(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getBlockBasefee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getBlockTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        makeRequest(airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, sponsor: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        makeRequestRelayed(airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        requestIsAwaitingFulfillment(requestId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        requestWithdrawal(airnodeOrRelayer: PromiseOrValue<string>, protocolId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        requesterToRequestCount(requester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setPspSponsorshipStatus(subscriptionId: PromiseOrValue<BytesLike>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setRrpSponsorshipStatus(requester: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sponsorToBalance(sponsor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        sponsorToRequesterToRrpSponsorshipStatus(sponsor: PromiseOrValue<string>, requester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        sponsorToSubscriptionIdToPspSponsorshipStatus(sponsor: PromiseOrValue<string>, subscriptionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        sponsorToWithdrawalRequestCount(sponsor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        storeSubscription(chainId: PromiseOrValue<BigNumberish>, airnode: PromiseOrValue<string>, endpointOrTemplateId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, conditions: PromiseOrValue<BytesLike>, relayer: PromiseOrValue<string>, sponsor: PromiseOrValue<string>, requester: PromiseOrValue<string>, fulfillFunctionId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        storeTemplate(endpointId: PromiseOrValue<BytesLike>, parameters: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        subscriptions(subscriptionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        templates(templateId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        tryMulticall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawalRequestIsAwaitingFulfillment(withdrawalRequestId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
