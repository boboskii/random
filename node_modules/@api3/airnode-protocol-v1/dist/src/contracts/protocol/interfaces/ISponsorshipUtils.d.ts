import type { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";
export interface ISponsorshipUtilsInterface extends utils.Interface {
    functions: {
        "setPspSponsorshipStatus(bytes32,bool)": FunctionFragment;
        "setRrpSponsorshipStatus(address,bool)": FunctionFragment;
        "sponsorToRequesterToRrpSponsorshipStatus(address,address)": FunctionFragment;
        "sponsorToSubscriptionIdToPspSponsorshipStatus(address,bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "setPspSponsorshipStatus" | "setRrpSponsorshipStatus" | "sponsorToRequesterToRrpSponsorshipStatus" | "sponsorToSubscriptionIdToPspSponsorshipStatus"): FunctionFragment;
    encodeFunctionData(functionFragment: "setPspSponsorshipStatus", values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setRrpSponsorshipStatus", values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "sponsorToRequesterToRrpSponsorshipStatus", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "sponsorToSubscriptionIdToPspSponsorshipStatus", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "setPspSponsorshipStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRrpSponsorshipStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sponsorToRequesterToRrpSponsorshipStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sponsorToSubscriptionIdToPspSponsorshipStatus", data: BytesLike): Result;
    events: {
        "SetPspSponsorshipStatus(address,bytes32,bool)": EventFragment;
        "SetRrpSponsorshipStatus(address,address,bool)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "SetPspSponsorshipStatus"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetRrpSponsorshipStatus"): EventFragment;
}
export interface SetPspSponsorshipStatusEventObject {
    sponsor: string;
    subscriptionId: string;
    status: boolean;
}
export type SetPspSponsorshipStatusEvent = TypedEvent<[
    string,
    string,
    boolean
], SetPspSponsorshipStatusEventObject>;
export type SetPspSponsorshipStatusEventFilter = TypedEventFilter<SetPspSponsorshipStatusEvent>;
export interface SetRrpSponsorshipStatusEventObject {
    sponsor: string;
    requester: string;
    status: boolean;
}
export type SetRrpSponsorshipStatusEvent = TypedEvent<[
    string,
    string,
    boolean
], SetRrpSponsorshipStatusEventObject>;
export type SetRrpSponsorshipStatusEventFilter = TypedEventFilter<SetRrpSponsorshipStatusEvent>;
export interface ISponsorshipUtils extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ISponsorshipUtilsInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        setPspSponsorshipStatus(subscriptionId: PromiseOrValue<BytesLike>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setRrpSponsorshipStatus(requester: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sponsorToRequesterToRrpSponsorshipStatus(sponsor: PromiseOrValue<string>, requester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean] & {
            status: boolean;
        }>;
        sponsorToSubscriptionIdToPspSponsorshipStatus(sponsor: PromiseOrValue<string>, subscriptionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean] & {
            status: boolean;
        }>;
    };
    setPspSponsorshipStatus(subscriptionId: PromiseOrValue<BytesLike>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setRrpSponsorshipStatus(requester: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sponsorToRequesterToRrpSponsorshipStatus(sponsor: PromiseOrValue<string>, requester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    sponsorToSubscriptionIdToPspSponsorshipStatus(sponsor: PromiseOrValue<string>, subscriptionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        setPspSponsorshipStatus(subscriptionId: PromiseOrValue<BytesLike>, status: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setRrpSponsorshipStatus(requester: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        sponsorToRequesterToRrpSponsorshipStatus(sponsor: PromiseOrValue<string>, requester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        sponsorToSubscriptionIdToPspSponsorshipStatus(sponsor: PromiseOrValue<string>, subscriptionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "SetPspSponsorshipStatus(address,bytes32,bool)"(sponsor?: PromiseOrValue<string> | null, subscriptionId?: PromiseOrValue<BytesLike> | null, status?: null): SetPspSponsorshipStatusEventFilter;
        SetPspSponsorshipStatus(sponsor?: PromiseOrValue<string> | null, subscriptionId?: PromiseOrValue<BytesLike> | null, status?: null): SetPspSponsorshipStatusEventFilter;
        "SetRrpSponsorshipStatus(address,address,bool)"(sponsor?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, status?: null): SetRrpSponsorshipStatusEventFilter;
        SetRrpSponsorshipStatus(sponsor?: PromiseOrValue<string> | null, requester?: PromiseOrValue<string> | null, status?: null): SetRrpSponsorshipStatusEventFilter;
    };
    estimateGas: {
        setPspSponsorshipStatus(subscriptionId: PromiseOrValue<BytesLike>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setRrpSponsorshipStatus(requester: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sponsorToRequesterToRrpSponsorshipStatus(sponsor: PromiseOrValue<string>, requester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        sponsorToSubscriptionIdToPspSponsorshipStatus(sponsor: PromiseOrValue<string>, subscriptionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        setPspSponsorshipStatus(subscriptionId: PromiseOrValue<BytesLike>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setRrpSponsorshipStatus(requester: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sponsorToRequesterToRrpSponsorshipStatus(sponsor: PromiseOrValue<string>, requester: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        sponsorToSubscriptionIdToPspSponsorshipStatus(sponsor: PromiseOrValue<string>, subscriptionId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
