import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { ITemplateUtilsV0, ITemplateUtilsV0Interface } from "../../../rrp/interfaces/ITemplateUtilsV0";
export declare class ITemplateUtilsV0__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "templateId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "airnode";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "endpointId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "parameters";
            readonly type: "bytes";
        }];
        readonly name: "CreatedTemplate";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "airnode";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "endpointId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "parameters";
            readonly type: "bytes";
        }];
        readonly name: "createTemplate";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "templateId";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "templateIds";
            readonly type: "bytes32[]";
        }];
        readonly name: "getTemplates";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "airnodes";
            readonly type: "address[]";
        }, {
            readonly internalType: "bytes32[]";
            readonly name: "endpointIds";
            readonly type: "bytes32[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "parameters";
            readonly type: "bytes[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "templateId";
            readonly type: "bytes32";
        }];
        readonly name: "templates";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "airnode";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "endpointId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "parameters";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ITemplateUtilsV0Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): ITemplateUtilsV0;
}
//# sourceMappingURL=ITemplateUtilsV0__factory.d.ts.map