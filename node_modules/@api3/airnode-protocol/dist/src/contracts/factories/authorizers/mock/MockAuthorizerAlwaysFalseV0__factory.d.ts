import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockAuthorizerAlwaysFalseV0, MockAuthorizerAlwaysFalseV0Interface } from "../../../authorizers/mock/MockAuthorizerAlwaysFalseV0";
type MockAuthorizerAlwaysFalseV0ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MockAuthorizerAlwaysFalseV0__factory extends ContractFactory {
    constructor(...args: MockAuthorizerAlwaysFalseV0ConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string;
    }): Promise<MockAuthorizerAlwaysFalseV0>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): MockAuthorizerAlwaysFalseV0;
    connect(signer: Signer): MockAuthorizerAlwaysFalseV0__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50610105806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806329b915b314602d575b600080fd5b60436038366004607f565b600095945050505050565b604051901515815260200160405180910390f35b803573ffffffffffffffffffffffffffffffffffffffff81168114607a57600080fd5b919050565b600080600080600060a08688031215609657600080fd5b8535945060a4602087016057565b93506040860135925060b7606087016057565b915060c3608087016057565b9050929550929590935056fea2646970667358221220dd83f4a15448f86b0d8df2dda100cda70617fa0f3004af605916b7f9dceb1cd264736f6c63430008090033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "requestId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "airnode";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "endpointId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "sponsor";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "requester";
            readonly type: "address";
        }];
        readonly name: "isAuthorizedV0";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "status";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): MockAuthorizerAlwaysFalseV0Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): MockAuthorizerAlwaysFalseV0;
}
export {};
//# sourceMappingURL=MockAuthorizerAlwaysFalseV0__factory.d.ts.map