"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockAuthorizerAlwaysTrueV0__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "requestId",
                type: "bytes32",
            },
            {
                internalType: "address",
                name: "airnode",
                type: "address",
            },
            {
                internalType: "bytes32",
                name: "endpointId",
                type: "bytes32",
            },
            {
                internalType: "address",
                name: "sponsor",
                type: "address",
            },
            {
                internalType: "address",
                name: "requester",
                type: "address",
            },
        ],
        name: "isAuthorizedV0",
        outputs: [
            {
                internalType: "bool",
                name: "status",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b50610105806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806329b915b314602d575b600080fd5b60436038366004607f565b506001949350505050565b604051901515815260200160405180910390f35b803573ffffffffffffffffffffffffffffffffffffffff81168114607a57600080fd5b919050565b600080600080600060a08688031215609657600080fd5b8535945060a4602087016057565b93506040860135925060b7606087016057565b915060c3608087016057565b9050929550929590935056fea2646970667358221220600b4cafa06f79d3195b9a26cd00efec81804ac72486b51688bf32c0a3cd66aa64736f6c63430008090033";
const isSuperArgs = (xs) => xs.length > 1;
class MockAuthorizerAlwaysTrueV0__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.MockAuthorizerAlwaysTrueV0__factory = MockAuthorizerAlwaysTrueV0__factory;
MockAuthorizerAlwaysTrueV0__factory.bytecode = _bytecode;
MockAuthorizerAlwaysTrueV0__factory.abi = _abi;
//# sourceMappingURL=MockAuthorizerAlwaysTrueV0__factory.js.map