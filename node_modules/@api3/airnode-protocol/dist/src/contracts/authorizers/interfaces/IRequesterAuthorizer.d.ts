import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../common";
export interface IRequesterAuthorizerInterface extends utils.Interface {
    functions: {
        "airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus(address,bytes32,address,address)": FunctionFragment;
        "airnodeToEndpointIdToRequesterToWhitelistStatus(address,bytes32,address)": FunctionFragment;
        "extendWhitelistExpiration(address,bytes32,address,uint64)": FunctionFragment;
        "isAuthorized(address,bytes32,address)": FunctionFragment;
        "isAuthorizedV0(bytes32,address,bytes32,address,address)": FunctionFragment;
        "revokeIndefiniteWhitelistStatus(address,bytes32,address,address)": FunctionFragment;
        "setIndefiniteWhitelistStatus(address,bytes32,address,bool)": FunctionFragment;
        "setWhitelistExpiration(address,bytes32,address,uint64)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus" | "airnodeToEndpointIdToRequesterToWhitelistStatus" | "extendWhitelistExpiration" | "isAuthorized" | "isAuthorizedV0" | "revokeIndefiniteWhitelistStatus" | "setIndefiniteWhitelistStatus" | "setWhitelistExpiration"): FunctionFragment;
    encodeFunctionData(functionFragment: "airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus", values: [string, BytesLike, string, string]): string;
    encodeFunctionData(functionFragment: "airnodeToEndpointIdToRequesterToWhitelistStatus", values: [string, BytesLike, string]): string;
    encodeFunctionData(functionFragment: "extendWhitelistExpiration", values: [string, BytesLike, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isAuthorized", values: [string, BytesLike, string]): string;
    encodeFunctionData(functionFragment: "isAuthorizedV0", values: [BytesLike, string, BytesLike, string, string]): string;
    encodeFunctionData(functionFragment: "revokeIndefiniteWhitelistStatus", values: [string, BytesLike, string, string]): string;
    encodeFunctionData(functionFragment: "setIndefiniteWhitelistStatus", values: [string, BytesLike, string, boolean]): string;
    encodeFunctionData(functionFragment: "setWhitelistExpiration", values: [string, BytesLike, string, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "airnodeToEndpointIdToRequesterToWhitelistStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "extendWhitelistExpiration", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAuthorized", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAuthorizedV0", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeIndefiniteWhitelistStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setIndefiniteWhitelistStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWhitelistExpiration", data: BytesLike): Result;
    events: {
        "ExtendedWhitelistExpiration(address,bytes32,address,address,uint256)": EventFragment;
        "RevokedIndefiniteWhitelistStatus(address,bytes32,address,address,address,uint192)": EventFragment;
        "SetIndefiniteWhitelistStatus(address,bytes32,address,address,bool,uint192)": EventFragment;
        "SetWhitelistExpiration(address,bytes32,address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ExtendedWhitelistExpiration"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RevokedIndefiniteWhitelistStatus"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetIndefiniteWhitelistStatus"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWhitelistExpiration"): EventFragment;
}
export interface ExtendedWhitelistExpirationEventObject {
    airnode: string;
    endpointId: string;
    requester: string;
    sender: string;
    expiration: BigNumber;
}
export type ExtendedWhitelistExpirationEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    BigNumber
], ExtendedWhitelistExpirationEventObject>;
export type ExtendedWhitelistExpirationEventFilter = TypedEventFilter<ExtendedWhitelistExpirationEvent>;
export interface RevokedIndefiniteWhitelistStatusEventObject {
    airnode: string;
    endpointId: string;
    requester: string;
    setter: string;
    sender: string;
    indefiniteWhitelistCount: BigNumber;
}
export type RevokedIndefiniteWhitelistStatusEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    string,
    BigNumber
], RevokedIndefiniteWhitelistStatusEventObject>;
export type RevokedIndefiniteWhitelistStatusEventFilter = TypedEventFilter<RevokedIndefiniteWhitelistStatusEvent>;
export interface SetIndefiniteWhitelistStatusEventObject {
    airnode: string;
    endpointId: string;
    requester: string;
    sender: string;
    status: boolean;
    indefiniteWhitelistCount: BigNumber;
}
export type SetIndefiniteWhitelistStatusEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    boolean,
    BigNumber
], SetIndefiniteWhitelistStatusEventObject>;
export type SetIndefiniteWhitelistStatusEventFilter = TypedEventFilter<SetIndefiniteWhitelistStatusEvent>;
export interface SetWhitelistExpirationEventObject {
    airnode: string;
    endpointId: string;
    requester: string;
    sender: string;
    expiration: BigNumber;
}
export type SetWhitelistExpirationEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    BigNumber
], SetWhitelistExpirationEventObject>;
export type SetWhitelistExpirationEventFilter = TypedEventFilter<SetWhitelistExpirationEvent>;
export interface IRequesterAuthorizer extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IRequesterAuthorizerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus(airnode: string, endpointId: BytesLike, requester: string, setter: string, overrides?: CallOverrides): Promise<[boolean] & {
            indefiniteWhitelistStatus: boolean;
        }>;
        airnodeToEndpointIdToRequesterToWhitelistStatus(airnode: string, endpointId: BytesLike, requester: string, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            expirationTimestamp: BigNumber;
            indefiniteWhitelistCount: BigNumber;
        }>;
        extendWhitelistExpiration(airnode: string, endpointId: BytesLike, requester: string, expirationTimestamp: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        isAuthorized(airnode: string, endpointId: BytesLike, requester: string, overrides?: CallOverrides): Promise<[boolean]>;
        isAuthorizedV0(requestId: BytesLike, airnode: string, endpointId: BytesLike, sponsor: string, requester: string, overrides?: CallOverrides): Promise<[boolean]>;
        revokeIndefiniteWhitelistStatus(airnode: string, endpointId: BytesLike, requester: string, setter: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setIndefiniteWhitelistStatus(airnode: string, endpointId: BytesLike, requester: string, status: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setWhitelistExpiration(airnode: string, endpointId: BytesLike, requester: string, expirationTimestamp: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
    };
    airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus(airnode: string, endpointId: BytesLike, requester: string, setter: string, overrides?: CallOverrides): Promise<boolean>;
    airnodeToEndpointIdToRequesterToWhitelistStatus(airnode: string, endpointId: BytesLike, requester: string, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        expirationTimestamp: BigNumber;
        indefiniteWhitelistCount: BigNumber;
    }>;
    extendWhitelistExpiration(airnode: string, endpointId: BytesLike, requester: string, expirationTimestamp: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    isAuthorized(airnode: string, endpointId: BytesLike, requester: string, overrides?: CallOverrides): Promise<boolean>;
    isAuthorizedV0(requestId: BytesLike, airnode: string, endpointId: BytesLike, sponsor: string, requester: string, overrides?: CallOverrides): Promise<boolean>;
    revokeIndefiniteWhitelistStatus(airnode: string, endpointId: BytesLike, requester: string, setter: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setIndefiniteWhitelistStatus(airnode: string, endpointId: BytesLike, requester: string, status: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setWhitelistExpiration(airnode: string, endpointId: BytesLike, requester: string, expirationTimestamp: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    callStatic: {
        airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus(airnode: string, endpointId: BytesLike, requester: string, setter: string, overrides?: CallOverrides): Promise<boolean>;
        airnodeToEndpointIdToRequesterToWhitelistStatus(airnode: string, endpointId: BytesLike, requester: string, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            expirationTimestamp: BigNumber;
            indefiniteWhitelistCount: BigNumber;
        }>;
        extendWhitelistExpiration(airnode: string, endpointId: BytesLike, requester: string, expirationTimestamp: BigNumberish, overrides?: CallOverrides): Promise<void>;
        isAuthorized(airnode: string, endpointId: BytesLike, requester: string, overrides?: CallOverrides): Promise<boolean>;
        isAuthorizedV0(requestId: BytesLike, airnode: string, endpointId: BytesLike, sponsor: string, requester: string, overrides?: CallOverrides): Promise<boolean>;
        revokeIndefiniteWhitelistStatus(airnode: string, endpointId: BytesLike, requester: string, setter: string, overrides?: CallOverrides): Promise<void>;
        setIndefiniteWhitelistStatus(airnode: string, endpointId: BytesLike, requester: string, status: boolean, overrides?: CallOverrides): Promise<void>;
        setWhitelistExpiration(airnode: string, endpointId: BytesLike, requester: string, expirationTimestamp: BigNumberish, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "ExtendedWhitelistExpiration(address,bytes32,address,address,uint256)"(airnode?: string | null, endpointId?: null, requester?: string | null, sender?: string | null, expiration?: null): ExtendedWhitelistExpirationEventFilter;
        ExtendedWhitelistExpiration(airnode?: string | null, endpointId?: null, requester?: string | null, sender?: string | null, expiration?: null): ExtendedWhitelistExpirationEventFilter;
        "RevokedIndefiniteWhitelistStatus(address,bytes32,address,address,address,uint192)"(airnode?: string | null, endpointId?: null, requester?: string | null, setter?: string | null, sender?: null, indefiniteWhitelistCount?: null): RevokedIndefiniteWhitelistStatusEventFilter;
        RevokedIndefiniteWhitelistStatus(airnode?: string | null, endpointId?: null, requester?: string | null, setter?: string | null, sender?: null, indefiniteWhitelistCount?: null): RevokedIndefiniteWhitelistStatusEventFilter;
        "SetIndefiniteWhitelistStatus(address,bytes32,address,address,bool,uint192)"(airnode?: string | null, endpointId?: null, requester?: string | null, sender?: string | null, status?: null, indefiniteWhitelistCount?: null): SetIndefiniteWhitelistStatusEventFilter;
        SetIndefiniteWhitelistStatus(airnode?: string | null, endpointId?: null, requester?: string | null, sender?: string | null, status?: null, indefiniteWhitelistCount?: null): SetIndefiniteWhitelistStatusEventFilter;
        "SetWhitelistExpiration(address,bytes32,address,address,uint256)"(airnode?: string | null, endpointId?: null, requester?: string | null, sender?: string | null, expiration?: null): SetWhitelistExpirationEventFilter;
        SetWhitelistExpiration(airnode?: string | null, endpointId?: null, requester?: string | null, sender?: string | null, expiration?: null): SetWhitelistExpirationEventFilter;
    };
    estimateGas: {
        airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus(airnode: string, endpointId: BytesLike, requester: string, setter: string, overrides?: CallOverrides): Promise<BigNumber>;
        airnodeToEndpointIdToRequesterToWhitelistStatus(airnode: string, endpointId: BytesLike, requester: string, overrides?: CallOverrides): Promise<BigNumber>;
        extendWhitelistExpiration(airnode: string, endpointId: BytesLike, requester: string, expirationTimestamp: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        isAuthorized(airnode: string, endpointId: BytesLike, requester: string, overrides?: CallOverrides): Promise<BigNumber>;
        isAuthorizedV0(requestId: BytesLike, airnode: string, endpointId: BytesLike, sponsor: string, requester: string, overrides?: CallOverrides): Promise<BigNumber>;
        revokeIndefiniteWhitelistStatus(airnode: string, endpointId: BytesLike, requester: string, setter: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setIndefiniteWhitelistStatus(airnode: string, endpointId: BytesLike, requester: string, status: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setWhitelistExpiration(airnode: string, endpointId: BytesLike, requester: string, expirationTimestamp: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus(airnode: string, endpointId: BytesLike, requester: string, setter: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        airnodeToEndpointIdToRequesterToWhitelistStatus(airnode: string, endpointId: BytesLike, requester: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        extendWhitelistExpiration(airnode: string, endpointId: BytesLike, requester: string, expirationTimestamp: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        isAuthorized(airnode: string, endpointId: BytesLike, requester: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isAuthorizedV0(requestId: BytesLike, airnode: string, endpointId: BytesLike, sponsor: string, requester: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        revokeIndefiniteWhitelistStatus(airnode: string, endpointId: BytesLike, requester: string, setter: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setIndefiniteWhitelistStatus(airnode: string, endpointId: BytesLike, requester: string, status: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setWhitelistExpiration(airnode: string, endpointId: BytesLike, requester: string, expirationTimestamp: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=IRequesterAuthorizer.d.ts.map