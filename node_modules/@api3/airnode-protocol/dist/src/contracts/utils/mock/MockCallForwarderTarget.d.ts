import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../common";
export interface MockCallForwarderTargetInterface extends utils.Interface {
    functions: {
        "nonpayableTargetFunction(string,uint256)": FunctionFragment;
        "payableTargetFunction(string,uint256,uint256)": FunctionFragment;
        "storage1()": FunctionFragment;
        "storage2()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "nonpayableTargetFunction" | "payableTargetFunction" | "storage1" | "storage2"): FunctionFragment;
    encodeFunctionData(functionFragment: "nonpayableTargetFunction", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "payableTargetFunction", values: [string, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "storage1", values?: undefined): string;
    encodeFunctionData(functionFragment: "storage2", values?: undefined): string;
    decodeFunctionResult(functionFragment: "nonpayableTargetFunction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "payableTargetFunction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "storage1", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "storage2", data: BytesLike): Result;
    events: {};
}
export interface MockCallForwarderTarget extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MockCallForwarderTargetInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        nonpayableTargetFunction(input1: string, input2: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        payableTargetFunction(input1: string, input2: BigNumberish, msgValue: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        storage1(overrides?: CallOverrides): Promise<[string]>;
        storage2(overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    nonpayableTargetFunction(input1: string, input2: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    payableTargetFunction(input1: string, input2: BigNumberish, msgValue: BigNumberish, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    storage1(overrides?: CallOverrides): Promise<string>;
    storage2(overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        nonpayableTargetFunction(input1: string, input2: BigNumberish, overrides?: CallOverrides): Promise<[string, boolean] & {
            output1: string;
            output2: boolean;
        }>;
        payableTargetFunction(input1: string, input2: BigNumberish, msgValue: BigNumberish, overrides?: CallOverrides): Promise<[string, boolean] & {
            output1: string;
            output2: boolean;
        }>;
        storage1(overrides?: CallOverrides): Promise<string>;
        storage2(overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        nonpayableTargetFunction(input1: string, input2: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        payableTargetFunction(input1: string, input2: BigNumberish, msgValue: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        storage1(overrides?: CallOverrides): Promise<BigNumber>;
        storage2(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        nonpayableTargetFunction(input1: string, input2: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        payableTargetFunction(input1: string, input2: BigNumberish, msgValue: BigNumberish, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        storage1(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        storage2(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=MockCallForwarderTarget.d.ts.map