import type { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../common";
export interface AirnodeRrpV0DryRunInterface extends utils.Interface {
    functions: {
        "fulfill(bytes32,address,address,bytes4,bytes,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "fulfill"): FunctionFragment;
    encodeFunctionData(functionFragment: "fulfill", values: [BytesLike, string, string, BytesLike, BytesLike, BytesLike]): string;
    decodeFunctionResult(functionFragment: "fulfill", data: BytesLike): Result;
    events: {
        "FulfilledRequest(address,bytes32,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "FulfilledRequest"): EventFragment;
}
export interface FulfilledRequestEventObject {
    airnode: string;
    requestId: string;
    data: string;
}
export type FulfilledRequestEvent = TypedEvent<[
    string,
    string,
    string
], FulfilledRequestEventObject>;
export type FulfilledRequestEventFilter = TypedEventFilter<FulfilledRequestEvent>;
export interface AirnodeRrpV0DryRun extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: AirnodeRrpV0DryRunInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        fulfill(requestId: BytesLike, airnode: string, fulfillAddress: string, fulfillFunctionId: BytesLike, data: BytesLike, signature: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
    };
    fulfill(requestId: BytesLike, airnode: string, fulfillAddress: string, fulfillFunctionId: BytesLike, data: BytesLike, signature: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    callStatic: {
        fulfill(requestId: BytesLike, airnode: string, fulfillAddress: string, fulfillFunctionId: BytesLike, data: BytesLike, signature: BytesLike, overrides?: CallOverrides): Promise<[boolean, string] & {
            callSuccess: boolean;
            callData: string;
        }>;
    };
    filters: {
        "FulfilledRequest(address,bytes32,bytes)"(airnode?: string | null, requestId?: BytesLike | null, data?: null): FulfilledRequestEventFilter;
        FulfilledRequest(airnode?: string | null, requestId?: BytesLike | null, data?: null): FulfilledRequestEventFilter;
    };
    estimateGas: {
        fulfill(requestId: BytesLike, airnode: string, fulfillAddress: string, fulfillFunctionId: BytesLike, data: BytesLike, signature: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        fulfill(requestId: BytesLike, airnode: string, fulfillAddress: string, fulfillFunctionId: BytesLike, data: BytesLike, signature: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=AirnodeRrpV0DryRun.d.ts.map