import type { BaseContract, BigNumber, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../common";
export interface IAuthorizationUtilsV0Interface extends utils.Interface {
    functions: {
        "checkAuthorizationStatus(address[],address,bytes32,bytes32,address,address)": FunctionFragment;
        "checkAuthorizationStatuses(address[],address,bytes32[],bytes32[],address[],address[])": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "checkAuthorizationStatus" | "checkAuthorizationStatuses"): FunctionFragment;
    encodeFunctionData(functionFragment: "checkAuthorizationStatus", values: [string[], string, BytesLike, BytesLike, string, string]): string;
    encodeFunctionData(functionFragment: "checkAuthorizationStatuses", values: [string[], string, BytesLike[], BytesLike[], string[], string[]]): string;
    decodeFunctionResult(functionFragment: "checkAuthorizationStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "checkAuthorizationStatuses", data: BytesLike): Result;
    events: {};
}
export interface IAuthorizationUtilsV0 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IAuthorizationUtilsV0Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        checkAuthorizationStatus(authorizers: string[], airnode: string, requestId: BytesLike, endpointId: BytesLike, sponsor: string, requester: string, overrides?: CallOverrides): Promise<[boolean] & {
            status: boolean;
        }>;
        checkAuthorizationStatuses(authorizers: string[], airnode: string, requestIds: BytesLike[], endpointIds: BytesLike[], sponsors: string[], requesters: string[], overrides?: CallOverrides): Promise<[boolean[]] & {
            statuses: boolean[];
        }>;
    };
    checkAuthorizationStatus(authorizers: string[], airnode: string, requestId: BytesLike, endpointId: BytesLike, sponsor: string, requester: string, overrides?: CallOverrides): Promise<boolean>;
    checkAuthorizationStatuses(authorizers: string[], airnode: string, requestIds: BytesLike[], endpointIds: BytesLike[], sponsors: string[], requesters: string[], overrides?: CallOverrides): Promise<boolean[]>;
    callStatic: {
        checkAuthorizationStatus(authorizers: string[], airnode: string, requestId: BytesLike, endpointId: BytesLike, sponsor: string, requester: string, overrides?: CallOverrides): Promise<boolean>;
        checkAuthorizationStatuses(authorizers: string[], airnode: string, requestIds: BytesLike[], endpointIds: BytesLike[], sponsors: string[], requesters: string[], overrides?: CallOverrides): Promise<boolean[]>;
    };
    filters: {};
    estimateGas: {
        checkAuthorizationStatus(authorizers: string[], airnode: string, requestId: BytesLike, endpointId: BytesLike, sponsor: string, requester: string, overrides?: CallOverrides): Promise<BigNumber>;
        checkAuthorizationStatuses(authorizers: string[], airnode: string, requestIds: BytesLike[], endpointIds: BytesLike[], sponsors: string[], requesters: string[], overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        checkAuthorizationStatus(authorizers: string[], airnode: string, requestId: BytesLike, endpointId: BytesLike, sponsor: string, requester: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        checkAuthorizationStatuses(authorizers: string[], airnode: string, requestIds: BytesLike[], endpointIds: BytesLike[], sponsors: string[], requesters: string[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=IAuthorizationUtilsV0.d.ts.map