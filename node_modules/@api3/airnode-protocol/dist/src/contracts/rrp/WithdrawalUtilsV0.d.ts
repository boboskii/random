import type { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../common";
export interface WithdrawalUtilsV0Interface extends utils.Interface {
    functions: {
        "fulfillWithdrawal(bytes32,address,address)": FunctionFragment;
        "requestWithdrawal(address,address)": FunctionFragment;
        "sponsorToWithdrawalRequestCount(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "fulfillWithdrawal" | "requestWithdrawal" | "sponsorToWithdrawalRequestCount"): FunctionFragment;
    encodeFunctionData(functionFragment: "fulfillWithdrawal", values: [BytesLike, string, string]): string;
    encodeFunctionData(functionFragment: "requestWithdrawal", values: [string, string]): string;
    encodeFunctionData(functionFragment: "sponsorToWithdrawalRequestCount", values: [string]): string;
    decodeFunctionResult(functionFragment: "fulfillWithdrawal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requestWithdrawal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sponsorToWithdrawalRequestCount", data: BytesLike): Result;
    events: {
        "FulfilledWithdrawal(address,address,bytes32,address,uint256)": EventFragment;
        "RequestedWithdrawal(address,address,bytes32,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "FulfilledWithdrawal"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RequestedWithdrawal"): EventFragment;
}
export interface FulfilledWithdrawalEventObject {
    airnode: string;
    sponsor: string;
    withdrawalRequestId: string;
    sponsorWallet: string;
    amount: BigNumber;
}
export type FulfilledWithdrawalEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    BigNumber
], FulfilledWithdrawalEventObject>;
export type FulfilledWithdrawalEventFilter = TypedEventFilter<FulfilledWithdrawalEvent>;
export interface RequestedWithdrawalEventObject {
    airnode: string;
    sponsor: string;
    withdrawalRequestId: string;
    sponsorWallet: string;
}
export type RequestedWithdrawalEvent = TypedEvent<[
    string,
    string,
    string,
    string
], RequestedWithdrawalEventObject>;
export type RequestedWithdrawalEventFilter = TypedEventFilter<RequestedWithdrawalEvent>;
export interface WithdrawalUtilsV0 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: WithdrawalUtilsV0Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        fulfillWithdrawal(withdrawalRequestId: BytesLike, airnode: string, sponsor: string, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        requestWithdrawal(airnode: string, sponsorWallet: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        sponsorToWithdrawalRequestCount(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    fulfillWithdrawal(withdrawalRequestId: BytesLike, airnode: string, sponsor: string, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    requestWithdrawal(airnode: string, sponsorWallet: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    sponsorToWithdrawalRequestCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        fulfillWithdrawal(withdrawalRequestId: BytesLike, airnode: string, sponsor: string, overrides?: CallOverrides): Promise<void>;
        requestWithdrawal(airnode: string, sponsorWallet: string, overrides?: CallOverrides): Promise<void>;
        sponsorToWithdrawalRequestCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {
        "FulfilledWithdrawal(address,address,bytes32,address,uint256)"(airnode?: string | null, sponsor?: string | null, withdrawalRequestId?: BytesLike | null, sponsorWallet?: null, amount?: null): FulfilledWithdrawalEventFilter;
        FulfilledWithdrawal(airnode?: string | null, sponsor?: string | null, withdrawalRequestId?: BytesLike | null, sponsorWallet?: null, amount?: null): FulfilledWithdrawalEventFilter;
        "RequestedWithdrawal(address,address,bytes32,address)"(airnode?: string | null, sponsor?: string | null, withdrawalRequestId?: BytesLike | null, sponsorWallet?: null): RequestedWithdrawalEventFilter;
        RequestedWithdrawal(airnode?: string | null, sponsor?: string | null, withdrawalRequestId?: BytesLike | null, sponsorWallet?: null): RequestedWithdrawalEventFilter;
    };
    estimateGas: {
        fulfillWithdrawal(withdrawalRequestId: BytesLike, airnode: string, sponsor: string, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        requestWithdrawal(airnode: string, sponsorWallet: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        sponsorToWithdrawalRequestCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        fulfillWithdrawal(withdrawalRequestId: BytesLike, airnode: string, sponsor: string, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        requestWithdrawal(airnode: string, sponsorWallet: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        sponsorToWithdrawalRequestCount(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=WithdrawalUtilsV0.d.ts.map