import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../common";
export interface RrpBeaconServerV0Interface extends utils.Interface {
    functions: {
        "INDEFINITE_WHITELISTER_ROLE_DESCRIPTION()": FunctionFragment;
        "WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION()": FunctionFragment;
        "WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION()": FunctionFragment;
        "accessControlRegistry()": FunctionFragment;
        "adminRole()": FunctionFragment;
        "adminRoleDescription()": FunctionFragment;
        "airnodeRrp()": FunctionFragment;
        "beaconIdToReaderToSetterToIndefiniteWhitelistStatus(bytes32,address,address)": FunctionFragment;
        "beaconIdToReaderToWhitelistStatus(bytes32,address)": FunctionFragment;
        "deriveBeaconId(bytes32,bytes)": FunctionFragment;
        "extendWhitelistExpiration(bytes32,address,uint64)": FunctionFragment;
        "fulfill(bytes32,bytes)": FunctionFragment;
        "indefiniteWhitelisterRole()": FunctionFragment;
        "manager()": FunctionFragment;
        "multicall(bytes[])": FunctionFragment;
        "readBeacon(bytes32)": FunctionFragment;
        "readerCanReadBeacon(bytes32,address)": FunctionFragment;
        "requestBeaconUpdate(bytes32,address,address,bytes)": FunctionFragment;
        "revokeIndefiniteWhitelistStatus(bytes32,address,address)": FunctionFragment;
        "setIndefiniteWhitelistStatus(bytes32,address,bool)": FunctionFragment;
        "setUpdatePermissionStatus(address,bool)": FunctionFragment;
        "setWhitelistExpiration(bytes32,address,uint64)": FunctionFragment;
        "sponsorToUpdateRequesterToPermissionStatus(address,address)": FunctionFragment;
        "whitelistExpirationExtenderRole()": FunctionFragment;
        "whitelistExpirationSetterRole()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "INDEFINITE_WHITELISTER_ROLE_DESCRIPTION" | "WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION" | "WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION" | "accessControlRegistry" | "adminRole" | "adminRoleDescription" | "airnodeRrp" | "beaconIdToReaderToSetterToIndefiniteWhitelistStatus" | "beaconIdToReaderToWhitelistStatus" | "deriveBeaconId" | "extendWhitelistExpiration" | "fulfill" | "indefiniteWhitelisterRole" | "manager" | "multicall" | "readBeacon" | "readerCanReadBeacon" | "requestBeaconUpdate" | "revokeIndefiniteWhitelistStatus" | "setIndefiniteWhitelistStatus" | "setUpdatePermissionStatus" | "setWhitelistExpiration" | "sponsorToUpdateRequesterToPermissionStatus" | "whitelistExpirationExtenderRole" | "whitelistExpirationSetterRole"): FunctionFragment;
    encodeFunctionData(functionFragment: "INDEFINITE_WHITELISTER_ROLE_DESCRIPTION", values?: undefined): string;
    encodeFunctionData(functionFragment: "WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION", values?: undefined): string;
    encodeFunctionData(functionFragment: "WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION", values?: undefined): string;
    encodeFunctionData(functionFragment: "accessControlRegistry", values?: undefined): string;
    encodeFunctionData(functionFragment: "adminRole", values?: undefined): string;
    encodeFunctionData(functionFragment: "adminRoleDescription", values?: undefined): string;
    encodeFunctionData(functionFragment: "airnodeRrp", values?: undefined): string;
    encodeFunctionData(functionFragment: "beaconIdToReaderToSetterToIndefiniteWhitelistStatus", values: [BytesLike, string, string]): string;
    encodeFunctionData(functionFragment: "beaconIdToReaderToWhitelistStatus", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "deriveBeaconId", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "extendWhitelistExpiration", values: [BytesLike, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "fulfill", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "indefiniteWhitelisterRole", values?: undefined): string;
    encodeFunctionData(functionFragment: "manager", values?: undefined): string;
    encodeFunctionData(functionFragment: "multicall", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "readBeacon", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "readerCanReadBeacon", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "requestBeaconUpdate", values: [BytesLike, string, string, BytesLike]): string;
    encodeFunctionData(functionFragment: "revokeIndefiniteWhitelistStatus", values: [BytesLike, string, string]): string;
    encodeFunctionData(functionFragment: "setIndefiniteWhitelistStatus", values: [BytesLike, string, boolean]): string;
    encodeFunctionData(functionFragment: "setUpdatePermissionStatus", values: [string, boolean]): string;
    encodeFunctionData(functionFragment: "setWhitelistExpiration", values: [BytesLike, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "sponsorToUpdateRequesterToPermissionStatus", values: [string, string]): string;
    encodeFunctionData(functionFragment: "whitelistExpirationExtenderRole", values?: undefined): string;
    encodeFunctionData(functionFragment: "whitelistExpirationSetterRole", values?: undefined): string;
    decodeFunctionResult(functionFragment: "INDEFINITE_WHITELISTER_ROLE_DESCRIPTION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "accessControlRegistry", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "adminRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "adminRoleDescription", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "airnodeRrp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "beaconIdToReaderToSetterToIndefiniteWhitelistStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "beaconIdToReaderToWhitelistStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deriveBeaconId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "extendWhitelistExpiration", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fulfill", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "indefiniteWhitelisterRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "readBeacon", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "readerCanReadBeacon", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requestBeaconUpdate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeIndefiniteWhitelistStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setIndefiniteWhitelistStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setUpdatePermissionStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWhitelistExpiration", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sponsorToUpdateRequesterToPermissionStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "whitelistExpirationExtenderRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "whitelistExpirationSetterRole", data: BytesLike): Result;
    events: {
        "ExtendedWhitelistExpiration(bytes32,address,address,uint256)": EventFragment;
        "RequestedBeaconUpdate(bytes32,address,address,bytes32,bytes32,address,bytes)": EventFragment;
        "RevokedIndefiniteWhitelistStatus(bytes32,address,address,address,uint192)": EventFragment;
        "SetIndefiniteWhitelistStatus(bytes32,address,address,bool,uint192)": EventFragment;
        "SetUpdatePermissionStatus(address,address,bool)": EventFragment;
        "SetWhitelistExpiration(bytes32,address,address,uint256)": EventFragment;
        "UpdatedBeacon(bytes32,bytes32,int224,uint32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ExtendedWhitelistExpiration"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RequestedBeaconUpdate"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RevokedIndefiniteWhitelistStatus"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetIndefiniteWhitelistStatus"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetUpdatePermissionStatus"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWhitelistExpiration"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatedBeacon"): EventFragment;
}
export interface ExtendedWhitelistExpirationEventObject {
    serviceId: string;
    user: string;
    sender: string;
    expiration: BigNumber;
}
export type ExtendedWhitelistExpirationEvent = TypedEvent<[
    string,
    string,
    string,
    BigNumber
], ExtendedWhitelistExpirationEventObject>;
export type ExtendedWhitelistExpirationEventFilter = TypedEventFilter<ExtendedWhitelistExpirationEvent>;
export interface RequestedBeaconUpdateEventObject {
    beaconId: string;
    sponsor: string;
    requester: string;
    requestId: string;
    templateId: string;
    sponsorWallet: string;
    parameters: string;
}
export type RequestedBeaconUpdateEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    string,
    string,
    string
], RequestedBeaconUpdateEventObject>;
export type RequestedBeaconUpdateEventFilter = TypedEventFilter<RequestedBeaconUpdateEvent>;
export interface RevokedIndefiniteWhitelistStatusEventObject {
    serviceId: string;
    user: string;
    setter: string;
    sender: string;
    indefiniteWhitelistCount: BigNumber;
}
export type RevokedIndefiniteWhitelistStatusEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    BigNumber
], RevokedIndefiniteWhitelistStatusEventObject>;
export type RevokedIndefiniteWhitelistStatusEventFilter = TypedEventFilter<RevokedIndefiniteWhitelistStatusEvent>;
export interface SetIndefiniteWhitelistStatusEventObject {
    serviceId: string;
    user: string;
    sender: string;
    status: boolean;
    indefiniteWhitelistCount: BigNumber;
}
export type SetIndefiniteWhitelistStatusEvent = TypedEvent<[
    string,
    string,
    string,
    boolean,
    BigNumber
], SetIndefiniteWhitelistStatusEventObject>;
export type SetIndefiniteWhitelistStatusEventFilter = TypedEventFilter<SetIndefiniteWhitelistStatusEvent>;
export interface SetUpdatePermissionStatusEventObject {
    sponsor: string;
    updateRequester: string;
    status: boolean;
}
export type SetUpdatePermissionStatusEvent = TypedEvent<[
    string,
    string,
    boolean
], SetUpdatePermissionStatusEventObject>;
export type SetUpdatePermissionStatusEventFilter = TypedEventFilter<SetUpdatePermissionStatusEvent>;
export interface SetWhitelistExpirationEventObject {
    serviceId: string;
    user: string;
    sender: string;
    expiration: BigNumber;
}
export type SetWhitelistExpirationEvent = TypedEvent<[
    string,
    string,
    string,
    BigNumber
], SetWhitelistExpirationEventObject>;
export type SetWhitelistExpirationEventFilter = TypedEventFilter<SetWhitelistExpirationEvent>;
export interface UpdatedBeaconEventObject {
    beaconId: string;
    requestId: string;
    value: BigNumber;
    timestamp: number;
}
export type UpdatedBeaconEvent = TypedEvent<[
    string,
    string,
    BigNumber,
    number
], UpdatedBeaconEventObject>;
export type UpdatedBeaconEventFilter = TypedEventFilter<UpdatedBeaconEvent>;
export interface RrpBeaconServerV0 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: RrpBeaconServerV0Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        INDEFINITE_WHITELISTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<[string]>;
        WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<[string]>;
        WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<[string]>;
        accessControlRegistry(overrides?: CallOverrides): Promise<[string]>;
        adminRole(overrides?: CallOverrides): Promise<[string]>;
        adminRoleDescription(overrides?: CallOverrides): Promise<[string]>;
        airnodeRrp(overrides?: CallOverrides): Promise<[string]>;
        beaconIdToReaderToSetterToIndefiniteWhitelistStatus(beaconId: BytesLike, reader: string, setter: string, overrides?: CallOverrides): Promise<[boolean] & {
            indefiniteWhitelistStatus: boolean;
        }>;
        beaconIdToReaderToWhitelistStatus(beaconId: BytesLike, reader: string, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            expirationTimestamp: BigNumber;
            indefiniteWhitelistCount: BigNumber;
        }>;
        deriveBeaconId(templateId: BytesLike, parameters: BytesLike, overrides?: CallOverrides): Promise<[string] & {
            beaconId: string;
        }>;
        extendWhitelistExpiration(serviceId: BytesLike, user: string, expirationTimestamp: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        fulfill(requestId: BytesLike, data: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        indefiniteWhitelisterRole(overrides?: CallOverrides): Promise<[string]>;
        manager(overrides?: CallOverrides): Promise<[string]>;
        multicall(data: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        readBeacon(beaconId: BytesLike, overrides?: CallOverrides): Promise<[BigNumber, number] & {
            value: BigNumber;
            timestamp: number;
        }>;
        readerCanReadBeacon(beaconId: BytesLike, reader: string, overrides?: CallOverrides): Promise<[boolean]>;
        requestBeaconUpdate(templateId: BytesLike, sponsor: string, sponsorWallet: string, parameters: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        revokeIndefiniteWhitelistStatus(serviceId: BytesLike, user: string, setter: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setIndefiniteWhitelistStatus(serviceId: BytesLike, user: string, status: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setUpdatePermissionStatus(updateRequester: string, status: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setWhitelistExpiration(serviceId: BytesLike, user: string, expirationTimestamp: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        sponsorToUpdateRequesterToPermissionStatus(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[boolean]>;
        whitelistExpirationExtenderRole(overrides?: CallOverrides): Promise<[string]>;
        whitelistExpirationSetterRole(overrides?: CallOverrides): Promise<[string]>;
    };
    INDEFINITE_WHITELISTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
    WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
    WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
    accessControlRegistry(overrides?: CallOverrides): Promise<string>;
    adminRole(overrides?: CallOverrides): Promise<string>;
    adminRoleDescription(overrides?: CallOverrides): Promise<string>;
    airnodeRrp(overrides?: CallOverrides): Promise<string>;
    beaconIdToReaderToSetterToIndefiniteWhitelistStatus(beaconId: BytesLike, reader: string, setter: string, overrides?: CallOverrides): Promise<boolean>;
    beaconIdToReaderToWhitelistStatus(beaconId: BytesLike, reader: string, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        expirationTimestamp: BigNumber;
        indefiniteWhitelistCount: BigNumber;
    }>;
    deriveBeaconId(templateId: BytesLike, parameters: BytesLike, overrides?: CallOverrides): Promise<string>;
    extendWhitelistExpiration(serviceId: BytesLike, user: string, expirationTimestamp: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    fulfill(requestId: BytesLike, data: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    indefiniteWhitelisterRole(overrides?: CallOverrides): Promise<string>;
    manager(overrides?: CallOverrides): Promise<string>;
    multicall(data: BytesLike[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    readBeacon(beaconId: BytesLike, overrides?: CallOverrides): Promise<[BigNumber, number] & {
        value: BigNumber;
        timestamp: number;
    }>;
    readerCanReadBeacon(beaconId: BytesLike, reader: string, overrides?: CallOverrides): Promise<boolean>;
    requestBeaconUpdate(templateId: BytesLike, sponsor: string, sponsorWallet: string, parameters: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    revokeIndefiniteWhitelistStatus(serviceId: BytesLike, user: string, setter: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setIndefiniteWhitelistStatus(serviceId: BytesLike, user: string, status: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setUpdatePermissionStatus(updateRequester: string, status: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setWhitelistExpiration(serviceId: BytesLike, user: string, expirationTimestamp: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    sponsorToUpdateRequesterToPermissionStatus(arg0: string, arg1: string, overrides?: CallOverrides): Promise<boolean>;
    whitelistExpirationExtenderRole(overrides?: CallOverrides): Promise<string>;
    whitelistExpirationSetterRole(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        INDEFINITE_WHITELISTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
        WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
        WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<string>;
        accessControlRegistry(overrides?: CallOverrides): Promise<string>;
        adminRole(overrides?: CallOverrides): Promise<string>;
        adminRoleDescription(overrides?: CallOverrides): Promise<string>;
        airnodeRrp(overrides?: CallOverrides): Promise<string>;
        beaconIdToReaderToSetterToIndefiniteWhitelistStatus(beaconId: BytesLike, reader: string, setter: string, overrides?: CallOverrides): Promise<boolean>;
        beaconIdToReaderToWhitelistStatus(beaconId: BytesLike, reader: string, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            expirationTimestamp: BigNumber;
            indefiniteWhitelistCount: BigNumber;
        }>;
        deriveBeaconId(templateId: BytesLike, parameters: BytesLike, overrides?: CallOverrides): Promise<string>;
        extendWhitelistExpiration(serviceId: BytesLike, user: string, expirationTimestamp: BigNumberish, overrides?: CallOverrides): Promise<void>;
        fulfill(requestId: BytesLike, data: BytesLike, overrides?: CallOverrides): Promise<void>;
        indefiniteWhitelisterRole(overrides?: CallOverrides): Promise<string>;
        manager(overrides?: CallOverrides): Promise<string>;
        multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;
        readBeacon(beaconId: BytesLike, overrides?: CallOverrides): Promise<[BigNumber, number] & {
            value: BigNumber;
            timestamp: number;
        }>;
        readerCanReadBeacon(beaconId: BytesLike, reader: string, overrides?: CallOverrides): Promise<boolean>;
        requestBeaconUpdate(templateId: BytesLike, sponsor: string, sponsorWallet: string, parameters: BytesLike, overrides?: CallOverrides): Promise<void>;
        revokeIndefiniteWhitelistStatus(serviceId: BytesLike, user: string, setter: string, overrides?: CallOverrides): Promise<void>;
        setIndefiniteWhitelistStatus(serviceId: BytesLike, user: string, status: boolean, overrides?: CallOverrides): Promise<void>;
        setUpdatePermissionStatus(updateRequester: string, status: boolean, overrides?: CallOverrides): Promise<void>;
        setWhitelistExpiration(serviceId: BytesLike, user: string, expirationTimestamp: BigNumberish, overrides?: CallOverrides): Promise<void>;
        sponsorToUpdateRequesterToPermissionStatus(arg0: string, arg1: string, overrides?: CallOverrides): Promise<boolean>;
        whitelistExpirationExtenderRole(overrides?: CallOverrides): Promise<string>;
        whitelistExpirationSetterRole(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "ExtendedWhitelistExpiration(bytes32,address,address,uint256)"(serviceId?: BytesLike | null, user?: string | null, sender?: string | null, expiration?: null): ExtendedWhitelistExpirationEventFilter;
        ExtendedWhitelistExpiration(serviceId?: BytesLike | null, user?: string | null, sender?: string | null, expiration?: null): ExtendedWhitelistExpirationEventFilter;
        "RequestedBeaconUpdate(bytes32,address,address,bytes32,bytes32,address,bytes)"(beaconId?: BytesLike | null, sponsor?: string | null, requester?: string | null, requestId?: null, templateId?: null, sponsorWallet?: null, parameters?: null): RequestedBeaconUpdateEventFilter;
        RequestedBeaconUpdate(beaconId?: BytesLike | null, sponsor?: string | null, requester?: string | null, requestId?: null, templateId?: null, sponsorWallet?: null, parameters?: null): RequestedBeaconUpdateEventFilter;
        "RevokedIndefiniteWhitelistStatus(bytes32,address,address,address,uint192)"(serviceId?: BytesLike | null, user?: string | null, setter?: string | null, sender?: null, indefiniteWhitelistCount?: null): RevokedIndefiniteWhitelistStatusEventFilter;
        RevokedIndefiniteWhitelistStatus(serviceId?: BytesLike | null, user?: string | null, setter?: string | null, sender?: null, indefiniteWhitelistCount?: null): RevokedIndefiniteWhitelistStatusEventFilter;
        "SetIndefiniteWhitelistStatus(bytes32,address,address,bool,uint192)"(serviceId?: BytesLike | null, user?: string | null, sender?: string | null, status?: null, indefiniteWhitelistCount?: null): SetIndefiniteWhitelistStatusEventFilter;
        SetIndefiniteWhitelistStatus(serviceId?: BytesLike | null, user?: string | null, sender?: string | null, status?: null, indefiniteWhitelistCount?: null): SetIndefiniteWhitelistStatusEventFilter;
        "SetUpdatePermissionStatus(address,address,bool)"(sponsor?: string | null, updateRequester?: string | null, status?: null): SetUpdatePermissionStatusEventFilter;
        SetUpdatePermissionStatus(sponsor?: string | null, updateRequester?: string | null, status?: null): SetUpdatePermissionStatusEventFilter;
        "SetWhitelistExpiration(bytes32,address,address,uint256)"(serviceId?: BytesLike | null, user?: string | null, sender?: string | null, expiration?: null): SetWhitelistExpirationEventFilter;
        SetWhitelistExpiration(serviceId?: BytesLike | null, user?: string | null, sender?: string | null, expiration?: null): SetWhitelistExpirationEventFilter;
        "UpdatedBeacon(bytes32,bytes32,int224,uint32)"(beaconId?: BytesLike | null, requestId?: null, value?: null, timestamp?: null): UpdatedBeaconEventFilter;
        UpdatedBeacon(beaconId?: BytesLike | null, requestId?: null, value?: null, timestamp?: null): UpdatedBeaconEventFilter;
    };
    estimateGas: {
        INDEFINITE_WHITELISTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<BigNumber>;
        WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<BigNumber>;
        WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<BigNumber>;
        accessControlRegistry(overrides?: CallOverrides): Promise<BigNumber>;
        adminRole(overrides?: CallOverrides): Promise<BigNumber>;
        adminRoleDescription(overrides?: CallOverrides): Promise<BigNumber>;
        airnodeRrp(overrides?: CallOverrides): Promise<BigNumber>;
        beaconIdToReaderToSetterToIndefiniteWhitelistStatus(beaconId: BytesLike, reader: string, setter: string, overrides?: CallOverrides): Promise<BigNumber>;
        beaconIdToReaderToWhitelistStatus(beaconId: BytesLike, reader: string, overrides?: CallOverrides): Promise<BigNumber>;
        deriveBeaconId(templateId: BytesLike, parameters: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        extendWhitelistExpiration(serviceId: BytesLike, user: string, expirationTimestamp: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        fulfill(requestId: BytesLike, data: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        indefiniteWhitelisterRole(overrides?: CallOverrides): Promise<BigNumber>;
        manager(overrides?: CallOverrides): Promise<BigNumber>;
        multicall(data: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        readBeacon(beaconId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        readerCanReadBeacon(beaconId: BytesLike, reader: string, overrides?: CallOverrides): Promise<BigNumber>;
        requestBeaconUpdate(templateId: BytesLike, sponsor: string, sponsorWallet: string, parameters: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        revokeIndefiniteWhitelistStatus(serviceId: BytesLike, user: string, setter: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setIndefiniteWhitelistStatus(serviceId: BytesLike, user: string, status: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setUpdatePermissionStatus(updateRequester: string, status: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setWhitelistExpiration(serviceId: BytesLike, user: string, expirationTimestamp: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        sponsorToUpdateRequesterToPermissionStatus(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;
        whitelistExpirationExtenderRole(overrides?: CallOverrides): Promise<BigNumber>;
        whitelistExpirationSetterRole(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        INDEFINITE_WHITELISTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        accessControlRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        adminRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        adminRoleDescription(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        airnodeRrp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        beaconIdToReaderToSetterToIndefiniteWhitelistStatus(beaconId: BytesLike, reader: string, setter: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        beaconIdToReaderToWhitelistStatus(beaconId: BytesLike, reader: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deriveBeaconId(templateId: BytesLike, parameters: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        extendWhitelistExpiration(serviceId: BytesLike, user: string, expirationTimestamp: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        fulfill(requestId: BytesLike, data: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        indefiniteWhitelisterRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        multicall(data: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        readBeacon(beaconId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        readerCanReadBeacon(beaconId: BytesLike, reader: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        requestBeaconUpdate(templateId: BytesLike, sponsor: string, sponsorWallet: string, parameters: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        revokeIndefiniteWhitelistStatus(serviceId: BytesLike, user: string, setter: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setIndefiniteWhitelistStatus(serviceId: BytesLike, user: string, status: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setUpdatePermissionStatus(updateRequester: string, status: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setWhitelistExpiration(serviceId: BytesLike, user: string, expirationTimestamp: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        sponsorToUpdateRequesterToPermissionStatus(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        whitelistExpirationExtenderRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        whitelistExpirationSetterRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=RrpBeaconServerV0.d.ts.map