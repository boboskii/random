import type { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../../common";
export interface MockRrpRequesterV0Interface extends utils.Interface {
    functions: {
        "airnodeRrp()": FunctionFragment;
        "fulfill(bytes32,bytes)": FunctionFragment;
        "fulfillAlwaysReverts(bytes32,bytes)": FunctionFragment;
        "fulfillAlwaysRevertsWithNoString(bytes32,bytes)": FunctionFragment;
        "fulfillAlwaysRunsOutOfGas(bytes32,bytes)": FunctionFragment;
        "makeFullRequest(address,bytes32,address,address,address,bytes4,bytes)": FunctionFragment;
        "makeTemplateRequest(bytes32,address,address,address,bytes4,bytes)": FunctionFragment;
        "requestIdToData(bytes32)": FunctionFragment;
        "requestWithdrawal(address,address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "airnodeRrp" | "fulfill" | "fulfillAlwaysReverts" | "fulfillAlwaysRevertsWithNoString" | "fulfillAlwaysRunsOutOfGas" | "makeFullRequest" | "makeTemplateRequest" | "requestIdToData" | "requestWithdrawal"): FunctionFragment;
    encodeFunctionData(functionFragment: "airnodeRrp", values?: undefined): string;
    encodeFunctionData(functionFragment: "fulfill", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "fulfillAlwaysReverts", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "fulfillAlwaysRevertsWithNoString", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "fulfillAlwaysRunsOutOfGas", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "makeFullRequest", values: [string, BytesLike, string, string, string, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "makeTemplateRequest", values: [BytesLike, string, string, string, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "requestIdToData", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "requestWithdrawal", values: [string, string]): string;
    decodeFunctionResult(functionFragment: "airnodeRrp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fulfill", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fulfillAlwaysReverts", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fulfillAlwaysRevertsWithNoString", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fulfillAlwaysRunsOutOfGas", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "makeFullRequest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "makeTemplateRequest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requestIdToData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requestWithdrawal", data: BytesLike): Result;
    events: {
        "FulfilledRequest(bytes32,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "FulfilledRequest"): EventFragment;
}
export interface FulfilledRequestEventObject {
    requestId: string;
    data: string;
}
export type FulfilledRequestEvent = TypedEvent<[
    string,
    string
], FulfilledRequestEventObject>;
export type FulfilledRequestEventFilter = TypedEventFilter<FulfilledRequestEvent>;
export interface MockRrpRequesterV0 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MockRrpRequesterV0Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        airnodeRrp(overrides?: CallOverrides): Promise<[string]>;
        fulfill(requestId: BytesLike, data: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        fulfillAlwaysReverts(requestId: BytesLike, data: BytesLike, overrides?: CallOverrides): Promise<[void]>;
        fulfillAlwaysRevertsWithNoString(requestId: BytesLike, data: BytesLike, overrides?: CallOverrides): Promise<[void]>;
        fulfillAlwaysRunsOutOfGas(requestId: BytesLike, data: BytesLike, overrides?: CallOverrides): Promise<[void]>;
        makeFullRequest(airnode: string, endpointId: BytesLike, sponsor: string, sponsorWallet: string, fulfillAddress: string, fulfillFunctionId: BytesLike, parameters: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        makeTemplateRequest(templateId: BytesLike, sponsor: string, sponsorWallet: string, fulfillAddress: string, fulfillFunctionId: BytesLike, parameters: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        requestIdToData(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;
        requestWithdrawal(airnode: string, sponsorWallet: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
    };
    airnodeRrp(overrides?: CallOverrides): Promise<string>;
    fulfill(requestId: BytesLike, data: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    fulfillAlwaysReverts(requestId: BytesLike, data: BytesLike, overrides?: CallOverrides): Promise<void>;
    fulfillAlwaysRevertsWithNoString(requestId: BytesLike, data: BytesLike, overrides?: CallOverrides): Promise<void>;
    fulfillAlwaysRunsOutOfGas(requestId: BytesLike, data: BytesLike, overrides?: CallOverrides): Promise<void>;
    makeFullRequest(airnode: string, endpointId: BytesLike, sponsor: string, sponsorWallet: string, fulfillAddress: string, fulfillFunctionId: BytesLike, parameters: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    makeTemplateRequest(templateId: BytesLike, sponsor: string, sponsorWallet: string, fulfillAddress: string, fulfillFunctionId: BytesLike, parameters: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    requestIdToData(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;
    requestWithdrawal(airnode: string, sponsorWallet: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    callStatic: {
        airnodeRrp(overrides?: CallOverrides): Promise<string>;
        fulfill(requestId: BytesLike, data: BytesLike, overrides?: CallOverrides): Promise<void>;
        fulfillAlwaysReverts(requestId: BytesLike, data: BytesLike, overrides?: CallOverrides): Promise<void>;
        fulfillAlwaysRevertsWithNoString(requestId: BytesLike, data: BytesLike, overrides?: CallOverrides): Promise<void>;
        fulfillAlwaysRunsOutOfGas(requestId: BytesLike, data: BytesLike, overrides?: CallOverrides): Promise<void>;
        makeFullRequest(airnode: string, endpointId: BytesLike, sponsor: string, sponsorWallet: string, fulfillAddress: string, fulfillFunctionId: BytesLike, parameters: BytesLike, overrides?: CallOverrides): Promise<void>;
        makeTemplateRequest(templateId: BytesLike, sponsor: string, sponsorWallet: string, fulfillAddress: string, fulfillFunctionId: BytesLike, parameters: BytesLike, overrides?: CallOverrides): Promise<void>;
        requestIdToData(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;
        requestWithdrawal(airnode: string, sponsorWallet: string, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "FulfilledRequest(bytes32,bytes)"(requestId?: BytesLike | null, data?: null): FulfilledRequestEventFilter;
        FulfilledRequest(requestId?: BytesLike | null, data?: null): FulfilledRequestEventFilter;
    };
    estimateGas: {
        airnodeRrp(overrides?: CallOverrides): Promise<BigNumber>;
        fulfill(requestId: BytesLike, data: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        fulfillAlwaysReverts(requestId: BytesLike, data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        fulfillAlwaysRevertsWithNoString(requestId: BytesLike, data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        fulfillAlwaysRunsOutOfGas(requestId: BytesLike, data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        makeFullRequest(airnode: string, endpointId: BytesLike, sponsor: string, sponsorWallet: string, fulfillAddress: string, fulfillFunctionId: BytesLike, parameters: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        makeTemplateRequest(templateId: BytesLike, sponsor: string, sponsorWallet: string, fulfillAddress: string, fulfillFunctionId: BytesLike, parameters: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        requestIdToData(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        requestWithdrawal(airnode: string, sponsorWallet: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        airnodeRrp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        fulfill(requestId: BytesLike, data: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        fulfillAlwaysReverts(requestId: BytesLike, data: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        fulfillAlwaysRevertsWithNoString(requestId: BytesLike, data: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        fulfillAlwaysRunsOutOfGas(requestId: BytesLike, data: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        makeFullRequest(airnode: string, endpointId: BytesLike, sponsor: string, sponsorWallet: string, fulfillAddress: string, fulfillFunctionId: BytesLike, parameters: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        makeTemplateRequest(templateId: BytesLike, sponsor: string, sponsorWallet: string, fulfillAddress: string, fulfillFunctionId: BytesLike, parameters: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        requestIdToData(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        requestWithdrawal(airnode: string, sponsorWallet: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=MockRrpRequesterV0.d.ts.map