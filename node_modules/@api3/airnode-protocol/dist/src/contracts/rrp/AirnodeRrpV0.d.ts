import type { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../common";
export interface AirnodeRrpV0Interface extends utils.Interface {
    functions: {
        "checkAuthorizationStatus(address[],address,bytes32,bytes32,address,address)": FunctionFragment;
        "checkAuthorizationStatuses(address[],address,bytes32[],bytes32[],address[],address[])": FunctionFragment;
        "createTemplate(address,bytes32,bytes)": FunctionFragment;
        "fail(bytes32,address,address,bytes4,string)": FunctionFragment;
        "fulfill(bytes32,address,address,bytes4,bytes,bytes)": FunctionFragment;
        "fulfillWithdrawal(bytes32,address,address)": FunctionFragment;
        "getTemplates(bytes32[])": FunctionFragment;
        "makeFullRequest(address,bytes32,address,address,address,bytes4,bytes)": FunctionFragment;
        "makeTemplateRequest(bytes32,address,address,address,bytes4,bytes)": FunctionFragment;
        "requestIsAwaitingFulfillment(bytes32)": FunctionFragment;
        "requestWithdrawal(address,address)": FunctionFragment;
        "requesterToRequestCountPlusOne(address)": FunctionFragment;
        "setSponsorshipStatus(address,bool)": FunctionFragment;
        "sponsorToRequesterToSponsorshipStatus(address,address)": FunctionFragment;
        "sponsorToWithdrawalRequestCount(address)": FunctionFragment;
        "templates(bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "checkAuthorizationStatus" | "checkAuthorizationStatuses" | "createTemplate" | "fail" | "fulfill" | "fulfillWithdrawal" | "getTemplates" | "makeFullRequest" | "makeTemplateRequest" | "requestIsAwaitingFulfillment" | "requestWithdrawal" | "requesterToRequestCountPlusOne" | "setSponsorshipStatus" | "sponsorToRequesterToSponsorshipStatus" | "sponsorToWithdrawalRequestCount" | "templates"): FunctionFragment;
    encodeFunctionData(functionFragment: "checkAuthorizationStatus", values: [string[], string, BytesLike, BytesLike, string, string]): string;
    encodeFunctionData(functionFragment: "checkAuthorizationStatuses", values: [string[], string, BytesLike[], BytesLike[], string[], string[]]): string;
    encodeFunctionData(functionFragment: "createTemplate", values: [string, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "fail", values: [BytesLike, string, string, BytesLike, string]): string;
    encodeFunctionData(functionFragment: "fulfill", values: [BytesLike, string, string, BytesLike, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "fulfillWithdrawal", values: [BytesLike, string, string]): string;
    encodeFunctionData(functionFragment: "getTemplates", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "makeFullRequest", values: [string, BytesLike, string, string, string, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "makeTemplateRequest", values: [BytesLike, string, string, string, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "requestIsAwaitingFulfillment", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "requestWithdrawal", values: [string, string]): string;
    encodeFunctionData(functionFragment: "requesterToRequestCountPlusOne", values: [string]): string;
    encodeFunctionData(functionFragment: "setSponsorshipStatus", values: [string, boolean]): string;
    encodeFunctionData(functionFragment: "sponsorToRequesterToSponsorshipStatus", values: [string, string]): string;
    encodeFunctionData(functionFragment: "sponsorToWithdrawalRequestCount", values: [string]): string;
    encodeFunctionData(functionFragment: "templates", values: [BytesLike]): string;
    decodeFunctionResult(functionFragment: "checkAuthorizationStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "checkAuthorizationStatuses", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createTemplate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fail", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fulfill", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fulfillWithdrawal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTemplates", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "makeFullRequest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "makeTemplateRequest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requestIsAwaitingFulfillment", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requestWithdrawal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requesterToRequestCountPlusOne", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSponsorshipStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sponsorToRequesterToSponsorshipStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sponsorToWithdrawalRequestCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "templates", data: BytesLike): Result;
    events: {
        "CreatedTemplate(bytes32,address,bytes32,bytes)": EventFragment;
        "FailedRequest(address,bytes32,string)": EventFragment;
        "FulfilledRequest(address,bytes32,bytes)": EventFragment;
        "FulfilledWithdrawal(address,address,bytes32,address,uint256)": EventFragment;
        "MadeFullRequest(address,bytes32,uint256,uint256,address,bytes32,address,address,address,bytes4,bytes)": EventFragment;
        "MadeTemplateRequest(address,bytes32,uint256,uint256,address,bytes32,address,address,address,bytes4,bytes)": EventFragment;
        "RequestedWithdrawal(address,address,bytes32,address)": EventFragment;
        "SetSponsorshipStatus(address,address,bool)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "CreatedTemplate"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FailedRequest"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FulfilledRequest"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FulfilledWithdrawal"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MadeFullRequest"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MadeTemplateRequest"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RequestedWithdrawal"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetSponsorshipStatus"): EventFragment;
}
export interface CreatedTemplateEventObject {
    templateId: string;
    airnode: string;
    endpointId: string;
    parameters: string;
}
export type CreatedTemplateEvent = TypedEvent<[
    string,
    string,
    string,
    string
], CreatedTemplateEventObject>;
export type CreatedTemplateEventFilter = TypedEventFilter<CreatedTemplateEvent>;
export interface FailedRequestEventObject {
    airnode: string;
    requestId: string;
    errorMessage: string;
}
export type FailedRequestEvent = TypedEvent<[
    string,
    string,
    string
], FailedRequestEventObject>;
export type FailedRequestEventFilter = TypedEventFilter<FailedRequestEvent>;
export interface FulfilledRequestEventObject {
    airnode: string;
    requestId: string;
    data: string;
}
export type FulfilledRequestEvent = TypedEvent<[
    string,
    string,
    string
], FulfilledRequestEventObject>;
export type FulfilledRequestEventFilter = TypedEventFilter<FulfilledRequestEvent>;
export interface FulfilledWithdrawalEventObject {
    airnode: string;
    sponsor: string;
    withdrawalRequestId: string;
    sponsorWallet: string;
    amount: BigNumber;
}
export type FulfilledWithdrawalEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    BigNumber
], FulfilledWithdrawalEventObject>;
export type FulfilledWithdrawalEventFilter = TypedEventFilter<FulfilledWithdrawalEvent>;
export interface MadeFullRequestEventObject {
    airnode: string;
    requestId: string;
    requesterRequestCount: BigNumber;
    chainId: BigNumber;
    requester: string;
    endpointId: string;
    sponsor: string;
    sponsorWallet: string;
    fulfillAddress: string;
    fulfillFunctionId: string;
    parameters: string;
}
export type MadeFullRequestEvent = TypedEvent<[
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    string,
    string
], MadeFullRequestEventObject>;
export type MadeFullRequestEventFilter = TypedEventFilter<MadeFullRequestEvent>;
export interface MadeTemplateRequestEventObject {
    airnode: string;
    requestId: string;
    requesterRequestCount: BigNumber;
    chainId: BigNumber;
    requester: string;
    templateId: string;
    sponsor: string;
    sponsorWallet: string;
    fulfillAddress: string;
    fulfillFunctionId: string;
    parameters: string;
}
export type MadeTemplateRequestEvent = TypedEvent<[
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    string,
    string
], MadeTemplateRequestEventObject>;
export type MadeTemplateRequestEventFilter = TypedEventFilter<MadeTemplateRequestEvent>;
export interface RequestedWithdrawalEventObject {
    airnode: string;
    sponsor: string;
    withdrawalRequestId: string;
    sponsorWallet: string;
}
export type RequestedWithdrawalEvent = TypedEvent<[
    string,
    string,
    string,
    string
], RequestedWithdrawalEventObject>;
export type RequestedWithdrawalEventFilter = TypedEventFilter<RequestedWithdrawalEvent>;
export interface SetSponsorshipStatusEventObject {
    sponsor: string;
    requester: string;
    sponsorshipStatus: boolean;
}
export type SetSponsorshipStatusEvent = TypedEvent<[
    string,
    string,
    boolean
], SetSponsorshipStatusEventObject>;
export type SetSponsorshipStatusEventFilter = TypedEventFilter<SetSponsorshipStatusEvent>;
export interface AirnodeRrpV0 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: AirnodeRrpV0Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        checkAuthorizationStatus(authorizers: string[], airnode: string, requestId: BytesLike, endpointId: BytesLike, sponsor: string, requester: string, overrides?: CallOverrides): Promise<[boolean] & {
            status: boolean;
        }>;
        checkAuthorizationStatuses(authorizers: string[], airnode: string, requestIds: BytesLike[], endpointIds: BytesLike[], sponsors: string[], requesters: string[], overrides?: CallOverrides): Promise<[boolean[]] & {
            statuses: boolean[];
        }>;
        createTemplate(airnode: string, endpointId: BytesLike, parameters: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        fail(requestId: BytesLike, airnode: string, fulfillAddress: string, fulfillFunctionId: BytesLike, errorMessage: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        fulfill(requestId: BytesLike, airnode: string, fulfillAddress: string, fulfillFunctionId: BytesLike, data: BytesLike, signature: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        fulfillWithdrawal(withdrawalRequestId: BytesLike, airnode: string, sponsor: string, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        getTemplates(templateIds: BytesLike[], overrides?: CallOverrides): Promise<[
            string[],
            string[],
            string[]
        ] & {
            airnodes: string[];
            endpointIds: string[];
            parameters: string[];
        }>;
        makeFullRequest(airnode: string, endpointId: BytesLike, sponsor: string, sponsorWallet: string, fulfillAddress: string, fulfillFunctionId: BytesLike, parameters: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        makeTemplateRequest(templateId: BytesLike, sponsor: string, sponsorWallet: string, fulfillAddress: string, fulfillFunctionId: BytesLike, parameters: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        requestIsAwaitingFulfillment(requestId: BytesLike, overrides?: CallOverrides): Promise<[boolean] & {
            isAwaitingFulfillment: boolean;
        }>;
        requestWithdrawal(airnode: string, sponsorWallet: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        requesterToRequestCountPlusOne(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        setSponsorshipStatus(requester: string, sponsorshipStatus: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        sponsorToRequesterToSponsorshipStatus(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[boolean]>;
        sponsorToWithdrawalRequestCount(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        templates(arg0: BytesLike, overrides?: CallOverrides): Promise<[
            string,
            string,
            string
        ] & {
            airnode: string;
            endpointId: string;
            parameters: string;
        }>;
    };
    checkAuthorizationStatus(authorizers: string[], airnode: string, requestId: BytesLike, endpointId: BytesLike, sponsor: string, requester: string, overrides?: CallOverrides): Promise<boolean>;
    checkAuthorizationStatuses(authorizers: string[], airnode: string, requestIds: BytesLike[], endpointIds: BytesLike[], sponsors: string[], requesters: string[], overrides?: CallOverrides): Promise<boolean[]>;
    createTemplate(airnode: string, endpointId: BytesLike, parameters: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    fail(requestId: BytesLike, airnode: string, fulfillAddress: string, fulfillFunctionId: BytesLike, errorMessage: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    fulfill(requestId: BytesLike, airnode: string, fulfillAddress: string, fulfillFunctionId: BytesLike, data: BytesLike, signature: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    fulfillWithdrawal(withdrawalRequestId: BytesLike, airnode: string, sponsor: string, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    getTemplates(templateIds: BytesLike[], overrides?: CallOverrides): Promise<[
        string[],
        string[],
        string[]
    ] & {
        airnodes: string[];
        endpointIds: string[];
        parameters: string[];
    }>;
    makeFullRequest(airnode: string, endpointId: BytesLike, sponsor: string, sponsorWallet: string, fulfillAddress: string, fulfillFunctionId: BytesLike, parameters: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    makeTemplateRequest(templateId: BytesLike, sponsor: string, sponsorWallet: string, fulfillAddress: string, fulfillFunctionId: BytesLike, parameters: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    requestIsAwaitingFulfillment(requestId: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    requestWithdrawal(airnode: string, sponsorWallet: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    requesterToRequestCountPlusOne(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
    setSponsorshipStatus(requester: string, sponsorshipStatus: boolean, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    sponsorToRequesterToSponsorshipStatus(arg0: string, arg1: string, overrides?: CallOverrides): Promise<boolean>;
    sponsorToWithdrawalRequestCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
    templates(arg0: BytesLike, overrides?: CallOverrides): Promise<[
        string,
        string,
        string
    ] & {
        airnode: string;
        endpointId: string;
        parameters: string;
    }>;
    callStatic: {
        checkAuthorizationStatus(authorizers: string[], airnode: string, requestId: BytesLike, endpointId: BytesLike, sponsor: string, requester: string, overrides?: CallOverrides): Promise<boolean>;
        checkAuthorizationStatuses(authorizers: string[], airnode: string, requestIds: BytesLike[], endpointIds: BytesLike[], sponsors: string[], requesters: string[], overrides?: CallOverrides): Promise<boolean[]>;
        createTemplate(airnode: string, endpointId: BytesLike, parameters: BytesLike, overrides?: CallOverrides): Promise<string>;
        fail(requestId: BytesLike, airnode: string, fulfillAddress: string, fulfillFunctionId: BytesLike, errorMessage: string, overrides?: CallOverrides): Promise<void>;
        fulfill(requestId: BytesLike, airnode: string, fulfillAddress: string, fulfillFunctionId: BytesLike, data: BytesLike, signature: BytesLike, overrides?: CallOverrides): Promise<[boolean, string] & {
            callSuccess: boolean;
            callData: string;
        }>;
        fulfillWithdrawal(withdrawalRequestId: BytesLike, airnode: string, sponsor: string, overrides?: CallOverrides): Promise<void>;
        getTemplates(templateIds: BytesLike[], overrides?: CallOverrides): Promise<[
            string[],
            string[],
            string[]
        ] & {
            airnodes: string[];
            endpointIds: string[];
            parameters: string[];
        }>;
        makeFullRequest(airnode: string, endpointId: BytesLike, sponsor: string, sponsorWallet: string, fulfillAddress: string, fulfillFunctionId: BytesLike, parameters: BytesLike, overrides?: CallOverrides): Promise<string>;
        makeTemplateRequest(templateId: BytesLike, sponsor: string, sponsorWallet: string, fulfillAddress: string, fulfillFunctionId: BytesLike, parameters: BytesLike, overrides?: CallOverrides): Promise<string>;
        requestIsAwaitingFulfillment(requestId: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        requestWithdrawal(airnode: string, sponsorWallet: string, overrides?: CallOverrides): Promise<void>;
        requesterToRequestCountPlusOne(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
        setSponsorshipStatus(requester: string, sponsorshipStatus: boolean, overrides?: CallOverrides): Promise<void>;
        sponsorToRequesterToSponsorshipStatus(arg0: string, arg1: string, overrides?: CallOverrides): Promise<boolean>;
        sponsorToWithdrawalRequestCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
        templates(arg0: BytesLike, overrides?: CallOverrides): Promise<[
            string,
            string,
            string
        ] & {
            airnode: string;
            endpointId: string;
            parameters: string;
        }>;
    };
    filters: {
        "CreatedTemplate(bytes32,address,bytes32,bytes)"(templateId?: BytesLike | null, airnode?: null, endpointId?: null, parameters?: null): CreatedTemplateEventFilter;
        CreatedTemplate(templateId?: BytesLike | null, airnode?: null, endpointId?: null, parameters?: null): CreatedTemplateEventFilter;
        "FailedRequest(address,bytes32,string)"(airnode?: string | null, requestId?: BytesLike | null, errorMessage?: null): FailedRequestEventFilter;
        FailedRequest(airnode?: string | null, requestId?: BytesLike | null, errorMessage?: null): FailedRequestEventFilter;
        "FulfilledRequest(address,bytes32,bytes)"(airnode?: string | null, requestId?: BytesLike | null, data?: null): FulfilledRequestEventFilter;
        FulfilledRequest(airnode?: string | null, requestId?: BytesLike | null, data?: null): FulfilledRequestEventFilter;
        "FulfilledWithdrawal(address,address,bytes32,address,uint256)"(airnode?: string | null, sponsor?: string | null, withdrawalRequestId?: BytesLike | null, sponsorWallet?: null, amount?: null): FulfilledWithdrawalEventFilter;
        FulfilledWithdrawal(airnode?: string | null, sponsor?: string | null, withdrawalRequestId?: BytesLike | null, sponsorWallet?: null, amount?: null): FulfilledWithdrawalEventFilter;
        "MadeFullRequest(address,bytes32,uint256,uint256,address,bytes32,address,address,address,bytes4,bytes)"(airnode?: string | null, requestId?: BytesLike | null, requesterRequestCount?: null, chainId?: null, requester?: null, endpointId?: null, sponsor?: null, sponsorWallet?: null, fulfillAddress?: null, fulfillFunctionId?: null, parameters?: null): MadeFullRequestEventFilter;
        MadeFullRequest(airnode?: string | null, requestId?: BytesLike | null, requesterRequestCount?: null, chainId?: null, requester?: null, endpointId?: null, sponsor?: null, sponsorWallet?: null, fulfillAddress?: null, fulfillFunctionId?: null, parameters?: null): MadeFullRequestEventFilter;
        "MadeTemplateRequest(address,bytes32,uint256,uint256,address,bytes32,address,address,address,bytes4,bytes)"(airnode?: string | null, requestId?: BytesLike | null, requesterRequestCount?: null, chainId?: null, requester?: null, templateId?: null, sponsor?: null, sponsorWallet?: null, fulfillAddress?: null, fulfillFunctionId?: null, parameters?: null): MadeTemplateRequestEventFilter;
        MadeTemplateRequest(airnode?: string | null, requestId?: BytesLike | null, requesterRequestCount?: null, chainId?: null, requester?: null, templateId?: null, sponsor?: null, sponsorWallet?: null, fulfillAddress?: null, fulfillFunctionId?: null, parameters?: null): MadeTemplateRequestEventFilter;
        "RequestedWithdrawal(address,address,bytes32,address)"(airnode?: string | null, sponsor?: string | null, withdrawalRequestId?: BytesLike | null, sponsorWallet?: null): RequestedWithdrawalEventFilter;
        RequestedWithdrawal(airnode?: string | null, sponsor?: string | null, withdrawalRequestId?: BytesLike | null, sponsorWallet?: null): RequestedWithdrawalEventFilter;
        "SetSponsorshipStatus(address,address,bool)"(sponsor?: string | null, requester?: string | null, sponsorshipStatus?: null): SetSponsorshipStatusEventFilter;
        SetSponsorshipStatus(sponsor?: string | null, requester?: string | null, sponsorshipStatus?: null): SetSponsorshipStatusEventFilter;
    };
    estimateGas: {
        checkAuthorizationStatus(authorizers: string[], airnode: string, requestId: BytesLike, endpointId: BytesLike, sponsor: string, requester: string, overrides?: CallOverrides): Promise<BigNumber>;
        checkAuthorizationStatuses(authorizers: string[], airnode: string, requestIds: BytesLike[], endpointIds: BytesLike[], sponsors: string[], requesters: string[], overrides?: CallOverrides): Promise<BigNumber>;
        createTemplate(airnode: string, endpointId: BytesLike, parameters: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        fail(requestId: BytesLike, airnode: string, fulfillAddress: string, fulfillFunctionId: BytesLike, errorMessage: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        fulfill(requestId: BytesLike, airnode: string, fulfillAddress: string, fulfillFunctionId: BytesLike, data: BytesLike, signature: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        fulfillWithdrawal(withdrawalRequestId: BytesLike, airnode: string, sponsor: string, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        getTemplates(templateIds: BytesLike[], overrides?: CallOverrides): Promise<BigNumber>;
        makeFullRequest(airnode: string, endpointId: BytesLike, sponsor: string, sponsorWallet: string, fulfillAddress: string, fulfillFunctionId: BytesLike, parameters: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        makeTemplateRequest(templateId: BytesLike, sponsor: string, sponsorWallet: string, fulfillAddress: string, fulfillFunctionId: BytesLike, parameters: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        requestIsAwaitingFulfillment(requestId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        requestWithdrawal(airnode: string, sponsorWallet: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        requesterToRequestCountPlusOne(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
        setSponsorshipStatus(requester: string, sponsorshipStatus: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        sponsorToRequesterToSponsorshipStatus(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;
        sponsorToWithdrawalRequestCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
        templates(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        checkAuthorizationStatus(authorizers: string[], airnode: string, requestId: BytesLike, endpointId: BytesLike, sponsor: string, requester: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        checkAuthorizationStatuses(authorizers: string[], airnode: string, requestIds: BytesLike[], endpointIds: BytesLike[], sponsors: string[], requesters: string[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        createTemplate(airnode: string, endpointId: BytesLike, parameters: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        fail(requestId: BytesLike, airnode: string, fulfillAddress: string, fulfillFunctionId: BytesLike, errorMessage: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        fulfill(requestId: BytesLike, airnode: string, fulfillAddress: string, fulfillFunctionId: BytesLike, data: BytesLike, signature: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        fulfillWithdrawal(withdrawalRequestId: BytesLike, airnode: string, sponsor: string, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        getTemplates(templateIds: BytesLike[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        makeFullRequest(airnode: string, endpointId: BytesLike, sponsor: string, sponsorWallet: string, fulfillAddress: string, fulfillFunctionId: BytesLike, parameters: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        makeTemplateRequest(templateId: BytesLike, sponsor: string, sponsorWallet: string, fulfillAddress: string, fulfillFunctionId: BytesLike, parameters: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        requestIsAwaitingFulfillment(requestId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        requestWithdrawal(airnode: string, sponsorWallet: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        requesterToRequestCountPlusOne(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setSponsorshipStatus(requester: string, sponsorshipStatus: boolean, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        sponsorToRequesterToSponsorshipStatus(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        sponsorToWithdrawalRequestCount(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        templates(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=AirnodeRrpV0.d.ts.map